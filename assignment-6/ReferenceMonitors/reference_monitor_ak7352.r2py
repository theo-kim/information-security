"""
This security layer inadequately handles parity for files in RepyV2.



Note:
    This security layer uses encasementlib.r2py, restrictions.default, repy.py and Python
    Also you need to give it an application to run.
    python repy.py restrictions.default encasementlib.r2py [security_layer].r2py [attack_program].r2py 
    
    """ 
class RepyParityError(Exception):
    pass

class EvenParityFile():
  def __init__(self,filename,create):
    # globals
    mycontext['debug'] = False   
    # local (per object) reference to the underlying file
    self.fn = filename
 
    self.file = openfile(self.fn,create)


  def writeat(self,data,offset):
   
    #read the left and right parts of the data if already existing in the file.

    thisdata = ""
    leftdata = ""
    rightdata = ""
    if len(data) < len(self.file.readat(None,0)):
        leftdata = self.file.readat(offset,0)
        if offset+len(data) < len(self.file.readat(None,0)):
            rightdata = self.file.readat(None,offset+len(data))
    else:
        if offset > 0:
            leftdata = self.file.readat(offset,0)
    thisdata = leftdata + data + rightdata

    #merge all the parts of the new data and check for parity

    writeoffset = 0
    while thisdata:
        eightbytesequence = thisdata[:8]
        thisdata = thisdata[8:]
        count = 0;
        if len(eightbytesequence) < 8 and writeoffset > 0:
                self.file.writeat(eightbytesequence,writeoffset)
        else:
            for thisbyte in eightbytesequence:
                if ord(thisbyte) % 2:
                    count = count + 1
            if not count % 2:
                self.file.writeat(eightbytesequence,writeoffset)
            else:
                raise RepyParityError("Non-even parity write to file")
        writeoffset = writeoffset + 8 ;
  
  def readat(self,bytes,offset):
    # Read from the file using the sandbox's readat...
    return self.file.readat(bytes,offset)

  def close(self):
    self.file.close()


def parityopenfile(filename, create):
  return EvenParityFile(filename,create)




# The code here sets up type checking and variable hiding for you.  You
# should not need to change anything below here.
sec_file_def = {"obj-type":EvenParityFile,
                "name":"EvenParityFile",
                "writeat":{"type":"func","args":(str,(int,long)),"exceptions":Exception,"return":(int,type(None)),"target":EvenParityFile.writeat},
                "readat":{"type":"func","args":((int,long,type(None)),(int,long)),"exceptions":Exception,"return":str,"target":EvenParityFile.readat},
                "close":{"type":"func","args":None,"exceptions":None,"return":(bool,type(None)),"target":EvenParityFile.close}
           }

CHILD_CONTEXT_DEF["openfile"] = {"type":"objc","args":(str,bool),"exceptions":Exception,"return":sec_file_def,"target":parityopenfile}
CHILD_CONTEXT_DEF["RepyParityError"] = {"type":"any","target":RepyParityError}
# Execute the user code
secure_dispatch_module()