"""
This security layer inadequately handles parity for files in RepyV2.



Note:
    This security layer uses encasementlib.r2py, restrictions.default, repy.py and Python
    Also you need to give it an application to run.
    python repy.py restrictions.default encasementlib.r2py [security_layer].r2py [attack_program].r2py 
    
    """ 
class RepyParityError(Exception):
    pass

class EvenParityFile():
  def __init__(self,filename,create):
    # globals
    mycontext['debug'] = False   
    # local (per object) reference to the underlying file
    self.fn = filename
    self.len = 0
    self.file = openfile(self.fn,create)

    # check the parity of the data written
    # only want even number of non-even bytes for each 8 byte sequence
    # sample code does not take into account writing into an index
    # of the file that is not the end of the file i.e. attackers
    # can change the bytes of existing bytes in the file
  def writeat(self,data,offset):
    #If begins at index in which is the start of the 8 byte sequence
    lenFile = self.len
    even = True
    currOffSet = offset
    Totaldata = data
    realOffSet = offset

    if(offset > lenFile):
      raise RepyParityError("Non-even parity write to file")

    if offset % 8 != 0:
      count = 0
      while(currOffSet % 8 != 0):
        count = count + 1
        currOffSet = currOffSet + 1
      if(offset - count < 0):
        count = 0;
      seqBefore = self.file.readat(count, offset - count) + data[:count];
      offset = currOffSet
      data = data[count:]
      for thisbyte in seqBefore:
            if ord(thisbyte) % 2 == 1:
              even = not even
      if not even:
          raise RepyParityError("Non-even parity write to file")

    if currOffSet % 8 == 0:
      endOffSet = len(data) + offset
      thisdata = data
      if len(data) < 8:
        if offset == lenFile: 
          even = True
        if endOffSet < lenFile:
          indexLeft = 8 - len(data)
          eightbytesequence = data + self.file.readat(indexLeft, currOffSet + len(data))
          for thisbyte in eightbytesequence:
            if ord(thisbyte) % 2 == 1:
              even = not even
      else:   
        while currOffSet + 8 <= endOffSet:
          currOffSet = currOffSet + 8
          eightbytesequence = thisdata[:8]
          thisdata = thisdata[8:]
          for thisbyte in eightbytesequence:
            if ord(thisbyte) % 2 == 1:
              even = not even
        if not even:
          raise RepyParityError("Non-even parity write to file")
        if currOffSet < endOffSet:
          if(endOffSet >= lenFile):
            even = True
          else:
            beginSeq = thisdata
            indexLeft = 8 - len(thisdata)
            startSelf = currOffSet + len(thisdata) + 1
            eightbytesequence  = beginSeq + self.file.readat(indexLeft, endOffSet)
            if len(eightbytesequence) < 8:
              even = True
            else:
              for thisbyte in eightbytesequence:
                if ord(thisbyte) % 2 == 1:
                  even = not even
    if even:
      self.file.writeat(Totaldata, realOffSet)
      if(lenFile < endOffSet):
        self.len = endOffSet
    else:
      raise RepyParityError("Non-even parity write to file")

  
  
  def readat(self,bytes,offset):
    # Read from the file using the sandbox's readat...
    return self.file.readat(bytes,offset)

  def close(self):
    self.file.close()


def parityopenfile(filename, create):
  return EvenParityFile(filename,create)




# The code here sets up type checking and variable hiding for you.  You
# should not need to change anything below here.
sec_file_def = {"obj-type":EvenParityFile,
                "name":"EvenParityFile",
                "writeat":{"type":"func","args":(str,(int,long)),"exceptions":Exception,"return":(int,type(None)),"target":EvenParityFile.writeat},
                "readat":{"type":"func","args":((int,long,type(None)),(int,long)),"exceptions":Exception,"return":str,"target":EvenParityFile.readat},
                "close":{"type":"func","args":None,"exceptions":None,"return":(bool,type(None)),"target":EvenParityFile.close}
           }

CHILD_CONTEXT_DEF["openfile"] = {"type":"objc","args":(str,bool),"exceptions":Exception,"return":sec_file_def,"target":parityopenfile}
CHILD_CONTEXT_DEF["RepyParityError"] = {"type":"any","target":RepyParityError}
# Execute the user code
secure_dispatch_module()