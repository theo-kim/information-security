"""
This security layer inadequately handles parity for files in RepyV2.



Note:
    This security layer uses encasementlib.r2py, restrictions.default, repy.py and Python
    Also you need to give it an application to run.
    python repy.py restrictions.default encasementlib.r2py [security_layer].r2py [attack_program].r2py 
    
    """ 
class RepyParityError(Exception):
    pass

class OffsetError(Exception):
    pass

class EvenParityFile():
  def __init__(self,filename,create):
    # globals
    mycontext['debug'] = False   
    # local (per object) reference to the underlying file
    self.fn = filename
 
    self.file = openfile(self.fn,create)


  def writeat(self,data,offset):
   
    # check the parity of the data written

    thisdata = data
    tmp_offset = offset
    write_seq = []
    start_index = 0

    # write directly when less than 8
    if len(thisdata) + tmp_offset < 8:
      ori_sequence = self.file.readat(8,0)
      if len(ori_sequence) < 8:
        if tmp_offset > len(ori_sequence):
          raise OffsetError("Offset Index out of range")
        else:
          self.file.writeat(thisdata,tmp_offset)
      else:
        even = True
        total_seq = ori_sequence[0:tmp_offset] + thisdata + ori_sequence[tmp_offset + len(thisdata):8]
        for thisbyte in total_seq:
          if ord(thisbyte) % 2:
            even = not even
        if even:
          self.file.writeat(total_seq,0)
        else:
          raise RepyParityError("Non-even parity write to file")
    else:

      # head sequence
      if len(thisdata) + tmp_offset % 8 > 8:
        even = True
        head_offset = tmp_offset / 8 * 8
        try:
          ori_sequence = self.file.readat(8,head_offset)
        except SeekPastEndOfFileError:
          raise OffsetError("Offset Index out of range")
        else:
          head_ori_seq = ori_sequence[0:tmp_offset - head_offset]
          head_seq = head_ori_seq + thisdata[:8 - tmp_offset % 8]
          for thisbyte in head_seq:
            if ord(thisbyte) % 2:
              even = not even
          if even:
            write_seq = head_seq
            start_index = head_offset
          else:
            raise RepyParityError("Non-even parity write to file")
          thisdata = thisdata[8 - tmp_offset % 8:]

      #head and tail together sequence
      else:

        even = True
        head_offset_f = tmp_offset / 8 * 8
        tail_offset_f = (tmp_offset / 8 + 1) * 8
        ori_sequence = self.file.readat(8,head_offset_f)
        total_seq = ori_sequence[0:tmp_offset - head_offset_f] + thisdata + ori_sequence[tmp_offset + len(thisdata) - head_offset_f:tail_offset_f - head_offset_f]
        for thisbyte in total_seq:
          if ord(thisbyte) % 2:
            even = not even
        if even:
          write_seq = total_seq
          start_index = head_offset_f
        else:
          raise RepyParityError("Non-even parity write to file")
        thisdata = []

      # loop in data with 8 bytes
      while len(thisdata) >=8:
        eightbytesequence = thisdata[:8]
        thisdata = thisdata[8:]
        even = True
        for thisbyte in eightbytesequence:
          # for each byte, if it is odd, flip even to be the opposite
          if ord(thisbyte) % 2:
            even = not even
            
        # actually call write, if we are supposed to...
        if even:
          write_seq = write_seq + eightbytesequence
        # ...or error out.
        else:
          raise RepyParityError("Non-even parity write to file")

      # data remaining
      if thisdata:
        tail_offset = (len(data) + offset - 1) / 8 * 8
        try:
          ori_sequence = self.file.readat(8, tail_offset)
        except:
          write_seq = write_seq + thisdata
        else:
          if len(ori_sequence) < 8:
            write_seq = write_seq + thisdata

          # tail sequence
          else:
            tail_ori_seq = ori_sequence[offset + len(data) - tail_offset:8]
            tail_seq = thisdata + tail_ori_seq
            for thisbyte in tail_seq:
              if ord(thisbyte) % 2:
                even = not even
            if even:
              write_seq = write_seq + tail_seq
            else:
              raise RepyParityError("Non-even parity write to file")
      self.file.writeat(write_seq, start_index)

  
  def readat(self,bytes,offset):
    # Read from the file using the sandbox's readat...
    return self.file.readat(bytes,offset)

  def close(self):
    self.file.close()


def parityopenfile(filename, create):
  return EvenParityFile(filename,create)




# The code here sets up type checking and variable hiding for you.  You
# should not need to change anything below here.
sec_file_def = {"obj-type":EvenParityFile,
                "name":"EvenParityFile",
                "writeat":{"type":"func","args":(str,(int,long)),"exceptions":Exception,"return":(int,type(None)),"target":EvenParityFile.writeat},
                "readat":{"type":"func","args":((int,long,type(None)),(int,long)),"exceptions":Exception,"return":str,"target":EvenParityFile.readat},
                "close":{"type":"func","args":None,"exceptions":None,"return":(bool,type(None)),"target":EvenParityFile.close}
           }

CHILD_CONTEXT_DEF["openfile"] = {"type":"objc","args":(str,bool),"exceptions":Exception,"return":sec_file_def,"target":parityopenfile}
CHILD_CONTEXT_DEF["RepyParityError"] = {"type":"any","target":RepyParityError}
CHILD_CONTEXT_DEF["OffsetError"] = {"type":"any","target":OffsetError}
# Execute the user code
secure_dispatch_module()