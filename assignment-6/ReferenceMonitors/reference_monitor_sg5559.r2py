"""
This security layer inadequately handles parity for files in RepyV2.



Note:
    This security layer uses encasementlib.r2py, restrictions.default, repy.py and Python
    Also you need to give it an application to run.
    python repy.py restrictions.default encasementlib.r2py [security_layer].r2py [attack_program].r2py 
    
    """ 
class RepyParityError(Exception):
    pass

class EvenParityFile():

  def __init__(self,filename,create):
    # globals
    mycontext['debug'] = False   
    # local (per object) reference to the underlying file
    self.fn = filename
    self.eof1 = 0
    self.file = openfile(self.fn,create)


  def writeat(self,data,offset1):
    offset = offset1
    eof = self.eof1
    ##log("eof: ", self.eof1, "\n")
    thisdata2 = ""
    thisdata = ""
    ##log("eof < offset + len(data): ", eof < offset + len(data)  ,"\n")
    ##log("eof == offset + len(data) : ", eof == offset + len(data)  ,"\n")
    if (eof == 0) and (offset == 0):
      thisdata2 = data
    elif offset < 0:
      raise Exception
    elif (eof < offset + len(data)) | (eof == offset + len(data)):
      cut = eof - offset + 1
      ##log("cut: ", cut , "\n")
      thisdata = data[:cut]
      thisdata2 = data[cut:]
    else:
      thisdata = data
    ##log("\n")
    ##log("Thisdata: ", thisdata)
    ##log("Thisdata2: ", thisdata2)
    ##log("\n")
    even = True
    last = offset 
    while thisdata:
      even = True
      first = offset

      '''
      Finding the start of the 8 byte sequence 
      and the end of the of the 8 byte sequence 
      '''
      while first % 8 != 0:
        first = first - 1
      while last % 8 != 0: 
        last = last + 1 
      last =  last - 1       #because the offset starts from 0 
      if first < 0:
        first = 0
      if last > eof:
        last = eof

      ##log("first: ", first)
      ##log("\n")
      ##log("last: ", last)
      ##log("\n")

      
      '''
      Checking the parity of the bytes before offset from the start
      of the 8 byte sequence
      '''
      ###log("first part: ", self.file.readat(offset - first,first), "\n")
      for thisbyte in self.file.readat(offset - first,first):
        if ord(thisbyte) % 2:
          even = not even
          #t part", even, "\n")

      '''
      When the length of the left data is larger than  or equal to the remaining b
      '''
      remaining = last - offset + 1
      ##log("remaining: ", remaining, "\n")
      ###log("len(thisdata): ", len(thisdata), "\n")
      if (remaining < len(thisdata)) | (remaining == len(thisdata)):
        bytesequence = thisdata[:remaining]
        thisdata = thisdata[remaining:]
        ##log("Thisdata: ", thisdata)
        ##log("bytesequence: ", bytesequence)
        ##log("\n")
        for thisbyte in bytesequence:
          if ord(thisbyte) % 2:
            even = not even
            ##log("even byteseq:", even, "\n")

        if even:
          ##log("verdict", even, "\n")
          offset = last + 1 
          last = offset + 1
        else:
          ##log("hereeeeeeeee")
          break

      else:
        final = offset + len(thisdata) - 1
        ##log("final: ", final, "\n")
        bytesequence = thisdata[:len(thisdata)]
        thisdata = thisdata[len(thisdata):]
        for thisbyte in bytesequence:
          if ord(thisbyte) % 2:
            even = not even
        for thisbyte in self.file.readat(last - final,final + 1):
          if ord(thisbyte) % 2:
            even = not even
        
        if even:
          offset = last + 1
        else:
          break 

    even1 = even    
    while thisdata2:
        eightbytesequence = thisdata[:8]
        thisdata2 = thisdata2[8:]
        if len(thisdata2) > 8:
          even = True
          for thisbyte in eightbytesequence:
            # for each byte, if it is odd, flip even to be the opposite
            if ord(thisbyte) % 2:
              even = not even
              ##log(thisbyte , ":" , even)
          if even:
            even = True
          else:
            break                  
        else:
          even = True 
              
            
            
        # actually call write, if we are supposed to...
    if even and even1:
      self.file.writeat(data,offset1)
      eof = eof + eof + len(data) - offset -1
      self.eof1 = eof
    else:
      raise RepyParityError("Non-even parity write to file")

 
  def readat(self,bytes,offset):
    # Read from the file using the sandbox's readat...
    return self.file.readat(bytes,offset)

  def close(self):
    self.file.close()


def parityopenfile(filename, create):
  return EvenParityFile(filename,create)




# The code here sets up type checking and variable hiding for you.  You
# should not need to change anything below here.
sec_file_def = {"obj-type":EvenParityFile,
                "name":"EvenParityFile",
                "writeat":{"type":"func","args":(str,(int,long)),"exceptions":Exception,"return":(int,type(None)),"target":EvenParityFile.writeat},
                "readat":{"type":"func","args":((int,long,type(None)),(int,long)),"exceptions":Exception,"return":str,"target":EvenParityFile.readat},
                "close":{"type":"func","args":None,"exceptions":None,"return":(bool,type(None)),"target":EvenParityFile.close}
           }

CHILD_CONTEXT_DEF["openfile"] = {"type":"objc","args":(str,bool),"exceptions":Exception,"return":sec_file_def,"target":parityopenfile}
CHILD_CONTEXT_DEF["RepyParityError"] = {"type":"any","target":RepyParityError}
# Execute the user code
secure_dispatch_module()
##log('refmon')