"""
This security layer inadequately handles parity for files in RepyV2.



Note:
    This security layer uses encasementlib.r2py, restrictions.default, repy.py and Python
    Also you need to give it an application to run.
    python repy.py restrictions.default encasementlib.r2py [security_layer].r2py [attack_program].r2py 
    
    """



class RepyParityError(Exception):
    pass

class EvenParityFile():

  def __init__(self,filename,create):
    # globals
    mycontext['debug'] = False   
    # local (per object) reference to the underlying file
    self.fn = filename
 
    self.file = openfile(self.fn,create)

    # record the size of file in byte
    self.total_size = 0


  def writeat(self,data,offset):
    # check the parity of the data written

    # offset > EOF
    if offset > self.total_size or offset < 0 :
        return

    thisdata = data

    # length of inserted data
    data_len = len(thisdata)

    if data_len == 0:
        return

    # update data for special case
    new_data = thisdata

    pre_offset = offset

    # append pre_data to inserted data
    if offset % 8 != 0:
       pre_num = offset % 8
       pre_str = self.file.readat(pre_num,offset - pre_num)
       new_data = pre_str + new_data
       offset = offset - pre_num

    # append aft_data to inserted data
    aft_num = self.total_size - (pre_offset + data_len)
    if aft_num > 0:
       aft_num = 8 - ((pre_offset + data_len)%8)
       if aft_num > 0:
         aft_str = self.file.readat(aft_num, pre_offset + data_len)
         new_data = new_data + aft_str

    while new_data:
       eightbytesequence = new_data[:8]
       new_data = new_data[8:]
       cur_byte_size = len(eightbytesequence)

       # write without check EOF
       if cur_byte_size < 8:
          self.file.writeat(eightbytesequence,offset)

          # update file size
          if offset + cur_byte_size > self.total_size:
             self.total_size = offset + cur_byte_size
       else:
          even = True
          for thisbyte in eightbytesequence:
             # for each byte, if it is odd, flip even to be the opposite
             if ord(thisbyte) % 2:
                even = not even

          # actually call write, if we are supposed to...
          if even:
             self.file.writeat(eightbytesequence,offset)

             # update file size
             if offset + cur_byte_size > self.total_size:
                self.total_size = offset + cur_byte_size

             # update offset for next bytes sequence
             offset = offset + 8
          # ...or error out.
          else:
             raise RepyParityError("Non-even parity write to file")


  
  def readat(self,bytes,offset):
    # Read from the file using the sandbox's readat...
    return self.file.readat(bytes,offset)

  def close(self):
    self.file.close()


def parityopenfile(filename, create):
  return EvenParityFile(filename,create)




# The code here sets up type checking and variable hiding for you.  You
# should not need to change anything below here.
sec_file_def = {"obj-type":EvenParityFile,
                "name":"EvenParityFile",
                "writeat":{"type":"func","args":(str,(int,long)),"exceptions":Exception,"return":(int,type(None)),"target":EvenParityFile.writeat},
                "readat":{"type":"func","args":((int,long,type(None)),(int,long)),"exceptions":Exception,"return":str,"target":EvenParityFile.readat},
                "close":{"type":"func","args":None,"exceptions":None,"return":(bool,type(None)),"target":EvenParityFile.close}
           }

CHILD_CONTEXT_DEF["openfile"] = {"type":"objc","args":(str,bool),"exceptions":Exception,"return":sec_file_def,"target":parityopenfile}
CHILD_CONTEXT_DEF["RepyParityError"] = {"type":"any","target":RepyParityError}
# Execute the user code
secure_dispatch_module()
