"""
This security layer inadequately handles parity for files in RepyV2.



Note:
    This security layer uses encasementlib.r2py, restrictions.default, repy.py and Python
    Also you need to give it an application to run.
    python repy.py restrictions.default encasementlib.r2py [security_layer].r2py [attack_program].r2py 
    
    """ 

mycontext['writecount'] = 0

class RepyParityError(Exception):
    pass

class EvenParityFile():
  def __init__(self,filename,create):
    # globals
    mycontext['debug'] = False   
    # local (per object) reference to the underlying file
    self.fn = filename
 
    self.file = openfile(self.fn, create)


  def writeat(self,data,offset):
    mycontext['writecount'] = mycontext['writecount'] + 1
    # check the parity of the data written
    # NOTE: This is wrong in many ways!!!!
    thisdata = data
    while thisdata:
        eightbytesequence = thisdata[:8]
        thisdata = thisdata[8:]
        even = True

        byteSize = 0
        
        for thisbyte in eightbytesequence:
          # for each byte, if it is odd, flip even to be the opposite
          byteSize += ord(thisbyte)
          if ord(thisbyte) % 2:
            even = not even

        
        fileString = self.file.readat(10, 0) 
        pendingFileString = fileString[:offset]
        pendingFileString = pendingFileString + data 
        pendingFileString = pendingFileString + fileString[offset+len(data):]
        #log('pending file: ' + pendingFileString + '\n')
        #log('currentfile: ', fileString, '\n')
        validWrite = True

        #checks the the pending write if the file size is less than eight bytes
        pendingWrite = pendingFileString
        while pendingWrite:
          smalleightbytesequence = pendingWrite[:8]
          pendingWrite = pendingWrite[8:]
          smallEven = True

          smallbyteSize = 0
          
          for smallthisbyte in smalleightbytesequence:
            # for each byte, if it is odd, flip even to be the opposite
            smallbyteSize += ord(smallthisbyte)
            if ord(smallthisbyte) % 2:
              smallEven = not smallEven
          if smallEven == False:
            validWrite = False

        #checks the pending write if the file size is eight bytes or greater
        index = 0
        while (index < len(pendingFileString)-7):
          newdata = pendingFileString[index:index+8]
          #log('sequence:', newdata)
          while newdata:
            eightbytesequence2 = newdata[:8]
            newdata = newdata[8:]
            isEven = True

            byteSize2 = 0

            for thebyte in eightbytesequence2:
          
              byteSize2 += ord(thebyte)
              if ord(thebyte) % 2:
                isEven = not isEven

            if isEven:
              pass
            else:
              validWrite = False;
              #log('invalid sequence: ', newdata)
              break

          index+=1  #log('This sequence is', even2)

        # actually call write, if we are supposed to...
        #log('Valid Write:', validWrite)
        if even and validWrite:
          self.file.writeat(eightbytesequence,offset)
          #log('Successful write\n')
          fileString = self.file.readat(12, 0) 
          #log(fileString, '\n\n')
          #log('Even Byte Size: ', byteSize)
        # ...or error out.
        else:
          #log('Write denied\n')
          #log('Odd Byte Size: ', byteSize, "\n")
          raise RepyParityError("Non-even parity write to file")
        


  
  def readat(self,bytes,offset):
    # Read from the file using the sandbox's readat...
    return self.file.readat(bytes,offset)

  def close(self):
    self.file.close()


def parityopenfile(filename, create):
  return EvenParityFile(filename,create)




# The code here sets up type checking and variable hiding for you.  You
# should not need to change anything below here.
sec_file_def = {"obj-type":EvenParityFile,
                "name":"EvenParityFile",
                "writeat":{"type":"func","args":(str,(int,long)),"exceptions":Exception,"return":(int,type(None)),"target":EvenParityFile.writeat},
                "readat":{"type":"func","args":((int,long,type(None)),(int,long)),"exceptions":Exception,"return":str,"target":EvenParityFile.readat},
                "close":{"type":"func","args":None,"exceptions":None,"return":(bool,type(None)),"target":EvenParityFile.close}
           }

CHILD_CONTEXT_DEF["openfile"] = {"type":"objc","args":(str,bool),"exceptions":Exception,"return":sec_file_def,"target":parityopenfile}
CHILD_CONTEXT_DEF["RepyParityError"] = {"type":"any","target":RepyParityError}
# Execute the user code
secure_dispatch_module()