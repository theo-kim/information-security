"""
This security layer inadequately handles parity for files in RepyV2.
Note:
    This security layer uses encasementlib.r2py, restrictions.default, repy.py and Python
    Also you need to give it an application to run.
    python repy.py restrictions.default encasementlib.r2py [security_layer].r2py [attack_program].r2py
"""


class RepyParityError(Exception):
	pass

class EvenParityFile():
	def __init__(self,filename,create):
		# globals
		mycontext['debug'] = False
		# local (per object) reference to the underlying file
		self.fn = filename
		self.file = openfile(self.fn,create)
		#self.len = 0


	def writeat(self,data,offset):

		# check the parity of the data written
		# NOTE: This is wrong in many ways!!!!

		if type(data) != str:
			raise RepyParityError("Data given was not a string")

		if type(offset) != int:
			raise RepyParityError("Offset given was not of type int")

		'''
		if offset > self.len or offset < 0:
			raise RepyParityError("Write to outside file bounds")
		'''

		prevPortion = self.file.readat(None, 8 * (offset//8))
		prevPortion = prevPortion[:offset]
		while data:
			middle = data[:8 - len(prevPortion)]
			data = data[8 - len(prevPortion):]
			nextPortion = ''
			end = ''
			try:
				nextPortion = self.file.readat(None, 8 * (offset//8) + len(middle))
				end = nextPortion[:8 - len(prevPortion) - len(middle)]
			except: #out of bounds read
				pass

			eightbytesequence = prevPortion + middle + end

			if nextPortion != '':
				nextPortion = nextPortion[8 - len(prevPortion) - len(middle)]
			prevPortion = ''
			even = True
			for thisbyte in eightbytesequence:
				# for each byte, if it is odd, flip even to be the opposite
				if ord(thisbyte) % 2:
					even = not even
			# actually call write, if we are supposed to...
			if even:
				self.file.writeat(eightbytesequence, 8 * (offset//8))
				#self.len += len(middle) + len(end)
			# ...or error out.
			else:
				#self.len += len(prevPortion)
				raise RepyParityError("Non-even parity write to file")
			offset += 8

	def readat(self,bytes,offset):
		# Read from the file using the sandbox's readat...
		'''
		if offset > self.len or offset < 0:
			raise RepyParityError("Read to outside of file bounds")
		'''
		#log('len: ' + str(self.len) + '\n')
		return self.file.readat(bytes,offset)

	def close(self):
		self.file.close()


def parityopenfile(filename, create):
	return EvenParityFile(filename,create)




# The code here sets up type checking and variable hiding for you.  You
# should not need to change anything below here.
sec_file_def = {"obj-type":EvenParityFile,
                "name":"EvenParityFile",
                "writeat":{"type":"func","args":(str,(int,long)),"exceptions":Exception,"return":(int,type(None)),"target":EvenParityFile.writeat},
                "readat":{"type":"func","args":((int,long,type(None)),(int,long)),"exceptions":Exception,"return":str,"target":EvenParityFile.readat},
                "close":{"type":"func","args":None,"exceptions":None,"return":(bool,type(None)),"target":EvenParityFile.close}
           }

CHILD_CONTEXT_DEF["openfile"] = {"type":"objc","args":(str,bool),"exceptions":Exception,"return":sec_file_def,"target":parityopenfile}
CHILD_CONTEXT_DEF["RepyParityError"] = {"type":"any","target":RepyParityError}
# Execute the user code
secure_dispatch_module()
