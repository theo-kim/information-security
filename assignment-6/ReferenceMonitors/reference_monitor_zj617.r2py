"""
This security layer inadequately handles parity for files in RepyV2.



Note:
    This security layer uses encasementlib.r2py, restrictions.default, repy.py and Python
    Also you need to give it an application to run.
    python repy.py restrictions.default encasementlib.r2py [security_layer].r2py [attack_program].r2py

    """
class RepyParityError(Exception):
    pass

class EvenParityFile():
  def __init__(self,filename,create):
    # globals
    mycontext['debug'] = False
    # local (per object) reference to the underlying file
    self.fn = filename

    self.file = openfile(self.fn,create)


  def writeat(self,data,offset):

    # check the parity of the data written
    # read old file
    numberInterval = offset / 8
    startPoint = offset % 8
    previousData = self.readat(8,(numberInterval*8))

    # combing new data with previous data
    thisdata = previousData[:startPoint]
    for currentByte in data:
        thisdata += currentByte

    isRest = True
    restLength = len(thisdata) % 8
    occupiedIntervals = len(thisdata) / 8
    if not restLength:
      isRest = False

    if isRest:
      try:
        previousRestData = self.readat(8 - restLength,(numberInterval+occupiedIntervals)*8+restLength)
      except Exception:
        pass
      else:
        for currentByte in previousRestData:
          thisdata += currentByte

    # when data is more than 8 bytes, we need this pointer to indicate the offset
    writingPoint = numberInterval*8
    while thisdata:
        eightbytesequence = thisdata[:8]
        thisdata = thisdata[8:]
        if len(eightbytesequence) < 8:
          self.file.writeat(eightbytesequence,writingPoint)
        else:
          even = True
          for thisbyte in eightbytesequence:
            # for each byte, if it is odd, flip even to be the opposite
            if ord(thisbyte) % 2:
              even = not even

          # actually call write, if we are supposed to...
          if even:
            self.file.writeat(eightbytesequence,writingPoint)
            writingPoint += 8
          # ...or error out.
          else:
            raise RepyParityError("Non-even parity write to file")


  def readat(self,bytes,offset):
    # Read from the file using the sandbox's readat...
    return self.file.readat(bytes,offset)

  def close(self):
    self.file.close()


def parityopenfile(filename, create):
  return EvenParityFile(filename,create)




# The code here sets up type checking and variable hiding for you.  You
# should not need to change anything below here.
sec_file_def = {"obj-type":EvenParityFile,
                "name":"EvenParityFile",
                "writeat":{"type":"func","args":(str,(int,long)),"exceptions":Exception,"return":(int,type(None)),"target":EvenParityFile.writeat},
                "readat":{"type":"func","args":((int,long,type(None)),(int,long)),"exceptions":Exception,"return":str,"target":EvenParityFile.readat},
                "close":{"type":"func","args":None,"exceptions":None,"return":(bool,type(None)),"target":EvenParityFile.close}
           }

CHILD_CONTEXT_DEF["openfile"] = {"type":"objc","args":(str,bool),"exceptions":Exception,"return":sec_file_def,"target":parityopenfile}
CHILD_CONTEXT_DEF["RepyParityError"] = {"type":"any","target":RepyParityError}
# Execute the user code
secure_dispatch_module()
