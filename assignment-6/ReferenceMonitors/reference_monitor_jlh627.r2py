class RepyParityError(Exception):
    pass


class EvenParityFile:
    def __init__(self, filename, create):
        # globals
        mycontext["debug"] = False
        # local (per object) reference to the underlying file
        self.fn = filename

        self.file = openfile(self.fn, create)

    def writeat(self, data, offset):
        expected_end_offset = offset + len(data)
        # first unaligned chunk:
        if not self.is_chunk_aligned(offset):
            try:
                start_chunk_offset = self.get_chunk_number(offset) * 8
                start_chunk = self.file.readat(8, start_chunk_offset)
                chunk_kept_portion = offset - start_chunk_offset
                new_start_chunk = (
                    start_chunk[:chunk_kept_portion] + data[: 8 - chunk_kept_portion]
                )
                assert len(new_start_chunk) == 8, "Incorrect chunk length: {}".format(
                    len(new_start_chunk)
                )
                if not self.get_parity(new_start_chunk):
                    raise RepyParityError("Non-even parity write to file")
            except SeekPastEndOfFileError:
                new_start_chunk = data
            # write our updated chunk
            self.file.writeat(new_start_chunk, start_chunk_offset)
            # align offset:
            offset = start_chunk_offset + 8
            # chop off data we've dealt with
            data = data[8 - chunk_kept_portion :]

        # write middle bytes, checking their parity (but not reading old data off disk)
        while len(data) >= 8:
            chunk = data[:8]
            if not self.get_parity(chunk):
                raise RepyParityError("Non-even parity write to file")
            self.file.writeat(chunk, offset)
            offset += 8
            data = data[8:]

        # last chunk if we've got leftover data
        if len(data) != 0:
            try:
                end_chunk_offset = self.get_chunk_number(offset) * 8
                end_chunk = self.file.readat(8, end_chunk_offset)
                chunk_kept_portion = 8 - len(data)
                new_end_chunk = data + end_chunk[8 - chunk_kept_portion :]
                if not self.get_parity(new_end_chunk):
                    raise RepyParityError("Non-even parity write to file")
            except SeekPastEndOfFileError:
                new_end_chunk = data
            # write updated chunk
            self.file.writeat(new_end_chunk, offset)
            # for consistency, update offset
            offset += len(data)
            # ditto for data
            data = []

        # sanity check that we've written all data
        assert len(data) == 0, "Not all data written ({} bytes left)".format(len(data))
        assert (
            offset == expected_end_offset
        ), "Mismatch in expected write offset (got {}, expected {})".format(
            offset, expected_end_offset
        )

    def readat(self, bytes, offset):
        # Read from the file using the sandbox's readat...
        return self.file.readat(bytes, offset)

    def close(self):
        self.file.close()

    def get_parity(self, chunk):
        if len(chunk) != 8:
            return True

        even = True
        for c in chunk:
            if ord(c) % 2:
                even = not even
        return even

    def get_chunk_number(self, file_offset):
        return file_offset // 8

    def is_chunk_aligned(self, file_offset):
        return file_offset % 8 == 0


def parityopenfile(filename, create):
    return EvenParityFile(filename, create)


# yapf: disable
# The code here sets up type checking and variable hiding for you.  You
# should not need to change anything below here.
sec_file_def = {"obj-type":EvenParityFile,
                "name":"EvenParityFile",
                "writeat":{"type":"func","args":(str,(int,long)),"exceptions":Exception,"return":(int,type(None)),"target":EvenParityFile.writeat},
                "readat":{"type":"func","args":((int,long,type(None)),(int,long)),"exceptions":Exception,"return":str,"target":EvenParityFile.readat},
                "close":{"type":"func","args":None,"exceptions":None,"return":(bool,type(None)),"target":EvenParityFile.close}
           }

CHILD_CONTEXT_DEF["openfile"] = {"type":"objc","args":(str,bool),"exceptions":Exception,"return":sec_file_def,"target":parityopenfile}
CHILD_CONTEXT_DEF["RepyParityError"] = {"type":"any","target":RepyParityError}
# Execute the user code
secure_dispatch_module()
