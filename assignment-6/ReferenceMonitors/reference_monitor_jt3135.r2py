class RepyParityError(Exception):
	pass

class EvenParityFile():
	def __init__(self,filename,create):
		# globals
		mycontext['debug'] = False   
		# local (per object) reference to the underlying file
		self.fn = filename
		self.file = openfile(self.fn,create)


	def writeat(self,data,offset):
		# check the parity of the data written
		# NOTE: This is wrong in many ways!!!!
		head = ""
		old = self.file.readat(None, 0)
		tail = old
		if (len(old) < offset):
			offset = len(old)
		if (offset > 0):
			start = offset - (offset % 8)
			head = old[start:offset]
			old = old[offset:]
			tail = old
		if (offset < 8):
			start = offset
		thisdata = data
		leftover = ""
		while thisdata:
			even = 0
			if head:
				eightbytesequence = head + thisdata[:(8 - start)]
				thisdata = thisdata[(8 - start):]
				head = ""
			else: 
				eightbytesequence = thisdata[:8]
				thisdata = thisdata[8:]
			if (len(eightbytesequence) == 8):
				for thisbyte in eightbytesequence:
					# for each byte, if it is odd, increment counter by 1
					if ((ord(thisbyte) % 2) == 1):
						even += 1
				if (even % 2 == 1):
					raise RepyParityError("Non-even parity write to file")
			else:
				leftover = eightbytesequence
		while old:
			even = 0
			if leftover:
				start = len(leftover)
				eightbytesequence = leftover + old[:(8 - start)]
				old = old[(8 - start):]
				leftover = ""
			else: 
				eightbytesequence = old[:8]
				old = old[8:]
			if (len(eightbytesequence) == 8):
				for thisbyte in eightbytesequence:
					# for each byte, if it is odd, increment counter by 1
					if (ord(thisbyte) % 2 == 1):
						even += 1
				if (even % 2 == 1):
					raise RepyParityError("Non-even parity write to file")
		ans = head + data + tail
		# actually call write, if we are supposed to...
		self.file.writeat(ans, offset)
		
	
	def readat(self,bytes,offset):
		# Read from the file using the sandbox's readat...
		return self.file.readat(bytes,offset)

	def close(self):
		self.file.close()


def parityopenfile(filename, create):
	return EvenParityFile(filename,create)




# The code here sets up type checking and variable hiding for you.  You
# should not need to change anything below here.
sec_file_def = {"obj-type":EvenParityFile,
				"name":"EvenParityFile",
				"writeat":{"type":"func","args":(str,(int,long)),"exceptions":Exception,"return":(int,type(None)),"target":EvenParityFile.writeat},
				"readat":{"type":"func","args":((int,long,type(None)),(int,long)),"exceptions":Exception,"return":str,"target":EvenParityFile.readat},
				"close":{"type":"func","args":None,"exceptions":None,"return":(bool,type(None)),"target":EvenParityFile.close}
				}

CHILD_CONTEXT_DEF["openfile"] = {"type":"objc","args":(str,bool),"exceptions":Exception,"return":sec_file_def,"target":parityopenfile}
CHILD_CONTEXT_DEF["RepyParityError"] = {"type":"any","target":RepyParityError}
# Execute the user code
secure_dispatch_module()