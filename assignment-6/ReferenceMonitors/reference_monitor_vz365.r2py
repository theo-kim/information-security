"""
This security layer inadequately handles parity for files in RepyV2.



Note:
    This security layer uses encasementlib.r2py, restrictions.default, repy.py and Python
    Also you need to give it an application to run.
    python repy.py restrictions.default encasementlib.r2py [security_layer].r2py [attack_program].r2py 
    
    """ 
class RepyParityError(Exception):
    pass

class EvenParityFile():
  def __init__(self,filename,create):
    # globals
    mycontext['debug'] = False   
    # local (per object) reference to the underlying file
    self.fn = filename
 
    self.file = openfile(self.fn,create)


  def writeat(self,data,offset):
    #log('data is: ', data)
    textAlreadyThere = self.file.readat(None,0)
    #log('\ntextAlreadyThere is:', textAlreadyThere)
    textSize = len(textAlreadyThere)
    #log('\ntextsize is: ',textSize)
    textBytesLeft = textSize % 8 #this is how many bytes we have to check in the previous text
    if (textBytesLeft != 0):
      lastBytesToCheck = ''
      for i in range(0,textBytesLeft):
        lastBytesToCheck =  lastBytesToCheck + textAlreadyThere[i]
      #log('\nlastBytesToCheck: ', lastBytesToCheck)
      #log('\ntextAlreadyThere adfj;faslffjlaflfjdlk', textAlreadyThere)

    # check the parity of the data written
    eightByteParityCounter = 0
    isOdd = False
    if (textBytesLeft != 0):
      for i in range(0,textBytesLeft):
        dataByteParity = ord(lastBytesToCheck[i])
        #log('\ndataByteParity is: dataByteParity')
        if (dataByteParity % 2 != 0): #is odd parity, add to counter
          eightByteParityCounter = eightByteParityCounter+1
      dataToWrite = lastBytesToCheck
      #log('lastBytesToCheck: akl;dsjfakfjlakdsskafjklflfaldskfjds is', lastBytesToCheck)
    else:
      dataToWrite = ''

    eightByteIndexCounter = textBytesLeft
    #log("\nstarting eightByteIndexCounter: ", eightByteIndexCounter)
    dataCounter = 0
    dataSize = len(data)
    #log('data is adk;fja;lfjldksjslafjlkldskfasf;lajffajl: ', data)
    for i in range(0,dataSize):
      dataByteParity = ord(data[dataCounter])
      dataToWrite = dataToWrite + data[dataCounter] #concatinate the two strings
      #log('\ndataCounter: ',dataCounter)
      #log('\ndata[dataCounter]: ', data[dataCounter])
      #log('\ndataToWrite: ',dataToWrite)
      dataCounter = dataCounter + 1
      eightByteIndexCounter = eightByteIndexCounter+1
      if (dataByteParity % 2 != 0): #is odd parity, add to counter
        #log('\neightByteParityCounter: ', eightByteParityCounter)
        eightByteParityCounter = eightByteParityCounter+1
        #log('eightByteParityCounter loop: ',eightByteParityCounter)
        #log('\neightByteIndexCounter loop:', eightByteIndexCounter)
        #log('\ndatasize: ', dataSize)
        #log('\n i is: ',i)
      if ((i == dataSize-1) and (eightByteIndexCounter != 8)): #at the end of the data string so just write
        #log('\nwriting down here: ', dataToWrite)
        #log('\neightByteParityCounter is ', eightByteParityCounter)
        self.file.writeat(dataToWrite,offset)
      if (eightByteIndexCounter == 8): #at the last index of 8-byte array, check parity to see if write is still allowed
        #log('eightByteParityCounter at 8th byte: ', eightByteParityCounter)
        if (eightByteParityCounter % 2 != 0): #if sumParity is odd, then we are not allowed to write
          isOdd = True
          break
        else:
          self.file.writeat(dataToWrite,offset)
          dataToWrite = ''
          offset = offset+8
          eightByteParityCounter = 0
          eightByteIndexCounter = 0




    #if odd sequence exists then call error
    if (isOdd):
      raise RepyParityError("Non-even parity write to file")
  
  def readat(self,bytes,offset):
    # Read from the file using the sandbox's readat...
    return self.file.readat(bytes,offset)

  def close(self):
    self.file.close()


def parityopenfile(filename, create):
  return EvenParityFile(filename,create)




# The code here sets up type checking and variable hiding for you.  You
# should not need to change anything below here.
sec_file_def = {"obj-type":EvenParityFile,
                "name":"EvenParityFile",
                "writeat":{"type":"func","args":(str,(int,long)),"exceptions":Exception,"return":(int,type(None)),"target":EvenParityFile.writeat},
                "readat":{"type":"func","args":((int,long,type(None)),(int,long)),"exceptions":Exception,"return":str,"target":EvenParityFile.readat},
                "close":{"type":"func","args":None,"exceptions":None,"return":(bool,type(None)),"target":EvenParityFile.close}
           }

CHILD_CONTEXT_DEF["openfile"] = {"type":"objc","args":(str,bool),"exceptions":Exception,"return":sec_file_def,"target":parityopenfile}
CHILD_CONTEXT_DEF["RepyParityError"] = {"type":"any","target":RepyParityError}
# Execute the user code
secure_dispatch_module()