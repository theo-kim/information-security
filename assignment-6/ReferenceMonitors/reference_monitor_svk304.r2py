
class RepyParityError(Exception):
	pass

class EvenParityFile():
	def __init__(self,filename,create):
    # globals
		mycontext['debug'] = False
    # local (per object) reference to the underlying file
		self.fn = filename
		self.file = openfile(self.fn,create)

	def readat(self,bytes,offset):
		return self.file.readat(bytes,offset)

	def close(self):
		self.file.close()

	def writeat(self,data,offset):
		thisdata = data
		if offset % 8 != 0:
			data_read = readat(self, offset%8, offset-(offset%8))
			thisdata = data_read + thisdata
		if len(thisdata) % 8 != 0:
			data_read = readat(self, 8-(len(thisdata)%8), offset-(offset%8)+len(thisdata))
			thisdata = thisdata + data_read

		while thisdata:
			eightbytesequence = thisdata[:8]
			thisdata = thisdata[8:]
			even = True
			count = 0
			if len(eightbytesequence) == 8:
				for thisbyte in eightbytesequence:
					if ord(thisbyte) % 2 != 0:
						# count odd bytes
						count = count + 1
				if count % 2 != 0:
					even = not even
					break;
		if even:
			self.file.writeat(data,offset)
		else:
			raise RepyParityError("Non-even parity write to file")

def parityopenfile(filename, create):
	return EvenParityFile(filename,create)


# The code here sets up type checking and variable hiding for you.  You
# should not need to change anything below here.
sec_file_def = {"obj-type":EvenParityFile,
                "name":"EvenParityFile",
                "writeat":{"type":"func","args":(str,(int,long)),"exceptions":Exception,"return":(int,type(None)),"target":EvenParityFile.writeat},
                "readat":{"type":"func","args":((int,long,type(None)),(int,long)),"exceptions":Exception,"return":str,"target":EvenParityFile.readat},
                "close":{"type":"func","args":None,"exceptions":None,"return":(bool,type(None)),"target":EvenParityFile.close}
           }

CHILD_CONTEXT_DEF["openfile"] = {"type":"objc","args":(str,bool),"exceptions":Exception,"return":sec_file_def,"target":parityopenfile}
CHILD_CONTEXT_DEF["RepyParityError"] = {"type":"any","target":RepyParityError}
# Execute the user code
secure_dispatch_module()
