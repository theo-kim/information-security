"""
This security layer inadequately handles parity for files in RepyV2.



Note:
    This security layer uses encasementlib.r2py, restrictions.default, repy.py and Python
    Also you need to give it an application to run.
    python repy.py restrictions.default encasementlib.r2py [security_layer].r2py [attack_program].r2py 
    
    """ 

def floor(n):
  return n - (n % 1) 

#i put this out in its own func to make it easier to check
def check8Chunk(chunk): #checks if its even or odd
  even = True
  for thisbyte in chunk:
    # for each byte, if it is odd, flip even to be the opposite
    if ord(thisbyte) % 2:
      even = not even
  return even  

class RepyParityError(Exception):
    pass

class EvenParityFile():
  def __init__(self,filename,create):
    # globals
    mycontext['debug'] = False   
    # local (per object) reference to the underlying file
    self.fn = filename
 
    self.file = openfile(self.fn,create)


#TODO
#Check entirety parity before writing
#Write at correct offsets

  def writeat(self,data,offset):
   
    # check the parity of the data written
    # NOTE: This is wrong in many ways!!!!f

    #if theres no data to add, we just return cuz nothing gets changed
    if data == '':
      return
    #else, if somethings changed  
    thisdata = data #lets put the data we need to add in its own variable
    count = 0

    #readFrom is beginning of the 8-byte sequence where data is inserted; where we start checking
    readFrom = floor(offset/8)*8 
    bytesRead = 8 - (offset%8) #how many bytes we read from readFrom to get the 'prefix'
    dataFrom = 8 - offset % 8 #how many chars we read from 'data' to make the first 8 seq

    if offset%8 != 0:
      prefix = self.readat(bytesRead, readFrom) 
      
      chunk = prefix + data[:dataFrom]
      if not check8Chunk(chunk):
        raise RepyParityError("Non-even parity write to file")
        return

    eRange = floor((len(data) - offset % 8)/8) - 1 #num of iterations where theres 8 sections contained ENTIRELY with data
    for i in range(0, eRange + 1):
      ff = dataFrom + i * 8 #our offsets
      chunk = data[ff:ff + 8]
      if not check8Chunk(chunk):
        raise RepyParityError("Non-even parity write to file")
        return

    if len(data) > 8: #checking data stragglers at the end- in which the last pieces of data don't form a perfect 8 seq
      end = (dataFrom + (eRange + 1) * 8) #where the last pieces start
      suf = ''
      leftover = len(data) - (dataFrom + (eRange + 1) * 8) # how many 'leftovers'/stragglers there are
      try:
        test = self.readat(8 - leftover, dataFrom + (eRange + 1) * 8) #the chars we read from the file to form the 8-sequence needed
        if not check8Chunk(data[end : end + leftover] + test): #check if our 8-sequence of (stragglers + chars from file)
          raise RepyParityError("Non-even parity write to file")
          return
      except RepyParityError: 
        raise RepyParityError("Non-even parity write to file")
        return
      except: # catch other exceptions (e.g. end of file exception)
        1+1 #give it a pass if it goes here
    self.file.writeat(data,offset)



    # while thisdata:
    #     eightbytesequence = thisdata[:8]
    #     thisdata = thisdata[8:]
    #     even = True
    #     for thisbyte in eightbytesequence:
    #       # for each byte, if it is odd, flip even to be the opposite
    #       if ord(thisbyte) % 2:
    #         even = not even
            
    #     # actually call write, if we are supposed to...
    #     if even: #OK-noticed that this overwrites whats in the file (e.g. 'AAA', writeat(0, 'B'), then we'd get 'BAA')
    #       self.file.writeat(eightbytesequence,count * 8 + offset)
    #     # ...or error out.
    #     else:
    #       raise RepyParityError("Non-even parity write to file")
    #     count+=1
  



  def readat(self,bytes,offset):
    # Read from the file using the sandbox's readat...
    return self.file.readat(bytes,offset)

  def close(self):
    self.file.close()


def parityopenfile(filename, create):
  return EvenParityFile(filename,create)




# The code here sets up type checking and variable hiding for you.  You
# should not need to change anything below here.
sec_file_def = {"obj-type":EvenParityFile,
                "name":"EvenParityFile",
                "writeat":{"type":"func","args":(str,(int,long)),"exceptions":Exception,"return":(int,type(None)),"target":EvenParityFile.writeat},
                "readat":{"type":"func","args":((int,long,type(None)),(int,long)),"exceptions":Exception,"return":str,"target":EvenParityFile.readat},
                "close":{"type":"func","args":None,"exceptions":None,"return":(bool,type(None)),"target":EvenParityFile.close}
           }

CHILD_CONTEXT_DEF["openfile"] = {"type":"objc","args":(str,bool),"exceptions":Exception,"return":sec_file_def,"target":parityopenfile}
CHILD_CONTEXT_DEF["RepyParityError"] = {"type":"any","target":RepyParityError}
# Execute the user code
secure_dispatch_module()