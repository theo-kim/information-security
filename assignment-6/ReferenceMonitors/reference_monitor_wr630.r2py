"""
This security layer inadequately handles parity for files in RepyV2.



Note:
    This security layer uses encasementlib.r2py, restrictions.default, repy.py and Python
    Also you need to give it an application to run.
    python repy.py restrictions.default encasementlib.r2py [security_layer].r2py [attack_program].r2py 
    
    """ 
class RepyParityError(Exception):
    pass

class EvenParityFile():
  def __init__(self,filename,create):
    # globals
    mycontext['debug'] = False   
    # local (per object) reference to the underlying file
    self.fn = filename
 
    self.file = openfile(self.fn,create)


  def writeat(self,data,offset):
   
    # check the parity of the data written
    # NOTE: This is wrong in many ways!!!!
    thisdata = data
    length_of_data = len(data)
    times = length_of_data / 8

    remain = length_of_data - 8 * times
    start = offset / 8
    origin_offset = offset
    offset = offset % 8
    origin_data_start = self.readat(offset, start * 8)
    count = 0
    even = True
    first = False
    second = False
    data_start_left = data[:8-offset]
    # first eight bytes
    for thisbyte in origin_data_start:
      if ord(thisbyte) % 2:
        even = not even
    for thisbyte in data_start_left:
      if ord(thisbyte) % 2:
        even = not even
    if even:
      first = True
        # ...or error out.
    else:
      raise RepyParityError("Non-even parity write to file")
      return
    if times < 1:
      self.file.writeat(data, origin_offset)
    # last eight bytes
    start_block = (start + times) * 8
    data_end_left = data[times * 8: times * 8 + remain]
    origin_data_end = self.readat(8 - remain,times * 8 + remain)
    for thisbyte in origin_data_end:
      if ord(thisbyte) % 2:
        even = not even
    for thisbyte in data_end_left:
      if ord(thisbyte) % 2:
        even = not even  

    if even:
      second = True
        # ...or error out.
    else:
      raise RepyParityError("Non-even parity write to file")
      return
    
    if first and second:
      self.file.writeat(data,origin_offset)
  
  
  def readat(self,bytes,offset):
    # Read from the file using the sandbox's readat...
    return self.file.readat(bytes,offset)

  def close(self):
    self.file.close()


def parityopenfile(filename, create):
  return EvenParityFile(filename,create)




# The code here sets up type checking and variable hiding for you.  You
# should not need to change anything below here.
sec_file_def = {"obj-type":EvenParityFile,
                "name":"EvenParityFile",
                "writeat":{"type":"func","args":(str,(int,long)),"exceptions":Exception,"return":(int,type(None)),"target":EvenParityFile.writeat},
                "readat":{"type":"func","args":((int,long,type(None)),(int,long)),"exceptions":Exception,"return":str,"target":EvenParityFile.readat},
                "close":{"type":"func","args":None,"exceptions":None,"return":(bool,type(None)),"target":EvenParityFile.close}
           }

CHILD_CONTEXT_DEF["openfile"] = {"type":"objc","args":(str,bool),"exceptions":Exception,"return":sec_file_def,"target":parityopenfile}
CHILD_CONTEXT_DEF["RepyParityError"] = {"type":"any","target":RepyParityError}
# Execute the user code
secure_dispatch_module()