"""
Note:
    This security layer uses encasementlib.r2py, restrictions.default, repy.py and Python
    Also you need to give it an application to run.
    python repy.py restrictions.default encasementlib.r2py [security_layer].r2py [attack_program].r2py 
    
    """ 
class RepyParityError(Exception):
	pass

class EvenParityFile():
	def __init__(self,filename,create):
		# globals
		mycontext['debug'] = False   
		# local (per object) reference to the underlying file
		self.fn = filename
		self.file = openfile(self.fn,create)


	def writeat(self,data,offset):
		# check the parity of the data written
		data_length = len(data)
		data_pointer = 0
		while data_pointer < data_length:
			#if parity cannot be checked, just write to file
			if (offset % 8) + (data_length - data_pointer) < 8: 
				self.file.writeat(data[data_pointer:data_length], offset)
				data_pointer = data_length

			else:
				last_block_length = offset % 8
				last_block = self.file.readat(last_block_length , offset -(last_block_length) )
				bytes_to_complete_block = 8-last_block_length
				last_block += data[data_pointer:(data_pointer + bytes_to_complete_block)]
				data_pointer += bytes_to_complete_block
				offset += bytes_to_complete_block
				#check partiy 
				even = True
				for thisbyte in last_block:
					# for each byte, if it is odd, flip even to be the opposite
					if ord(thisbyte) % 2:
						even = not even
				# actually call write, if we are supposed to...
				if even:
					self.file.writeat(last_block ,offset-bytes_to_complete_block)
				# ...or error out.
				else:
					raise RepyParityError("Non-even parity write to file")
  
  
	def readat(self,bytes,offset):
		# Read from the file using the sandbox's readat...
		return self.file.readat(bytes,offset)

	def close(self):
		self.file.close()


def parityopenfile(filename, create):
	return EvenParityFile(filename,create)




# The code here sets up type checking and variable hiding for you.  You
# should not need to change anything below here.
sec_file_def = {"obj-type":EvenParityFile,
                "name":"EvenParityFile",
                "writeat":{"type":"func","args":(str,(int,long)),"exceptions":Exception,"return":(int,type(None)),"target":EvenParityFile.writeat},
                "readat":{"type":"func","args":((int,long,type(None)),(int,long)),"exceptions":Exception,"return":str,"target":EvenParityFile.readat},
                "close":{"type":"func","args":None,"exceptions":None,"return":(bool,type(None)),"target":EvenParityFile.close}
           }

CHILD_CONTEXT_DEF["openfile"] = {"type":"objc","args":(str,bool),"exceptions":Exception,"return":sec_file_def,"target":parityopenfile}
CHILD_CONTEXT_DEF["RepyParityError"] = {"type":"any","target":RepyParityError}
# Execute the user code
secure_dispatch_module()