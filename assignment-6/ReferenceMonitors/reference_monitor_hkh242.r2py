"""
This security layer inadequately handles parity for files in RepyV2.



Note:
    This security layer uses encasementlib.r2py, restrictions.default, repy.py and Python
    Also you need to give it an application to run.
    python repy.py restrictions.default encasementlib.r2py [security_layer].r2py [attack_program].r2py 
    
""" 
class RepyParityError(Exception):
    pass

class EvenParityFile():
  def __init__(self,filename,create):
    # globals
    mycontext['debug'] = False   
    # local (per object) reference to the underlying file
    self.fn = filename
    self.file = openfile(self.fn,create)


  def writeat(self,data,offset):
    startSeq = offset / 8
    startDex = startSeq * 8
    startSeqStartDex = offset % 8
    dataLen = len(data)
    content = self.file.readat(None,0)
    fileLen = len(content)
    writeData = ""
    even = True

    # if data is added to/extends pass end of file
    if (dataLen + offset >= fileLen):
      # if data added starts new sequence(s) and completes it
      if ((dataLen % 8 == 0) and (startDex % 8 == 0)):
        thisdata = data

        while thisdata:
          eightbytesequence = thisdata[:8]
          thisdata = thisdata[8:]

          for thisbyte in eightbytesequence:
            if ord(thisbyte) % 2:
              even = not even

          if even:
            writeData += eightbytesequence
          else:
            break
                
        if even:
          self.file.writeat(writeData,offset)
        else:
          raise RepyParityError("Non-even parity write to file")

      # if data is added to an incomplete sequence or to middle of sequence
      else:
        # add whatever characters in the incomplete sequence to input data
        # update offset so data would be written in the correct location
        newOffset = startSeq * 8
        thisOffset = newOffset
        endStr = self.file.readat(offset, thisOffset)
        thisdata = endStr + data

        while thisdata:
          eightbytesequence = thisdata[:8]
          thisdata = thisdata[8:]

          for thisbyte in eightbytesequence:
            if ord(thisbyte) % 2:
              even = not even

          if even:
            writeData += eightbytesequence
            if (len(thisdata) < 8):
              # if the number of remaining characters < 8, then it would
              # form an imcomplete sequence so write data anyways
              # since incomplete sequences are not checked for parity
              writeData += thisdata
              break
          else:
            break
        # end of {while thisdata}
                
        if even:
          self.file.writeat(writeData,thisOffset)
        else:
          raise RepyParityError("Non-even parity write to file")
    # end to {if data is added to/extends pass end of file}

    # if data is added to start/middle of file that does not increase file length
    else:
      # add chars from start and end sequences to data 
      dataEndDex = offset + dataLen
      endSeq = dataEndDex % 8
      endSeqEndDex = endSeq * 8 + 7
      endStrLen = endSeqEndDex - dataEndDex + 1
      endStr = self.file.readat(endStrLen, dataEndDex)
      startStrLen = offset - startDex
      startStr = self.file.readat(startStrLen, startDex)
      thisdata = startStr + data + endStr

      while thisdata:
        eightbytesequence = thisdata[:8]
        thisdata = thisdata[8:]

        for thisbyte in eightbytesequence:
          if ord(thisbyte) % 2:
            even = not even

        if even:
          writeData += eightbytesequence
          if (len(thisdata) < 8):
            # if the number of remaining characters < 8, then it would
            # form an imcomplete sequence so write data anyways
            # since incomplete sequences are not checked for parity
            writeData += thisdata
            break
        else:
          break
      # end of {ehile thisdata} 

      if even:
        self.file.writeat(writeData,offset)
      else:
        raise RepyParityError("Non-even parity write to file")

    # end of {else}
  # end of {writeat()}
  
  def readat(self,bytes,offset):
    # Read from the file using the sandbox's readat...
    return self.file.readat(bytes,offset)

  def close(self):
    self.file.close()


def parityopenfile(filename, create):
  return EvenParityFile(filename,create)




# The code here sets up type checking and variable hiding for you.  You
# should not need to change anything below here.
sec_file_def = {"obj-type":EvenParityFile,
                "name":"EvenParityFile",
                "writeat":{"type":"func","args":(str,(int,long)),"exceptions":Exception,"return":(int,type(None)),"target":EvenParityFile.writeat},
                "readat":{"type":"func","args":((int,long,type(None)),(int,long)),"exceptions":Exception,"return":str,"target":EvenParityFile.readat},
                "close":{"type":"func","args":None,"exceptions":None,"return":(bool,type(None)),"target":EvenParityFile.close}
           }

CHILD_CONTEXT_DEF["openfile"] = {"type":"objc","args":(str,bool),"exceptions":Exception,"return":sec_file_def,"target":parityopenfile}
CHILD_CONTEXT_DEF["RepyParityError"] = {"type":"any","target":RepyParityError}
# Execute the user code
secure_dispatch_module()