"""
This security layer inadequately handles parity for files in RepyV2.



Note:
    This security layer uses encasementlib.r2py, restrictions.default, repy.py and Python
    Also you need to give it an application to run.
    python repy.py restrictions.default encasementlib.r2py [security_layer].r2py [attack_program].r2py 
    
    """ 
class RepyParityError(Exception):
    pass

class EvenParityFile():
  lock = createlock()
  def __init__(self,filename,create):
    # globals
    mycontext['debug'] = False   
    # local (per object) reference to the underlying file
    self.fn = filename
 
    self.file = openfile(self.fn,create)


  def writeat(self,data,offset):
    if not self.lock.acquire(True):
       return
    # check the parity of the data written
    # NOTE: This is wrong in many ways!!!!
    thisdata = data
    start_8 = (offset // 8) * 8
    #can reach past end of file, in which case the user is trying to write after EOF
    try:
       first_partial = self.file.readat(offset-start_8, start_8)
    except Exception as e:
       self.lock.release()
       raise e
    thisdata = first_partial + thisdata


    last_8 = offset + len(data)
    last_8_size = 8 - (len(thisdata) % 8)
    try:
      self.file.readat(None, len(thisdata) + start_8)
    except SeekPastEndOfFileError as e:
      thisdata = thisdata[:len(thisdata)- len(thisdata) % 8]
    else:
      thisdata = thisdata + self.file.readat(None, len(thisdata) + start_8)

    thisdata = thisdata[:len(thisdata) - len(thisdata)%8]
    while thisdata:
        eightbytesequence = thisdata[:8]
        thisdata = thisdata[8:]
        sum_odd = 0
        for thisbyte in eightbytesequence:
          if ord(thisbyte) % 2 == 1:
            sum_odd += 1
          else:
            sum_odd += 2
            
        if sum_odd % 2 == 1:
          self.lock.release()
          raise RepyParityError("Non-even parity write to file")

    try:    
       self.file.writeat(data, offset)
    except Exception as e:
       self.lock.release()
       raise e
    
    self.lock.release()
  
  
  def readat(self,bytes,offset):
    # Read from the file using the sandbox's readat...
    return self.file.readat(bytes,offset)

  def close(self):
    self.file.close()


def parityopenfile(filename, create):
  return EvenParityFile(filename,create)




# The code here sets up type checking and variable hiding for you.  You
# should not need to change anything below here.
sec_file_def = {"obj-type":EvenParityFile,
                "name":"EvenParityFile",
                "writeat":{"type":"func","args":(str,(int,long)),"exceptions":Exception,"return":(int,type(None)),"target":EvenParityFile.writeat},
                "readat":{"type":"func","args":((int,long,type(None)),(int,long)),"exceptions":Exception,"return":str,"target":EvenParityFile.readat},
                "close":{"type":"func","args":None,"exceptions":None,"return":(bool,type(None)),"target":EvenParityFile.close}
           }

CHILD_CONTEXT_DEF["openfile"] = {"type":"objc","args":(str,bool),"exceptions":Exception,"return":sec_file_def,"target":parityopenfile}
CHILD_CONTEXT_DEF["RepyParityError"] = {"type":"any","target":RepyParityError}
# Execute the user code
secure_dispatch_module()