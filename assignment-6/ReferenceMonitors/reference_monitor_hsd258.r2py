"""
This security layer inadequately handles parity for files in RepyV2.

Hieu Do (hsd258)

Note:
    This security layer uses encasementlib.r2py, restrictions.default, repy.py and Python
    Also you need to give it an application to run.
    python repy.py restrictions.default encasementlib.r2py [security_layer].r2py [attack_program].r2py

    """

class RepyParityError(Exception):
    pass

class EvenParityFile():
  def __init__(self,filename,create):
    # globals
    mycontext['debug'] = False
    # local (per object) reference to the underlying file
    self.fn = filename
    self.file = openfile(self.fn,create)


  def writeat(self,data,offset):
    thisdata = data
    '''
    Old code was wrong because it wrongly assume that
    the data aligned nicely in the byte sequence boundaries.

    This program determines the minimum number of byte sequences needed to read
    and append left/right to thisdata to create the complete 8-byte sequence
    '''
    # Upper bound of thisdata
    offet_end = offset + len(thisdata)

    # Start and end of the byte sequences containing thisdata
    start_seq_pos = offset/8 * 8
    end_seq_pos = (offet_end/8 + 1) * 8

    # Read the lower bytes if thisdata does not
    # align with the start of an 8-byte sequence
    lower_seq = ''
    lower_bytes = offset - start_seq_pos
    if start_seq_pos % 8 == 0 and lower_bytes > 0:
      lower_seq = self.readat(lower_bytes, start_seq_pos)

    # Read the upper bytes if thisdata does not
    # align with the end of an 8-byte sequence
    upper_seq = ''
    upper_bytes = end_seq_pos - offet_end
    try:
      if end_seq_pos % 8 == 0:
        upper_seq = self.readat(upper_bytes, offet_end)
    except SeekPastEndOfFileError:
      # don't need to raise this error unless the user actually
      # tries to seek past end of file. In this case the security layer
      # is just checking if we need to read the upper bytes
      pass

    # Append the lower and upper bytes to thisdata to create
    # the complete 8-byte sequence
    thisdata = ''.join([lower_seq, thisdata, upper_seq])

    # Flag to check if there an even number of odd sequences
    evenSeq = True
    while thisdata:
      eightbytesequence = thisdata[:8]
      thisdata = thisdata[8:]

      # Spec: if a sequence has not been completely written,
      # it is always considered to have even parity
      evenByte = True
      if len(eightbytesequence) == 8:
        for thisbyte in eightbytesequence:
          # for each byte, if it is odd, flip even to be the opposite
          if ord(thisbyte) % 2:
            evenByte = not evenByte

      # If this byte sequence is odd, flip evenSeq flag
      if not evenByte:
        evenSeq = not evenSeq

    # actually call write, if we are supposed to...
    if evenSeq:
      self.file.writeat(data,offset)
    # ...or error out.
    else:
      raise RepyParityError("Non-even parity write to file")


  def readat(self,bytes,offset):
    # Read from the file using the sandbox's readat...
    return self.file.readat(bytes,offset)

  def close(self):
    self.file.close()


def parityopenfile(filename, create):
  return EvenParityFile(filename,create)


# The code here sets up type checking and variable hiding for you.  You
# should not need to change anything below here.
sec_file_def = {"obj-type":EvenParityFile,
                "name":"EvenParityFile",
                "writeat":{"type":"func","args":(str,(int,long)),"exceptions":Exception,"return":(int,type(None)),"target":EvenParityFile.writeat},
                "readat":{"type":"func","args":((int,long,type(None)),(int,long)),"exceptions":Exception,"return":str,"target":EvenParityFile.readat},
                "close":{"type":"func","args":None,"exceptions":None,"return":(bool,type(None)),"target":EvenParityFile.close}
           }

CHILD_CONTEXT_DEF["openfile"] = {"type":"objc","args":(str,bool),"exceptions":Exception,"return":sec_file_def,"target":parityopenfile}
CHILD_CONTEXT_DEF["RepyParityError"] = {"type":"any","target":RepyParityError}
# Execute the user code
secure_dispatch_module()