"""
This security layer inadequately handles parity for files in RepyV2.



Note:
    This security layer uses encasementlib.r2py, restrictions.default, repy.py and Python
    Also you need to give it an application to run.
    python repy.py restrictions.default encasementlib.r2py [security_layer].r2py [attack_program].r2py 
    
    """ 
	
import math	

class RepyParityError(Exception):
    pass

class EvenParityFile():
  def __init__(self,filename,create):
    # globals
    mycontext['debug'] = False   
    # local (per object) reference to the underlying file
    self.fn = filename
 
    self.file = openfile(self.fn,create)


  def writeat(self,data,offset):
    
	#original file
	originalFile = self.file
	
    #thisdata holds the data being written
    thisdata = data
	
	#find which 8-byte parity/parities is being written on
	sectionStartDiv = offset / 8
	sectionStart = math.ceil(sectionStartDiv)
	sectionEndDiv = (len(thisdata) + offset) / 8
	sectionEnd = math.ceil(sectionEndDiv)
	
	#the offset in the first section
	sectionStartOffset = offset % 8
	#what to write in first block
	firstBlockWrite = 7 - offset
	
	#count section
	sectionCount = sectionStart
	
	#check parity
    while thisdata:
		for sectionCount in range(sectionEnd):
			if sectionCount == sectionStart:
				begining = 8 * sectionCount
				end = begining + 7
				sectionData = orginalFile[begining:]+ orginalfile[:end]
				eightbytesequence = thisdata[:firstBlockWrite]
				thisdata = thisdata[firstBlockWrite:]
				sectionData = [:firstBlockWrite]+ eightbytesequence 
				for sectionData in orginalFile: 
					if ord(sectionData) % 2:
						even = noteven
			
				# actually call write, if we are supposed to...
				if even:
				  self.file.writeat(eightbytesequence,offset)
				# ...or error out.
				else:
				  raise RepyParityError("Non-even parity write to file"
			else:
				eightbytesequence = thisdata[:8]
				thisdata = thisdata[8:]
				even = True
				for thisbyte in eightbytesequence:
				  # for each byte, if it is odd, flip even to be the opposite
				  if ord(thisbyte) % 2:
					even = not even
					
				# actually call write, if we are supposed to...
				if even:
				  self.file.writeat(eightbytesequence,offset)
				# ...or error out.
				else:
				  raise RepyParityError("Non-even parity write to file")
						
						  
  
  def readat(self,bytes,offset):
    # Read from the file using the sandbox's readat...
    return self.file.readat(bytes,offset)

  def close(self):
    self.file.close()


def parityopenfile(filename, create):
  return EvenParityFile(filename,create)




# The code here sets up type checking and variable hiding for you.  You
# should not need to change anything below here.
sec_file_def = {"obj-type":EvenParityFile,
                "name":"EvenParityFile",
                "writeat":{"type":"func","args":(str,(int,long)),"exceptions":Exception,"return":(int,type(None)),"target":EvenParityFile.writeat},
                "readat":{"type":"func","args":((int,long,type(None)),(int,long)),"exceptions":Exception,"return":str,"target":EvenParityFile.readat},
                "close":{"type":"func","args":None,"exceptions":None,"return":(bool,type(None)),"target":EvenParityFile.close}
           }

CHILD_CONTEXT_DEF["openfile"] = {"type":"objc","args":(str,bool),"exceptions":Exception,"return":sec_file_def,"target":parityopenfile}
CHILD_CONTEXT_DEF["RepyParityError"] = {"type":"any","target":RepyParityError}
# Execute the user code
secure_dispatch_module()