"""
This security layer inadequately handles parity for files in RepyV2.

HW2 part 1
Bohan Zhang
bz906


Note:
    This security layer uses encasementlib.r2py, restrictions.default, repy.py and Python
    Also you need to give it an application to run.
    python repy.py restrictions.default encasementlib.r2py [security_layer].r2py [attack_program].r2py 
    
    """ 
class RepyParityError(Exception):
    pass

class EvenParityFile():
  def __init__(self,filename,create):
    # globals
    mycontext['debug'] = False   
    # local (per object) reference to the underlying file
    self.fn = filename
 
    self.file = openfile(self.fn,create)

  def writeat(self,data,offset):
    local_data = data
    data_length = len(data)
    
    if offset % 8 != 0:  # offset is not at position 0, 8, 16 ...,
      
      ''' to get the head data before offset position, 
          need to update offset to the desired position(0,8,16) 
          e.g. offset is at 12, then 12 // 8 is 1, then 1*8 is 8 which is desired position
      '''
      head_data = self.readat(offset % 8, (offset // 8) * 8 )
      
      if head_data:
        local_data = head_data + local_data  # concatenate the head data to the head of data
    
    if (offset + data_length) % 8 != 0:  # if the new offset is not out of 8 bytes range
      try:
        tail_data = self.readat(8 - (offset + data_length) % 8, offset + data_length ) # read from next 8 bytes block
      except:
        SeekPastEndOfFileError   # end of file exception 
      else:
        local_data += tail_data  # concatenate the tail data to the tail of data
      
    
    ''' counts odd number in the data, 
        for example, "AABCBCBC" is "65 65 66 67 66 67 66 67",
        there are 5 odd number in total which breaks the parity
    '''
    while len(local_data) >= 8:
      eightbytes = local_data[:8]
      local_data = local_data[8:]
    
      odd_counter = 0

      for each_byte in eightbytes:
        if ord(each_byte) % 2:
            odd_counter += 1
        
        if odd_counter % 2:
          raise RepyParityError("Non-even parity write to file")
        else:
          pass

    self.file.writeat(data,offset)
              
  def readat(self,bytes,offset):
    # Read from the file using the sandbox's readat...
    return self.file.readat(bytes,offset)

  def close(self):
    self.file.close()

def parityopenfile(filename, create):
  return EvenParityFile(filename,create)




# The code here sets up type checking and variable hiding for you.  You
# should not need to change anything below here.
sec_file_def = {"obj-type":EvenParityFile,
                "name":"EvenParityFile",
                "writeat":{"type":"func","args":(str,(int,long)),"exceptions":Exception,"return":(int,type(None)),"target":EvenParityFile.writeat},
                "readat":{"type":"func","args":((int,long,type(None)),(int,long)),"exceptions":Exception,"return":str,"target":EvenParityFile.readat},
                "close":{"type":"func","args":None,"exceptions":None,"return":(bool,type(None)),"target":EvenParityFile.close}
           }

CHILD_CONTEXT_DEF["openfile"] = {"type":"objc","args":(str,bool),"exceptions":Exception,"return":sec_file_def,"target":parityopenfile}
CHILD_CONTEXT_DEF["RepyParityError"] = {"type":"any","target":RepyParityError}
# Execute the user code
secure_dispatch_module()