class RepyParityError(Exception):
        pass

class EvenParityFile():
	def __init__(self,filename,create):
        # globals
		mycontext['debug'] = False   
        # local (per object) reference to the underlying file
		self.fn = filename
 
		self.file = openfile(self.fn,create)
		self.data = [-1 for i in range(8)]

        def writeat(self,data,offset):
		self.reset()
		##File indexes to read from at
		start = (offset // 8) * 8
		end = ((offset + len(data) - 1) //8) * 8

		##Number of elements to insert at head and tail
		len_head = 8 - (offset - start)
		len_tail = (len(data) - len_head) % 8

		#Replacement offsets for head and tail data
		offset_h = offset - start
		offset_t = (len_head - 1) + (end - (start + 8))			## start index after head + middle indicies = start of tail index

		##check first sequence
                self.readData(8, start)
		length = min(len_head, len(data))                               ## Check if the entire sequence is < 8 bytes
		for i in range(0, length):                                      ## Replace data and check parity
			self.data[offset_h + i] = data[i]
		if (self.checkParityError()):
			raise RepyParityError("Non-even parity write to file")

                self.reset()
		##check last sequence, after making sure there are multiple sequences in the data
		if end > start + 8:
			self.readData(8, end)
			for i in range(0, len_tail):
				self.data[i] = data[offset_t + i]
			if (self.checkParityError()):
				raise RepyParityError("Non-even parity write to file")

		##check parity of middle sequences
		for i in range((end - (start + 8)) // 8):		        ## number of 8 byte sequences
			start_index = len_head + (i * 8)
			if (self.checkParityError()):
				raise RepyParityError("Non-even parity write to file")
			
		##write data
		self.file.writeat(data,offset)

	def reset(self):
		for i in range(8):
			self.data[i] = -1
                return True
		
        def checkParityError(self):
		count = 0
                for byte in self.data:
			if byte == -1:					## do not need to check the 
				return False				## parity of an incomplete sequence
			if ord(byte) % 2 == 1:
				count += 1
		if count % 2 == 0:
			return False
		return True

        def readData(self, bytes, offset):
                try:
                        read_data = self.file.readat(bytes,offset)
                except:
                        return
		length = min(len(read_data), 8)
		for i in range(length):
			self.data[i] = read_data[i]
                
        def readat(self, bytes, offset):
		return self.file.readat(bytes, offset)
			
        def close(self):
                self.file.close()

def parityopenfile(filename, create):
        return EvenParityFile(filename,create)

# The code here sets up type checking and variable hiding for you.  You
# should not need to change anything below here.
sec_file_def = {"obj-type":EvenParityFile,
                                "name":"EvenParityFile",
                                "writeat":{"type":"func","args":(str,(int,long)),"exceptions":Exception,"return":(int,type(None)),"target":EvenParityFile.writeat},
                                "readat":{"type":"func","args":((int,long,type(None)),(int,long)),"exceptions":Exception,"return":str,"target":EvenParityFile.readat},
                                "close":{"type":"func","args":None,"exceptions":None,"return":(bool,type(None)),"target":EvenParityFile.close}
                         }

CHILD_CONTEXT_DEF["openfile"] = {"type":"objc","args":(str,bool),"exceptions":Exception,"return":sec_file_def,"target":parityopenfile}
CHILD_CONTEXT_DEF["RepyParityError"] = {"type":"any","target":RepyParityError}
# Execute the user code
secure_dispatch_module()
