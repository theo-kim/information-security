"""
Mark A. Guindi
CS 3923
Computer Security
10/18/2018
Fall 2018
Assignment 2.1

Language: Python

This program acts as a security monitor which, in short, prevents file writes
which result in the file not having parity for each 8-byte sequence in the file.


Note:
    This security layer uses encasementlib.r2py, restrictions.default, repy.py and Python
    Also you need to give it an application to run.
    python repy.py restrictions.default encasementlib.r2py [security_layer].r2py [attack_program].r2py

"""
class RepyParityError(Exception):
    pass

class EvenParityFile():
  def __init__(self,filename,create):
    # globals
    mycontext['debug'] = False
    # local (per object) reference to the underlying file
    self.fn = filename

    self.file = openfile(self.fn,create)


  def writeat(self,data,offset):

    first_seq_unchanged_size = offset % 8
    first_seq_changed_size = min(len(data), 8 - first_seq_unchanged_size)
    first_seq_offset = (offset // 8) * 8
    first_seq_bytes = self.file.readat(8, first_seq_offset)

    # The unchanged bytes in the sequence that precede the newly written bytes
    first_seq_begin_unchanged_bytes = first_seq_bytes[:first_seq_unchanged_size]
    # The newly written bytes
    first_seq_changed_bytes = data[:first_seq_changed_size]
    # The unchanged bytes in the sequence that follow the newly written bytes
    first_seq_end_unchanged_bytes = first_seq_bytes[first_seq_unchanged_size+first_seq_changed_size:]
    # The new sequence of 8-or-less bytes, which contains the changed bytes together with the bytes that are left alone
    first_seq_new_bytes = first_seq_begin_unchanged_bytes + first_seq_changed_bytes + first_seq_end_unchanged_bytes

    # If this sequence is less than 8 bytes, then it is the end of the file,
    # and since it is less than 8 bytes, it need not be checked for parity.
    if len(first_seq_new_bytes) < 8:
        self.file.writeat(data, offset)
        return

    # If the length is 8 bytes (regardless whether it is the end of the file),
    # it must be checked for parity. If it compromises the parity of the file,
    # raise an error, otherwise continue checking the rest of the "write" data.
    elif not self._has_parity(first_seq_new_bytes):
        raise RepyParityError("Non-even parity write to file")

    seq_begin_i = first_seq_changed_size

    # Parses the "write" data 8 bytes at a time, each 8-byte chunk corresponding
    # to a single 8-byte sequence that would appear in the file, without
    # overlapping multiple 8-byte sequences.
    # This is done until we reach the last (< 8) bytes of the write data,
    # for which we need to take the remainaing unchanged bytes into account.
    while seq_begin_i + 8 < len(data):
        new_seq = data[seq_begin_i:seq_begin_i + 8]
        if len(new_seq) == 8 and not self._has_parity(new_seq):
            raise RepyParityError("Non-even parity write to file")
        seq_begin_i += 8

    last_seq_changed_bytes = data[seq_begin_i:]

    last_seq_changed_size = len(data) - seq_begin_i
    last_seq_unchanged_size = 8 - last_seq_changed_size
    last_seq_unchanged_offset = offset + len(data)

    # We don't know if we've reached the end of the file, so we have to catch
    # a possible exception.
    try:
        last_seq_unchanged_bytes = self.file.readat(last_seq_unchanged_size, last_seq_unchanged_offset)
    except SeekPastEndOfFileError:
        last_seq_unchanged_bytes = ""
    last_seq_new_bytes = last_seq_changed_bytes + last_seq_unchanged_bytes

    if len(last_seq_new_bytes) == 8 and not self._has_parity(last_seq_new_bytes):
        raise RepyParityError("Non-even parity write to file")

    # Haven't found compromise in parity, so proceed with write.
    self.file.writeat(data, offset)


  def _has_parity(self, bytes):
    even = True
    for byte in bytes:
        if ord(byte) % 2:
            even = not even
    return even


  def readat(self,bytes,offset):
    # Read from the file using the sandbox's readat...
    return self.file.readat(bytes,offset)


  def close(self):
    self.file.close()


def parityopenfile(filename, create):
  return EvenParityFile(filename,create)




# The code here sets up type checking and variable hiding for you.  You
# should not need to change anything below here.
sec_file_def = {"obj-type":EvenParityFile,
                "name":"EvenParityFile",
                "writeat":{"type":"func","args":(str,(int,long)),"exceptions":Exception,"return":(int,type(None)),"target":EvenParityFile.writeat},
                "readat":{"type":"func","args":((int,long,type(None)),(int,long)),"exceptions":Exception,"return":str,"target":EvenParityFile.readat},
                "close":{"type":"func","args":None,"exceptions":None,"return":(bool,type(None)),"target":EvenParityFile.close}
           }

CHILD_CONTEXT_DEF["openfile"] = {"type":"objc","args":(str,bool),"exceptions":Exception,"return":sec_file_def,"target":parityopenfile}
CHILD_CONTEXT_DEF["RepyParityError"] = {"type":"any","target":RepyParityError}
# Execute the user code
secure_dispatch_module()
