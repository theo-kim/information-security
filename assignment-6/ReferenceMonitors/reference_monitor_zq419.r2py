"""
This security layer inadequately handles parity for files in RepyV2.



Note:
    This security layer uses encasementlib.r2py, restrictions.default, repy.py and Python
    Also you need to give it an application to run.
    python repy.py restrictions.default encasementlib.r2py [security_layer].r2py [attack_program].r2py

    """

# python repy.py restrictions.default encasementlib.r2py security_layer.py program.py


class RepyParityError(Exception):
    pass


class EvenParityFile():
    def __init__(self, filename, create):
        # globals
        mycontext['debug'] = False
        # local (per object) reference to the underlying file
        self.fn = filename

        self.file = openfile(self.fn, create)

        self.length = 0

    def writeat(self, data, offset):
        if offset <= self.length + 1:
            if offset % 8 == 0:
                if self.length <= (offset + len(data)) or (offset + len(data)) % 8 == 0:
                    new_data = data
                else:
                    new_data = data + self.readat(8-(offset + len(data))%8, (offset + len(data)))
            else:
                head = self.readat(offset%8, 8 * (offset/8))
                if self.length <= (offset + len(data)) or (offset + len(data)) % 8 == 0:
                    new_data = head + data
                else:
                    new_data = head + data + self.readat(8-(offset + len(data))%8, (offset + len(data)))
            even = True
            for i in range(0, len(new_data), 8):
                if not self._all_even(new_data[i:i+8]):
                    even = False
                    raise RepyParityError("Non-even parity write to file")
            if even:
                self.file.writeat(data, offset)
                self.length = max(self.length, offset+len(data))

    def _ord_even(self, byte):
        return ord(byte) % 2 == 0

    def _all_even(self, bytes):
        if len(bytes) < 8:
            return True
        if len(bytes) > 8:
            raise ValueError(" bytes are not 8")
        return [self._ord_even(i) for i in bytes].count(True) % 2 == 0

    def readat(self, bytes, offset):
        # Read from the file using the sandbox's readat...
        return self.file.readat(bytes, offset)

    def close(self):
        self.file.close()


def parityopenfile(filename, create):
    return EvenParityFile(filename, create)


# The code here sets up type checking and variable hiding for you.  You
# should not need to change anything below here.
sec_file_def = {
    "obj-type": EvenParityFile,
    "name": "EvenParityFile",
    "writeat": {
        "type": "func",
        "args": (str, (int, long)),
        "exceptions": Exception,
        "return": (int, type(None)),
        "target": EvenParityFile.writeat
    },
    "readat": {
        "type": "func",
        "args": ((int, long, type(None)), (int, long)),
        "exceptions": Exception,
        "return": str,
        "target": EvenParityFile.readat
    },
    "close": {
        "type": "func",
        "args": None,
        "exceptions": None,
        "return": (bool, type(None)),
        "target": EvenParityFile.close
    }
}

CHILD_CONTEXT_DEF["openfile"] = {
    "type": "objc",
    "args": (str, bool),
    "exceptions": Exception,
    "return": sec_file_def,
    "target": parityopenfile
}

CHILD_CONTEXT_DEF["RepyParityError"] = {
    "type":"any",
    "target":RepyParityError
}


# Execute the user code
secure_dispatch_module()
