"""
This security layer inadequately handles parity for files in RepyV2.



Note:
    This security layer uses encasementlib.r2py, restrictions.default, repy.py and Python
    Also you need to give it an application to run.
    python repy.py restrictions.default encasementlib.r2py [security_layer].r2py [attack_program].r2py
    
    """ 
class RepyParityError(Exception):
  pass

class EvenParityFile():
  def __init__(self,filename,create):
    # globals
    mycontext['debug'] = False   
    # local (per object) reference to the underlying file
    self.fn = filename
    self.file = openfile(self.fn,create)

  def readat(self,bytes,offset):
    # Read from the file using the sandbox's readat...
    return self.file.readat(bytes,offset)

  def writeat(self,data,offset):
   
    # check the parity of the data written
    # NOTE: This is wrong in many ways!!!!
    current = 0 # the current index of byte in data 
    if data == '': # write nothing and leave the file unmodified
      return
    while current < len(data):
      if (current == 0 and offset%8 != 0) or len(data[current:]) < 8: # if the current sequence to be checked is the first or last one
        try:
          thisdata = self.readat(8, (current+offset)//8*8) # get data in the current sequence in the file
        except SeekPastEndOfFileError:
          thisdata = ''
        if current == 0:
          if len(thisdata) < offset%8: # check the index of offset out of index
            raise SeekPastEndOfFileError("Seek offset extends past the EOF!")
          else:
            if offset%8 == 0: # if offset is the first of the sequence, check the index of offset out of index
              self.readat(1, offset)
            # if the offset isn't out of index, the sequence is made up with some bytes in the file and some in data
            sequence = thisdata[:offset%8]+data[current:]
            current = 8 - offset%8
        else:
          # for the end of data, the sequence is made up with the end of data and bytes in the file
          if thisdata != '':
            sequence = data[current:] + thisdata[(current+offset)%8:]
          else: # if there is no byte i the file, there is only the end of data in the sequence
            sequence = data[current:]
          current = len(data)
        # check the length of sequence, if it's more than eight, split it; or add bytes in the file to the end
        if len(sequence) < 8:
          thisdata = sequence + thisdata[len(sequence):]
        else:
          thisdata = sequence[:8]
      else:
        if current == 0 and offset%8 == 0:
          self.readat(1, offset) # check the index of offset out of index
        thisdata = data[current:current+8] # the length of data must be more than 8
        current = current + 8
      if len(thisdata) == 8: # for seuqences with 8 bytes, check parity; or the length must be less than 8, pass
        even = True
        for thisbyte in thisdata:
          # for each byte, if it is odd, flip even to be the opposite
            if ord(thisbyte) % 2:
              even = not even
        # actually call write, if we are supposed to...
        if not even:
          raise RepyParityError("Non-even parity write to file")
    self.file.writeat(data,offset)

  def close(self):
    self.file.close()


def parityopenfile(filename, create):
  return EvenParityFile(filename,create)




# The code here sets up type checking and variable hiding for you.  You should not need to change anything below here.
sec_file_def = {"obj-type":EvenParityFile,
                "name":"EvenParityFile",
                "writeat":{"type":"func","args":(str,(int,long)),"exceptions":Exception,"return":(int,type(None)),"target":EvenParityFile.writeat},
                "readat":{"type":"func","args":((int,long,type(None)),(int,long)),"exceptions":Exception,"return":str,"target":EvenParityFile.readat},
                "close":{"type":"func","args":None,"exceptions":None,"return":(bool,type(None)),"target":EvenParityFile.close}
           }

CHILD_CONTEXT_DEF["openfile"] = {"type":"objc","args":(str,bool),"exceptions":Exception,"return":sec_file_def,"target":parityopenfile}
CHILD_CONTEXT_DEF["RepyParityError"] = {"type":"any","target":RepyParityError}
# Execute the user code
secure_dispatch_module()