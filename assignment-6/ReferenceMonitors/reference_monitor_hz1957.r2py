"""
This security layer inadequately handles parity for files in RepyV2.



Note:
    This security layer uses encasementlib.r2py, restrictions.default, repy.py and Python
    Also you need to give it an application to run.
    python repy.py restrictions.default encasementlib.r2py [security_layer].r2py [attack_program].r2py

    """


class RepyParityError(Exception):
    pass


class EvenParityFile():

    def __init__(self, filename, create):
        # globals
        mycontext['debug'] = False
        # local (per object) reference to the underlying file
        self.fn = filename

        self.file = openfile(self.fn, create)

    def writeat(self, data, offset):
        thisdata = data
        writeable = ""
        originoffset = offset
        while thisdata:
            # length < 8
            if len(thisdata) < 8:
                # affect a sequence or normal add
                if offset % 8 + len(thisdata) < 8:
                    # get potential sequence
                    try:
                        check = self.readat(8, offset-offset%8)
                    except:
                        raise RepyParityError("invalid offset error")
                    else:
                        if len(check) < 8:
                            # normal add
                            writeable += thisdata
                            thisdata = ""
                        else:
                            # affect a sequence
                            eightbytesequence = check[:(offset % 8)]+thisdata+check[(offset % 8)+len(thisdata):]
                            even = True
                            # check the parity of the data written
                            for thisbyte in eightbytesequence:
                                # for each byte, if it is odd, flip even to be the opposite
                                if ord(thisbyte) % 2:
                                    even = not even
                                # everything is checked now(offset & parity), write to file according to even
                            if even:
                                writeable += thisdata
                                thisdata = ""
                            else:
                                raise RepyParityError("Non-even parity write to file")

                # complete a sequence, may have bytes left but don't care.
                # invalid offset will be caught by exception in read
                else:
                    try:
                        pre = self.readat(offset % 8, offset - offset % 8)
                    except:
                        raise RepyParityError("invalid offset error")
                    else:
                        # only care the sequence
                        eightbytesequence = (pre + thisdata)[:8]
                        even = True
                        # check the parity of the data written
                        for thisbyte in eightbytesequence:
                            # for each byte, if it is odd, flip even to be the opposite
                            if ord(thisbyte) % 2:
                                even = not even
                            # everything is checked now(offset & parity), write to file according to even
                        if even:
                            writeable += thisdata
                            thisdata = ""
                        else:
                            raise RepyParityError("Non-even parity write to file")
            # length >= 8
            else:
                # no overlapping to previous sequence, write it normally
                if offset % 8 == 0:
                    eightbytesequence = thisdata[:8]
                    thisdata = thisdata[8:]
                    even = True
                    # check the parity of the data written
                    for thisbyte in eightbytesequence:
                        # for each byte, if it is odd, flip even to be the opposite
                        if ord(thisbyte) % 2:
                            even = not even
                    if even:
                        writeable += eightbytesequence
                    # ...or error out.
                    else:
                        raise RepyParityError("Non-even parity write to file")
                # overlapping previous sequence, check previous sequence
                else:
                    # invalid offset will be caught by exception in read
                    try:
                        pre = self.readat(offset % 8, offset - offset % 8)
                    except:
                        raise RepyParityError("invalid offset error")
                    else:
                        # only care the sequence
                        eightbytesequence = (pre + thisdata)[:8]
                        thisdata = (pre + thisdata)[8:]
                        even = True
                        # check the parity of the data written
                        for thisbyte in eightbytesequence:
                            # for each byte, if it is odd, flip even to be the opposite
                            if ord(thisbyte) % 2:
                                even = not even
                        # everything is checked now(offset & parity), write to file according to even
                        if even:
                            writeable += eightbytesequence - pre
                            offset += 8 - offset % 8
                        else:
                            raise RepyParityError("Non-even parity write to file")
        if writeable:
            try:
                self.file.writeat(writeable, originoffset)
            except:
                raise RepyParityError("invalid offset")

    def readat(self, bytes, offset):
        # Read from the file using the sandbox's readat...
        return self.file.readat(bytes, offset)

    def close(self):
        self.file.close()


def parityopenfile(filename, create):
    return EvenParityFile(filename, create)


# The code here sets up type checking and variable hiding for you.  You
# should not need to change anything below here.
sec_file_def = {"obj-type": EvenParityFile,
                "name": "EvenParityFile",
                "writeat": {"type": "func", "args": (str, (int, long)), "exceptions": Exception,
                            "return": (int, type(None)), "target": EvenParityFile.writeat},
                "readat": {"type": "func", "args": ((int, long, type(None)), (int, long)), "exceptions": Exception,
                           "return": str, "target": EvenParityFile.readat},
                "close": {"type": "func", "args": None, "exceptions": None, "return": (bool, type(None)),
                          "target": EvenParityFile.close}
                }

CHILD_CONTEXT_DEF["openfile"] = {"type": "objc", "args": (str, bool), "exceptions": Exception, "return": sec_file_def,
                                 "target": parityopenfile}
CHILD_CONTEXT_DEF["RepyParityError"] = {"type": "any", "target": RepyParityError}
# Execute the user code
secure_dispatch_module()
