"""
This security layer inadequately handles parity for files in RepyV2.



Note:
    This security layer uses encasementlib.r2py, restrictions.default, repy.py and Python
    Also you need to give it an application to run.
    python repy.py restrictions.default encasementlib.r2py [security_layer].r2py [attack_program].r2py 
    
    """ 
mycontext['currentfilesize'] = {} 
class RepyParityError(Exception):
    pass

class EvenParityFile():
  def __init__(self,filename,create):
    # globals
    mycontext['debug'] = False
      
    # local (per object) reference to the underlying file
    self.fn = filename
    
    self.file = openfile(self.fn,create)

    self.currentfilesize = 0



  def writeat(self,data,offset):   
  
    # check whether the offset is out of file range
    if mycontext['currentfilesize'].has_key(self.fn):
      self.currentfilesize = mycontext['currentfilesize'].get(self.fn)
    if offset < 0:
      raise RepyParityError("offset should >= 0")
    if offset > self.currentfilesize:
      raise RepyParityError("offset out of the end of the file")
    
    writelen = len(data)
    start = offset
    end = offset + writelen -1
    filetail = self.currentfilesize -1
    offmodeight = offset % 8
    even = True
    thisdata = ""

    if filetail > end :
      lastbytehead = end - (end % 8)
      lastbyteremain = end - lastbytehead+1
      needtoread = 8 - lastbyteremain
      if filetail >= lastbytehead + 7:
        data = data + self.file.readat(needtoread,end+1) 
      else:
        data = data + self.file.readat(None,end+1) 
      
    if not offmodeight == 0 :
      changeheadbytes = self.file.readat(offmodeight,offset - offmodeight)
      thisdata = changeheadbytes + data
      start = offset - offmodeight
    else:
      thisdata = data
    # check the parity of the data written
    writedata = thisdata
    while thisdata:
        eightbytesequence = thisdata[:8]
        if len(eightbytesequence) < 8:
          break
        thisdata = thisdata[8:]
        nonevencount = 0
        for thisbyte in eightbytesequence:
          if not ord(thisbyte) % 2 == 0:
            nonevencount = nonevencount +1
        if not nonevencount % 2 == 0:
          even = False
          break
            
    # actually call write if even
    if even:
      if filetail < end :
        mycontext['currentfilesize'][self.fn] = end+1
      self.file.writeat(writedata,start)
    # or error out.
    else:
      raise RepyParityError("Non-even parity write to file")
  
  
  def readat(self,bytes,offset):
    # Read from the file using the sandbox's readat...
    return self.file.readat(bytes,offset)

  def close(self):
    self.file.close()


def parityopenfile(filename, create):
  return EvenParityFile(filename,create)




# The code here sets up type checking and variable hiding for you.  You
# should not need to change anything below here.
sec_file_def = {"obj-type":EvenParityFile,
                "name":"EvenParityFile",
                "writeat":{"type":"func","args":(str,(int,long)),"exceptions":Exception,"return":(int,type(None)),"target":EvenParityFile.writeat},
                "readat":{"type":"func","args":((int,long,type(None)),(int,long)),"exceptions":Exception,"return":str,"target":EvenParityFile.readat},
                "close":{"type":"func","args":None,"exceptions":None,"return":(bool,type(None)),"target":EvenParityFile.close}
           }

CHILD_CONTEXT_DEF["openfile"] = {"type":"objc","args":(str,bool),"exceptions":Exception,"return":sec_file_def,"target":parityopenfile}
CHILD_CONTEXT_DEF["RepyParityError"] = {"type":"any","target":RepyParityError}
# Execute the user code
secure_dispatch_module()