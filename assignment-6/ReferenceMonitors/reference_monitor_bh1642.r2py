"""
This security layer inadequately handles parity for files in RepyV2.



Note:
    This security layer uses encasementlib.r2py, restrictions.default, repy.py and Python
    Also you need to give it an application to run.
    python repy.py restrictions.default encasementlib.r2py [security_layer].r2py [attack_program].r2py

    """
class RepyParityError(Exception):
    pass

class EvenParityFile():
  def __init__(self,filename,create):
    # globals
    mycontext['debug'] = False
    # local (per object) reference to the underlying file
    self.fn = filename

    self.file = openfile(self.fn,create)

  def writeat(self,data,offset):
    # Prepend bytes if it is starting not aligned to an eight byte chunk
    eightByteChunk = offset // 8
    shift = offset % 8
    paddedData = self.readat(shift, eightByteChunk * 8) + data

    # Append bytes if there are any in the file
    lastByte = len(data) + offset
    lastChunk = lastByte // 8
    try:
        endBytes = self.readat(((lastChunk + 1) * 8) - lastByte, lastByte)
        paddedData += endBytes
    except:
        pass

    # Separate the bytes into 8 byte chunks
    unchunked = list(paddedData)
    chunks = [[unchunked[off * 8 + i] for i in range(8)] for off in range(len(unchunked) // 8)]

    # Check the parity for each 8 byte chunk
    def parity(chunk):
        numOdd = 0
        for c in chunk:
            numOdd += ord(c) % 2
        return numOdd % 2 == 0
    parityMapping = list(map(parity, chunks))

    # Aggregate parity
    parity = True
    for p in parityMapping:
        parity = parity and p

    # Raise error if doesn't match otherwise write the file
    if not parity: raise RepyParityError("Non-even parity write to file")
    self.file.writeat(data, offset)


  def readat(self,bytes,offset):
    # Read from the file using the sandbox's readat...
    return self.file.readat(bytes,offset)

  def close(self):
    self.file.close()


def parityopenfile(filename, create):
  return EvenParityFile(filename,create)




# The code here sets up type checking and variable hiding for you.  You
# should not need to change anything below here.
sec_file_def = {"obj-type":EvenParityFile,
                "name":"EvenParityFile",
                "writeat":{"type":"func","args":(str,(int,long)),"exceptions":Exception,"return":(int,type(None)),"target":EvenParityFile.writeat},
                "readat":{"type":"func","args":((int,long,type(None)),(int,long)),"exceptions":Exception,"return":str,"target":EvenParityFile.readat},
                "close":{"type":"func","args":None,"exceptions":None,"return":(bool,type(None)),"target":EvenParityFile.close}
           }

CHILD_CONTEXT_DEF["openfile"] = {"type":"objc","args":(str,bool),"exceptions":Exception,"return":sec_file_def,"target":parityopenfile}
CHILD_CONTEXT_DEF["RepyParityError"] = {"type":"any","target":RepyParityError}
# Execute the user code
secure_dispatch_module()
