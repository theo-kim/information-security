"""
This security layer inadequately handles parity for files in RepyV2.



Note:
    This security layer uses encasementlib.r2py, restrictions.default, repy.py and Python
    Also you need to give it an application to run.
    python repy.py restrictions.default encasementlib.r2py [security_layer].r2py [attack_program].r2py 
    
    """ 
class RepyParityError(Exception):
    pass

class EvenParityFile():
  initialdata = ""
  lval = 0
  def __init__(self,filename,create):
    # globals
    mycontext['debug'] = False   
    # local (per object) reference to the underlying file
    self.fn = filename
 
    self.file = openfile(self.fn,create)


  def writeat(self,data,offset):
    # check the parity of the data written

    #use locks to deal with threading issues
    lock = createlock()
    lock.acquire(True)

    if offset < 0:
      raise RepyParityError("offset less than 0, so we have to stop write to file to be safe")

    thisdata = data
    if self.lval == 0:
      self.initialdata = data
      self.lval = len(data)

    #check if writes allowed
    thisd = data
    #this while loop determines whether we write or throw an exception
    while thisd:

      eightbytesequence = thisd[:8]
      thisd = thisd[8:]
      even = True


      #this is to handle writing over part of our text file
      if offset < self.lval and offset >0:
        for i in range(offset, self.lval):
          if ord(self.initialdata[i]) % 2:
            even = not even

    
      for thisbyte in eightbytesequence:
          # for each byte, if it is odd, flip even to be the opposite
        if ord(thisbyte) % 2:
          even = not even

      if even == False:
        # we don't care about last 7 bytes or less. 
        if (len(eightbytesequence)+offset)>=8:
          raise RepyParityError("Non-even parity write to file")

      #olddata = eightbytesequence




    while thisdata:
        eightbytesequence = thisdata[:8]
        thisdata = thisdata[8:]

        even = True
        for thisbyte in eightbytesequence:
          # for each byte, if it is odd, flip even to be the opposite
          if ord(thisbyte) % 2:
            pass
            #even = not even
        
            
        # actually call write, if we are supposed to...
        if even:
          lock.release()
          self.file.writeat(eightbytesequence,offset)
          lock.acquire(True)
        # ...or error out.
        #else:
          #raise RepyParityError("Non-even parity write to file")
        offset += len(eightbytesequence)

  
  
  def readat(self,bytes,offset):
    # Read from the file using the sandbox's readat...
    return self.file.readat(bytes,offset)

  def close(self):
    self.file.close()


def parityopenfile(filename, create):
  return EvenParityFile(filename,create)




# The code here sets up type checking and variable hiding for you.  You
# should not need to change anything below here.
sec_file_def = {"obj-type":EvenParityFile,
                "name":"EvenParityFile",
                "writeat":{"type":"func","args":(str,(int,long)),"exceptions":Exception,"return":(int,type(None)),"target":EvenParityFile.writeat},
                "readat":{"type":"func","args":((int,long,type(None)),(int,long)),"exceptions":Exception,"return":str,"target":EvenParityFile.readat},
                "close":{"type":"func","args":None,"exceptions":None,"return":(bool,type(None)),"target":EvenParityFile.close}
           }

CHILD_CONTEXT_DEF["openfile"] = {"type":"objc","args":(str,bool),"exceptions":Exception,"return":sec_file_def,"target":parityopenfile}
CHILD_CONTEXT_DEF["RepyParityError"] = {"type":"any","target":RepyParityError}
# Execute the user code
secure_dispatch_module()