#Zhongyang Zhu / zz1424 / N12323212
#Reference Monitor HW 2.1

class RepyParityError(Exception):
    pass

class EvenParityFile():
    def __init__(self, filename, create):
        #globals
        mycontext['debug'] = False
        #Local reference to the underlying file
        self.fn = filename
        self.file = openfile(self.fn, create)

    def writeat(self, data, offset):
        thisdata = data
        thisOffset = offset % 8 #Index of first sequence read for seqList logistics 
        fileSequence = [] #8 byte sequence read from file
        begOfSequence = offset - (offset % 8) #Beginning of sequence if offset is in middle of an 8byte sequence
        oddcount = 0
        dataLen = 8 - thisOffset #Used for sequence spillover logic
        seq = 0 #Divides 8 byte sequences
        seqList = []

        fileSequence = self.file.readat(8, begOfSequence) #Will be empty if extending file
        while thisdata:
            for byte in fileSequence:
                seqList.append(byte)

            dataSequence = thisdata[:dataLen]
            thisdata = thisdata[dataLen:]

            for byte in dataSequence:
                try:
                    seqList[thisOffset] = byte
                    thisOffset += 1
                except: #File is empty or offset is at end of file
                    seqList.append(byte)
                    thisOffset += 1

            begOfSequence += 8
            dataLen = 8
            try:
                fileSequence = self.file.readat(8, begOfSequence)
            except: #EOF
                for byte in thisdata:
                    seqList.append(byte)
                break

        for i in range(len(seqList)):
            seq += 1
            if (ord(seqList[i]) % 2 == 1):
                oddcount += 1
            if (seq == 8):
                if (oddcount % 2 == 1):
                    raise RepyParityError("Non-even parity write to file")
                else:
                    pass
                seq = 0
                oddcount = 0
        self.file.writeat(data, offset)

    def readat(self, bytes, offset):
        return self.file.readat(bytes, offset)

    def close(self):
        self.file.close()


def parityopenfile(filename, create):
    return EvenParityFile(filename, create)


# The code here sets up type checking and variable hiding for you.  You
# should not need to change anything below here.
sec_file_def = {"obj-type":EvenParityFile,
                "name":"EvenParityFile",
                "writeat":{"type":"func","args":(str,(int,long)),"exceptions":Exception,"return":(int,type(None)),"target":EvenParityFile.writeat},
                "readat":{"type":"func","args":((int,long,type(None)),(int,long)),"exceptions":Exception,"return":str,"target":EvenParityFile.readat},
                "close":{"type":"func","args":None,"exceptions":None,"return":(bool,type(None)),"target":EvenParityFile.close}
           }

CHILD_CONTEXT_DEF["openfile"] = {"type":"objc","args":(str,bool),"exceptions":Exception,"return":sec_file_def,"target":parityopenfile}
CHILD_CONTEXT_DEF["RepyParityError"] = {"type":"any","target":RepyParityError}
# Execute the user code
secure_dispatch_module()