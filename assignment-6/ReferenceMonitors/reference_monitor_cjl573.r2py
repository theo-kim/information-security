"""
This security layer inadequately handles parity for files in RepyV2.



Note:
    This security layer uses encasementlib.r2py, restrictions.default, repy.py and Python
    Also you need to give it an application to run.
    python repy.py restrictions.default encasementlib.r2py [security_layer].r2py [attack_program].r2py 
    
    """ 
class RepyParityError(Exception):
    pass

class RepyFileError(Exception):
    pass

class EvenParityFile():
  def __init__(self,filename,create):
    # globals
    mycontext['debug'] = False   
    # local (per object) reference to the underlying file

    # validate filename
    fnExtIndex = filename.rfind('.')
    fnAlNum = filename[:fnExtIndex] + filename[fnExtIndex+1:]
    if fnAlNum.isalnum() and fnAlNum.islower():
        self.fn = filename
        self.file = openfile(self.fn,create)
    else:
        raise RepyFileError("Invalid filename")

  def writeat(self,data,offset):
   
    # check the parity of the data written
    # NOTE: This is right in many ways!!!!
    startIndex = (offset//8)*8 
    for i in range(startIndex, offset+len(data), 8):
        even = True
        thisdata = self.readat(8, i)
        toWrite = []
        for j in range(0, 8):
            curr = i+j 
            if curr < offset and ord(thisdata[j]) % 2:
                even = not even
                toWrite.append(thisdata[j])
            elif curr >= offset:
                if curr-offset >= len(data) and j < len(thisdata):
                    if len(thisdata) < 8:
                        even = True
                    else:
                        even = not even
                    toWrite.append(thisdata[j])
                elif curr-offset < len(data) and ord(data[curr-offset]) % 2:
                    even = not even
                    toWrite.append(data[curr-offset])
   # while thisdata:
   #     eightbytesequence = thisdata[:8]
   #     thisdata = thisdata[8:]
   #     even = True
   #     for thisbyte in eightbytesequence:
   #       # for each byte, if it is odd, flip even to be the opposite
   #       if ord(thisbyte) % 2:
   #         even = not even
            
        # actually call write, if we are supposed to...
        if even: 
          self.file.writeat(''.join(toWrite), i)
        # ...or error out.
        else:
          raise RepyParityError("Non-even parity write to file")
  
  def readat(self,bytes,offset):
    # Read from the file using the sandbox's readat...
    return self.file.readat(bytes,offset)

  def close(self):
    self.file.close()


def parityopenfile(filename, create):
  return EvenParityFile(filename,create)




# The code here sets up type checking and variable hiding for you.  You
# should not need to change anything below here.
sec_file_def = {"obj-type":EvenParityFile,
                "name":"EvenParityFile",
                "writeat":{"type":"func","args":(str,(int,long)),"exceptions":Exception,"return":(int,type(None)),"target":EvenParityFile.writeat},
                "readat":{"type":"func","args":((int,long,type(None)),(int,long)),"exceptions":Exception,"return":str,"target":EvenParityFile.readat},
                "close":{"type":"func","args":None,"exceptions":None,"return":(bool,type(None)),"target":EvenParityFile.close}
           }

CHILD_CONTEXT_DEF["openfile"] = {"type":"objc","args":(str,bool),"exceptions":Exception,"return":sec_file_def,"target":parityopenfile}
CHILD_CONTEXT_DEF["RepyParityError"] = {"type":"any","target":RepyParityError}
# Execute the user code
secure_dispatch_module()
