"""
This security layer inadequately handles parity for files in RepyV2.


Note:
    This security layer uses encasementlib.r2py, restrictions.default, repy.py and Python
    Also you need to give it an application to run.
    python repy.py restrictions.default encasementlib.r2py [security_layer].r2py [attack_program].r2py 
    
    """ 
class RepyParityError(Exception):
    pass

class EvenParityFile():
  def __init__(self,filename,create):
    # globals
    mycontext['debug'] = False   
    # local (per object) reference to the underlying file
    self.fn = filename
 
    self.file = openfile(self.fn,create)


  def writeat(self,data,offset):
    
    #Current eight byte sequence that will be checked
    eightByteSequence = ""

    #Determine which eight byte sequence in the file to start from
    startingSequence = 1
    while offset >= startingSequence * 8:
      startingSequence += 1


    #Read from start of starting sequence to position before offset
    startOffset = (startingSequence - 1) * 8
    bytesToRead = offset - startOffset
    eightByteSequence = self.file.readat(bytesToRead, startOffset)


    #Take enough chars from data to fill eight byte sequence if possible
    dataIndex = 0
    fileOffset = offset
    while dataIndex < len(data):
      eightByteSequence += data[dataIndex]
      dataIndex += 1
      fileOffset += 1
      
      #if eight byte sequence is full, check for even parity
      if len(eightByteSequence) == 8:
        even = True
        
        for thisbyte in eightByteSequence:
          # for each byte, if it is odd, flip even to be the opposite
          if ord(thisbyte) % 2:
            even = not even

        #If even, clear eightByteSequence and continue looping
        if even:
          eightByteSequence = ""
        else:
          raise RepyParityError("Non-even parity write to file")


    #Not enough chars in data to fill eightByteSequence
    #Read enough chars from file to fill
    endOfFileFlag = True

    #Attempt to read chars, check for reaching end of file
    try:
      currFileChar = self.file.readat(1,fileOffset)
    except SeekPastEndOfFileError:
      endOfFileFlag = False

    while endOfFileFlag:
      eightByteSequence += currFileChar
      fileOffset += 1

      try:
        currFileChar = self.file.readat(1,fileOffset)
      except SeekPastEndOfFileError:
        endOfFileFlag = False

      #if eight byte sequence is full, check for even parity
      if len(eightByteSequence) == 8:
        even = True
        
        for thisbyte in eightByteSequence:
          # for each byte, if it is odd, flip even to be the opposite
          if ord(thisbyte) % 2:
            even = not even

        #If even, clear eightByteSequence and continue looping
        if even:
          eightByteSequence = ""
        else:
          raise RepyParityError("Non-even parity write to file")

    #data is safe to write
    self.file.writeat(data,offset)    
  
  
  def readat(self,bytes,offset):
    # Read from the file using the sandbox's readat...
    return self.file.readat(bytes,offset)

  def close(self):
    self.file.close()


def parityopenfile(filename, create):
  return EvenParityFile(filename,create)




# The code here sets up type checking and variable hiding for you.  You
# should not need to change anything below here.
sec_file_def = {"obj-type":EvenParityFile,
                "name":"EvenParityFile",
                "writeat":{"type":"func","args":(str,(int,long)),"exceptions":Exception,"return":(int,type(None)),"target":EvenParityFile.writeat},
                "readat":{"type":"func","args":((int,long,type(None)),(int,long)),"exceptions":Exception,"return":str,"target":EvenParityFile.readat},
                "close":{"type":"func","args":None,"exceptions":None,"return":(bool,type(None)),"target":EvenParityFile.close}
           }

CHILD_CONTEXT_DEF["openfile"] = {"type":"objc","args":(str,bool),"exceptions":Exception,"return":sec_file_def,"target":parityopenfile}
CHILD_CONTEXT_DEF["RepyParityError"] = {"type":"any","target":RepyParityError}
# Execute the user code
secure_dispatch_module()
