"""
This security layer inadequately handles parity for files in RepyV2.



Note:
    This security layer uses encasementlib.r2py, restrictions.default, repy.py and Python
    Also you need to give it an application to run.
    python repy.py restrictions.default encasementlib.r2py [security_layer].r2py [attack_program].r2py 
    
    """ 
class RepyParityError(Exception):
    pass

class EvenParityFile():
  def __init__(self,filename,create):
    # globals
    mycontext['debug'] = False   
    # local (per object) reference to the underlying file
    self.fn = filename
 
    self.file = openfile(self.fn,create)


  def writeat(self,data,offset):
   
    if(offset < 0):
      raise RepyParityError("Non-even parity write to file")
    #find the pre sequence
    preCutIndex = offset / 8 * 8
    pre = self.file.readat(offset - preCutIndex, preCutIndex)
    #check if there are gaps
    if len(pre) !=  offset - preCutIndex:
      raise RepyParityError("Non-even parity write to file")
    #find the post sequence
    endIndex = offset + len(data) 
    if endIndex % 8 == 0:
      postLength = 0
    else:
      postLength = 8 - endIndex % 8
    #have the possibility of reaching EOF
    try:
      post = self.file.readat(postLength, endIndex)
    except SeekPastEndOfFileError:
      post = ""
    thisdata = pre + data + post;
    #log("thisData is: " + thisdata+'\n')
    #check the parity of thisdata
    while thisdata:
        eightbytesequence = thisdata[:8]
        thisdata = thisdata[8:]
        if len(eightbytesequence) == 8:
          even = True
          for thisbyte in eightbytesequence:
          # for each byte, if it is odd, flip even to be the opposite
            if ord(thisbyte) % 2:
              even = not even
            
          if not even:
            raise RepyParityError("Non-even parity write to file")

    # actually call write
    self.file.writeat(data, offset)
    
  
  def readat(self,bytes,offset):
    # Read from the file using the sandbox's readat...
    return self.file.readat(bytes,offset)

  def close(self):
    self.file.close()


def parityopenfile(filename, create):
  return EvenParityFile(filename,create)




# The code here sets up type checking and variable hiding for you.  You
# should not need to change anything below here.
sec_file_def = {"obj-type":EvenParityFile,
                "name":"EvenParityFile",
                "writeat":{"type":"func","args":(str,(int,long)),"exceptions":Exception,"return":(int,type(None)),"target":EvenParityFile.writeat},
                "readat":{"type":"func","args":((int,long,type(None)),(int,long)),"exceptions":Exception,"return":str,"target":EvenParityFile.readat},
                "close":{"type":"func","args":None,"exceptions":None,"return":(bool,type(None)),"target":EvenParityFile.close}
           }

CHILD_CONTEXT_DEF["openfile"] = {"type":"objc","args":(str,bool),"exceptions":Exception,"return":sec_file_def,"target":parityopenfile}
CHILD_CONTEXT_DEF["RepyParityError"] = {"type":"any","target":RepyParityError}
# Execute the user code
secure_dispatch_module()