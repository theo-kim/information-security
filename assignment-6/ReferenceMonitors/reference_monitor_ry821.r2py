class RepyParityError(Exception):
    pass

class EvenParityFile():
    def __init__(self, filename, create):
        mycontext['debug'] = False
        self.fn = filename
        self.file = openfile(self.fn, create)

    def writeat(self, data, offset):
        thisdata = data
        current_position = offset
        
        while thisdata:
            #how many bytes away from start of seq
            read_size = current_position % 8

            #starting position of a new seq
            read_position = current_position - read_size

            #needed seq from the text file
            file_eight_byte_seq = self.file.readat(8, read_position)

            #first write into the text file
            if read_size == 0:
                eightbytesequence = thisdata[:8]
                thisdata = thisdata[8:]
            else:
                #get bytes before insertion point + get inserted bytes + get bytes after
                eightbytesequence = file_eight_byte_seq[:read_size] + thisdata + file_eight_byte_seq[read_size + len(thisdata):]

                #make sure seq is eight bytes
                if len(eightbytesequence) > 8:
                    eightbytesequence = eightbytesequence[:8]

                #remaining data to be analyzed after
                thisdata = thisdata[8 - read_size:] 

            #add on seq not eight bytes
            if len(eightbytesequence) < 8 and len(file_eight_byte_seq) < 8:
                self.file.writeat(eightbytesequence, read_position)
            else:
                num_odd_bytes = 0
                for thisbyte in eightbytesequence:
                    if ord(thisbyte) % 2 == 1:
                        num_odd_bytes += 1

                if num_odd_bytes % 2 == 0:
                    self.file.writeat(eightbytesequence, read_position)
                else:
                    raise RepyParityError("Non-even parity write to file")

            current_position += 8 - read_size

    def readat(self, bytes, offset):
        return self.file.readat(bytes, offset)

    def close(self):
        self.file.close()


def parityopenfile(filename, create):
    return EvenParityFile(filename, create)


# The code here sets up type checking and variable hiding for you.  You
# should not need to change anything below here.
sec_file_def = {"obj-type": EvenParityFile,
                "name": "EvenParityFile",
                "writeat": {"type": "func", "args": (str, (int, long)), "exceptions": Exception,
                            "return": (int, type(None)), "target": EvenParityFile.writeat},
                "readat": {"type": "func", "args": ((int, long, type(None)), (int, long)), "exceptions": Exception,
                           "return": str, "target": EvenParityFile.readat},
                "close": {"type": "func", "args": None, "exceptions": None, "return": (bool, type(None)),
                          "target": EvenParityFile.close}
                }

CHILD_CONTEXT_DEF["openfile"] = {"type": "objc", "args": (str, bool), "exceptions": Exception, "return": sec_file_def,
                                 "target": parityopenfile}
CHILD_CONTEXT_DEF["RepyParityError"] = {"type": "any", "target": RepyParityError}
# Execute the user code
secure_dispatch_module()
