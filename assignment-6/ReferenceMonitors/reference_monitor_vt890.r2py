"""

Note:
    This security layer uses encasementlib.r2py, restrictions.default, repy.py and Python
    Also you need to give it an application to run.
    python repy.py restrictions.default encasementlib.r2py [security_layer].r2py [attack_program].r2py 
    
    """


class RepyParityError(Exception):
    pass


class EvenParityFile():
    def __init__(self, filename, create):
        # globals
        mycontext['debug'] = False
        # local (per object) reference to the underlying file
        self.fn = filename

        self.file = openfile(self.fn, create)

    def writeat(self, data, offset):

        prev = self.file.readat(None, 0)
        new = prev[:offset] + data + prev[offset + len(data):]
        thisdata = new
        even = True
        dct = {}
        ceven = "even"
        codd = "odd"

        while thisdata:
            eightbytesequence = thisdata[:8]
            thisdata = thisdata[8:]
            dct[ceven] = 0
            dct[codd] = 0
            if len(eightbytesequence) < 8:
                even = True

            else:
                for thisbyte in eightbytesequence:
                    # for each byte, if it is odd, flip even to be the opposite
                    if ord(thisbyte) % 2 == 0:
                        dct[ceven] += 1
                    else:
                        dct[codd] += 1


                if dct[ceven] % 2 == 0 and dct[codd] % 2 == 0:
                    even = True
                else:
                    even = False
                    raise RepyParityError("Error")
                    break

                # actually call write, if we are supposed to...
        
        if even:
            self.file.writeat(data, offset)
            # ...or error out.
        else:
            raise RepyParityError("Non-even parity write to file")

    def readat(self, bytes, offset):
        # Read from the file using the sandbox's readat...
        return self.file.readat(bytes, offset)

    def close(self):
        self.file.close()


def parityopenfile(filename, create):
    return EvenParityFile(filename, create)


# The code here sets up type checking and variable hiding for you.  You
# should not need to change anything below here.
sec_file_def = {"obj-type": EvenParityFile,
                "name": "EvenParityFile",
                "writeat": {"type": "func", "args": (str, (int, long)), "exceptions": Exception, "return": (int, type(None)), "target": EvenParityFile.writeat},
                "readat": {"type": "func", "args": ((int, long, type(None)), (int, long)), "exceptions": Exception, "return": str, "target": EvenParityFile.readat},
                "close": {"type": "func", "args": None, "exceptions": None, "return": (bool, type(None)), "target": EvenParityFile.close}
                }

CHILD_CONTEXT_DEF["openfile"] = {"type": "objc", "args": (
    str, bool), "exceptions": Exception, "return": sec_file_def, "target": parityopenfile}
CHILD_CONTEXT_DEF["RepyParityError"] = {
    "type": "any", "target": RepyParityError}
# Execute the user code
secure_dispatch_module()
