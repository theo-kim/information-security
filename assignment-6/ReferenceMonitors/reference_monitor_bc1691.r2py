"""
This security layer inadequately handles parity for files in RepyV2.



Note:
    This security layer uses encasementlib.r2py, restrictions.default, repy.py and Python
    Also you need to give it an application to run.
    python repy.py restrictions.default encasementlib.r2py [security_layer].r2py [attack_program].r2py

    """
class RepyParityError(Exception):
    pass

class EvenParityFile():
  def __init__(self,filename,create):
    # globals
    mycontext['debug'] = False

    if (False in [c.isdigit() or c.islower() or c == '.' for c in filename]) or (filename.count('.') != 1):
        raise Exception('Filenames can only contain lowercase letters and numbers: ', filename)

    # local (per object) reference to the underlying file
    self.fn = filename

    self.file = openfile(self.fn,create)

  def writeat(self,data,offset):
    original_data = data

    # attach front sequence to data if needed
    if offset % 8:
        read_start = offset / 8 * 8
        sequence = self.readat(8, read_start)
        data = sequence[:offset - read_start] + data
        if len(data) < 8:
            data += sequence[len(data):]

    # append end sequence to data if needed and it exists
    if len(data) % 8:
        write_end = offset + len(original_data)
        try:
            partial_sequence = self.readat(8 - write_end % 8,
                                           write_end)
        except:
            pass
        else:
            data += partial_sequence

    # check the parity of the sequences after they are written to
    even = True
    while data:
        eightbytesequence = data[:8]
        data = data[8:]

        if len(eightbytesequence) < 8:
            break

        count = 0
        for byte in eightbytesequence:
            if ord(byte) % 2:
                count += 1
        if count % 2:
            even = False
            break

    if even:
        self.file.writeat(original_data,offset)
    else:
        raise RepyParityError("Non-even parity write to file")

  def readat(self,bytes,offset):
    # Read from the file using the sandbox's readat...
    return self.file.readat(bytes,offset)

  def close(self):
    self.file.close()


def parityopenfile(filename, create):
  return EvenParityFile(filename,create)




# The code here sets up type checking and variable hiding for you.  You
# should not need to change anything below here.
sec_file_def = {"obj-type":EvenParityFile,
                "name":"EvenParityFile",
                "writeat":{"type":"func","args":(str,(int,long)),"exceptions":Exception,"return":(int,type(None)),"target":EvenParityFile.writeat},
                "readat":{"type":"func","args":((int,long,type(None)),(int,long)),"exceptions":Exception,"return":str,"target":EvenParityFile.readat},
                "close":{"type":"func","args":None,"exceptions":None,"return":(bool,type(None)),"target":EvenParityFile.close}
           }

CHILD_CONTEXT_DEF["openfile"] = {"type":"objc","args":(str,bool),"exceptions":Exception,"return":sec_file_def,"target":parityopenfile}
CHILD_CONTEXT_DEF["RepyParityError"] = {"type":"any","target":RepyParityError}
# Execute the user code
secure_dispatch_module()
