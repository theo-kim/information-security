"""
This security layer inadequately handles parity for files in RepyV2.
Note:
    This security layer uses encasementlib.r2py, restrictions.default, repy.py and Python
    Also you need to give it an application to run.
    python repy.py restrictions.default encasementlib.r2py [security_layer].r2py [attack_program].r2py 

Jeffrey Qiu
""" 

class RepyParityError(Exception):
    pass

class EvenParityFile():

  lock = createlock()

  def __init__(self,filename,create):
    # globals
    mycontext['debug'] = False   
    # local (per object) reference to the underlying file
    self.fn = filename
    self.write = False
    self.file = openfile(self.fn,create)
    

  def writeat(self,data,offset):

    self.write = True
    if self.lock.acquire(self.write):

    #find where the first sequence starts
        try:
            startingsequence = offset - offset % 8
            allData = self.file.readat(offset % 8, startingsequence)
            allData = allData + data
        except Exception as e:
            self.lock.release()
            self.write = False
            raise e
        
        #check to see if more needs to be added to the end
        try: 
            self.file.readat(None,len(allData)+startingsequence)
        except SeekPastEndOfFileError:
            addData = allData[:len(allData) - len(allData) % 8]
        else:
            allData = allData + self.file.readat(None,len(allData)+startingsequence)


        # check for parity
        while allData:
            sequence = allData[:8]
            allData = allData[8:]
            even = 0
            for aByte in sequence:
                if ord(aByte) % 2:
                    even += 1;
                else:
                    even += 2;
            if even % 2 == 1 or even == 0:
                self.lock.release()
                self.write = False
                raise RepyParityError("Non-even parity write to file")


        
        try:
            #write if parity holds up
            self.file.writeat(data,offset)
            self.lock.release()
            self.write = False
        except Exception as e:
            lock.release()
            self.write = False
            raise e
    
  def readat(self,bytes,offset):
    # Read from the file using the sandbox's readat...
    return self.file.readat(bytes,offset)

  def close(self):
    self.file.close()


def parityopenfile(filename, create):
  return EvenParityFile(filename,create)




# The code here sets up type checking and variable hiding for you.  You
# should not need to change anything below here.
sec_file_def = {"obj-type":EvenParityFile,
                "name":"EvenParityFile",
                "writeat":{"type":"func","args":(str,(int,long)),"exceptions":Exception,"return":(int,type(None)),"target":EvenParityFile.writeat},
                "readat":{"type":"func","args":((int,long,type(None)),(int,long)),"exceptions":Exception,"return":str,"target":EvenParityFile.readat},
                "close":{"type":"func","args":None,"exceptions":None,"return":(bool,type(None)),"target":EvenParityFile.close}
           }

CHILD_CONTEXT_DEF["openfile"] = {"type":"objc","args":(str,bool),"exceptions":Exception,"return":sec_file_def,"target":parityopenfile}
CHILD_CONTEXT_DEF["RepyParityError"] = {"type":"any","target":RepyParityError}
# Execute the user code
secure_dispatch_module()