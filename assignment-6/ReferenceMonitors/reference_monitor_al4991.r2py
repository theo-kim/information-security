"""
This security layer was designed to prevent writes to a file
if the input did not create a block of even parity. 
A block is defined as one of many 8-byte chunks of the file, 
following the pattern of bytes 0-7, bytes 8-15, etc. 

"""
class RepyParityError(Exception): 
	pass

class EvenParityFile(): 
	def __init__(self, filename, create): 
		mycontext['debug'] = False
		self.fn = filename
		self.file = openfile(self.fn, create)


	def writeat(self, data, offset):
		thisdata = data
		diff_calc = False
		if (offset % 8) != 0: 
			starting = (offset // 8) * 8

			slice_len = offset % 8
			diff_calc = True
		loop_check = 0
		while thisdata:
			# The usual loop. This is employed when the data received is 
			# requesting to be written to the start of a block of memory. 
			# It is probably not required, and will most likely be removed. 
			if not diff_calc:
				eightbytesequence = thisdata[:8]
				thisdata = thisdata[8:]
				parity_count = 0
				for thisbyte in eightbytesequence: 
					if ord(thisbyte) % 2: 
						parity_count += 1

				if not parity_count % 2: 
					self.file.writeat(eightbytesequence, offset + (loop_check*8))
				else: 
					raise RepyParityError("Non-even parity write to file")
			# Take this route when inserting into a position not at the start of a "block"
			# This will check to make sure that adding data in a position that will modify two blocks
			# will create 2 valid blocks after writing. 
			else: 
				fileend = True
				eightbytesequence = thisdata[:8]
				thisdata = thisdata[8:]
				eightbytesequence1 = self.file.readat(slice_len, starting) + eightbytesequence[:8 - slice_len]
				if self.file.readat(8- slice_len, starting + 8):
					eightbytesequence2 = eightbytesequence[8 - slice_len:] + self.file.readat(8 - slice_len, starting + 8)
					fileend = False
				
				parity_count = 0
				for thisbyte in eightbytesequence1: 
					if ord(thisbyte) % 2: 
						parity_count +=1

				if parity_count % 2: 
					raise RepyParityError("Non-even parity write to file")

				if fileend != True:
					parity_count = 0
					for thisbyte in eightbytesequence2: 
						if ord(thisbyte) % 2: 
							parity_count +=1
					if parity_count % 2: 
						raise RepyParityError("Non-even parity write to file")

				self.file.writeat(eightbytesequence, offset + (loop_check*8))
			loop_check += 1



	def readat(self, bytes, offset): 
		return self.file.readat(bytes, offset)

	def close(self): 
		self.file.close()

def parityopenfile(filename, create): 
	return EvenParityFile(filename, create)

sec_file_def = {"obj-type":EvenParityFile,
                "name":"EvenParityFile",
                "writeat":{"type":"func","args":(str,(int,long)),"exceptions":Exception,"return":(int,type(None)),"target":EvenParityFile.writeat},
                "readat":{"type":"func","args":((int,long,type(None)),(int,long)),"exceptions":Exception,"return":str,"target":EvenParityFile.readat},
                "close":{"type":"func","args":None,"exceptions":None,"return":(bool,type(None)),"target":EvenParityFile.close}
           }

CHILD_CONTEXT_DEF["openfile"] = {"type":"objc","args":(str,bool),"exceptions":Exception,"return":sec_file_def,"target":parityopenfile}
CHILD_CONTEXT_DEF["RepyParityError"] = {"type":"any","target":RepyParityError}
# Execute the user code
secure_dispatch_module()