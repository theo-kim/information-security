"""
This security layer inadequately handles parity for files in RepyV2.



Note:
    This security layer uses encasementlib.r2py, restrictions.default, repy.py and Python
    Also you need to give it an application to run.
    python repy.py restrictions.default encasementlib.r2py [security_layer].r2py [attack_program].r2py 
    
    """ 
class RepyParityError(Exception):
    pass

class EvenParityFile():
  def __init__(self,filename,create):
    # globals
    mycontext['debug'] = False 
    if 'files_size_map' not in mycontext:
      mycontext['files_size_map'] = {}

    # local (per object) reference to the underlying file
    self.fn = filename
 
    self.file = openfile(self.fn,create)

    if self.fn not in mycontext['files_size_map']:
      self.file_size = 0
    else:
      self.file_size = mycontext['files_size_map'][self.fn]

  def writeat(self,data,offset):
    bytes_offset = offset % 8
    first_bytes_len = min(8 - bytes_offset, len(data))
    
    if len(data) > first_bytes_len:
      last_bytes_len = (len(data) - first_bytes_len) % 8
    else:
      last_bytes_len = first_bytes_len

    if bytes_offset > 0: 
      offset -= bytes_offset
      data = self.file.readat(bytes_offset, offset) + data

    if 0 < last_bytes_len < 8:
      if offset + len(data) + 8 - last_bytes_len < self.file_size:
        supp_for_last = self.file.readat(8 - last_bytes_len, offset + len(data))
        data = data + supp_for_last
      elif offset + len(data) < self.file_size:
        supp_for_last = self.file.readat(None, offset + len(data))
        data = data + supp_for_last
      else:
        self.file_size = offset + len(data)

    cur_data = data
    while cur_data:
      eight_bytes_equence = cur_data[:8]
      cur_data = cur_data[8:]
      if len(eight_bytes_equence) < 8:
        break
      if sum(map(ord, eight_bytes_equence)) % 2 != 0:
        self.file_size = mycontext['files_size_map'][self.fn]
        raise RepyParityError("Non-even parity write to file")
    self.file.writeat(data, offset)
    mycontext['files_size_map'][self.fn] = self.file_size
  
  def readat(self,bytes,offset):
    # Read from the file using the sandbox's readat...
    return self.file.readat(bytes,offset)

  def close(self):
    self.file.close()


def parityopenfile(filename, create):
  return EvenParityFile(filename,create)




# The code here sets up type checking and variable hiding for you.  You
# should not need to change anything below here.
sec_file_def = {"obj-type":EvenParityFile,
                "name":"EvenParityFile",
                "writeat":{"type":"func","args":(str,(int,long)),"exceptions":Exception,"return":(int,type(None)),"target":EvenParityFile.writeat},
                "readat":{"type":"func","args":((int,long,type(None)),(int,long)),"exceptions":Exception,"return":str,"target":EvenParityFile.readat},
                "close":{"type":"func","args":None,"exceptions":None,"return":(bool,type(None)),"target":EvenParityFile.close}
           }

CHILD_CONTEXT_DEF["openfile"] = {"type":"objc","args":(str,bool),"exceptions":Exception,"return":sec_file_def,"target":parityopenfile}
CHILD_CONTEXT_DEF["RepyParityError"] = {"type":"any","target":RepyParityError}
# Execute the user code
secure_dispatch_module()