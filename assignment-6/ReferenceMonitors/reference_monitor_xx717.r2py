"""
This security layer inadequately handles parity for files in RepyV2.



Note:
    This security layer uses encasementlib.r2py, restrictions.default, repy.py and Python
    Also you need to give it an application to run.
    python repy.py restrictions.default encasementlib.r2py [security_layer].r2py [attack_program].r2py 
    
    """ 
class RepyParityError(Exception):
    pass

class EvenParityFile():
  def __init__(self,filename,create):
    # globals
    mycontext['debug'] = False   
    # local (per object) reference to the underlying file
    self.fn = filename
 
    self.file = openfile(self.fn,create)

  def writeat(self,data,offset):
   
    # check the parity of the data written

    thisdata = data
    data_length = len(data)

    start_sequence = offset / 8
    end_sequence = (offset + data_length - 1) / 8
    even = True

    try:
      read_file = self.file.readat(1, offset)
    except SeekPastEndOfFileError:
      pass
    else:
      for i in range(start_sequence, end_sequence + 1):
          if start_sequence == end_sequence:
            try:
              read_file = self.file.readat(8, i * 8)
            except SeekPastEndOfFileError:
              pass
            else:
              former_sequence = read_file[: offset % 8]
              middle_sequence = thisdata
              later_sequence = read_file[offset % 8 + data_length:]  
              final_sequence = former_sequence + middle_sequence + later_sequence

              if len(final_sequence) < 8:
                break
              else:
                count = 0
                for thisbyte in final_sequence:
                  if ord(thisbyte) % 2:
                    count = count + 1
                if count % 2 :
                  even = not even
                  break
             
          else:
            if i == end_sequence:              
              try:
                read_file = self.file.readat(8, end_sequence * 8)
              except SeekPastEndOfFileError:
                pass
              else:
                former_sequence = thisdata[8 - offset + (i - 1) * 8:]           
                later_sequence = read_file[len(former_sequence):]
                final_sequence = former_sequence + later_sequence

                if len(final_sequence) == 8:
                  count = 0
                  for thisbyte in final_sequence:
                    if ord(thisbyte) % 2:
                      count = count + 1
                  if count % 2 :
                    even = not even
                    break

            elif i == start_sequence:
              read_file = self.file.readat(8, offset / 8 * 8)
              former_sequence = read_file[: offset % 8]           
              later_sequence = thisdata[: 8 - len(former_sequence)]     
              final_sequence = former_sequence + later_sequence

              count = 0
              for thisbyte in final_sequence:
                if ord(thisbyte) % 2:
                    count = count + 1
              if count % 2 :
                even = not even
                break                

            elif i != start_sequence and i != end_sequence:
              final_sequence = thisdata[i * 8 - offset: i * 8 - offset + 8]

              count = 0
              for thisbyte in final_sequence:
                if ord(thisbyte) % 2:
                  count = count + 1
              if count % 2 :
                even = not even
                break
                  
      if even:
            self.file.writeat(data, offset)
      else:
            raise RepyParityError("Non-even parity write to file")

  def readat(self,bytes,offset):
    # Read from the file using the sandbox's readat...
    return self.file.readat(bytes,offset)

  def close(self):
    self.file.close()


def parityopenfile(filename, create):
  return EvenParityFile(filename,create)




# The code here sets up type checking and variable hiding for you.  You
# should not need to change anything below here.
sec_file_def = {"obj-type":EvenParityFile,
                "name":"EvenParityFile",
                "writeat":{"type":"func","args":(str,(int,long)),"exceptions":Exception,"return":(int,type(None)),"target":EvenParityFile.writeat},
                "readat":{"type":"func","args":((int,long,type(None)),(int,long)),"exceptions":Exception,"return":str,"target":EvenParityFile.readat},
                "close":{"type":"func","args":None,"exceptions":None,"return":(bool,type(None)),"target":EvenParityFile.close}
           }

CHILD_CONTEXT_DEF["openfile"] = {"type":"objc","args":(str,bool),"exceptions":Exception,"return":sec_file_def,"target":parityopenfile}
CHILD_CONTEXT_DEF["RepyParityError"] = {"type":"any","target":RepyParityError}
# Execute the user code
secure_dispatch_module()