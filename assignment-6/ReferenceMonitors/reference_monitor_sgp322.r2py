"""
This security layer inadequately handles parity for files in RepyV2.



Note:
    This security layer uses encasementlib.r2py, restrictions.default, repy.py and Python
    Also you need to give it an application to run.
    python repy.py restrictions.default encasementlib.r2py [security_layer].r2py [attack_program].r2py 
    
    """ 
class RepyParityError(Exception):
    pass

class EvenParityFile():
  def __init__(self,filename,create):
    # globals
    mycontext['debug'] = False   
    # local (per object) reference to the underlying file
    self.fn = filename
    self.file = openfile(self.fn,create)
    self.lock = createlock()  

  def same_sequence(self, length, offset):
		start = offset
		end = offset + length - 1
		if (start/8 == end/8):
			return True;
		else:
			return False;
	
  def isParityEven(self, data):
		even = True
		for thisbyte in data:
		  if ord(thisbyte) % 2:
		    even = not even
		return even
  
  def isWritable (self, data, offset):
		existingData = ""
		lastByte = ""
		lastByteOfSequenceIndex = ((offset/8 + 1) * 8) - 1
		firstByteOfSequenceIndex = (offset/8) * 8
		try:
			lastByte = self.readat(1,lastByteOfSequenceIndex)
			existingData = self.readat(len(data),offset)
		except SeekPastEndOfFileError:
			if ((offset + len(data) -1) != ((offset/8 + 1) * 8) - 1):
				return True
			else:
				previousBytes = self.readat(offset - firstByteOfSequenceIndex, firstByteOfSequenceIndex)
				previousBytesParity = self.isParityEven(previousBytes)
				dataParity = self.isParityEven(data)
				return (previousBytesParity and dataParity) or (not previousBytesParity and not dataParity)
		existingDataParity = self.isParityEven(existingData)
		dataParity = self.isParityEven(data)
		return (existingDataParity and dataParity) or (not existingDataParity and not dataParity)
  
  def splitIsWritable (self, data, offset):
	while data:
		newoffset = (offset/8 + 1)* 8
		newDataLength = newoffset - offset
		newData = data[:newDataLength]
		if (not (self.isWritable(newData, offset))):
			return False
		data = data[newDataLength:]
		offset = newoffset
	return True
  						
  def writeat(self,data,offset):  		
	if (self.same_sequence(len(data), offset)):
		self.lock.acquire(True)
		try:
			if (self.isWritable(data, offset)):
				self.file.writeat(data,offset)
			else:
				raise RepyParityError("Non-even parity write to file")
		finally:
		    self.lock.release()
	else :
		self.lock.acquire(True)
		try:
			if(self.splitIsWritable(data, offset)):
				self.file.writeat(data,offset)
			else:
				raise RepyParityError("Non-even parity write to file")
		finally:
			self.lock.release()
				
  def readat(self,bytes,offset):
    # Read from the file using the sandbox's readat...
    return self.file.readat(bytes,offset)

  def close(self):
    self.file.close()


def parityopenfile(filename, create):
  return EvenParityFile(filename,create)




# The code here sets up type checking and variable hiding for you.  You
# should not need to change anything below here.
sec_file_def = {"obj-type":EvenParityFile,
                "name":"EvenParityFile",
                "writeat":{"type":"func","args":(str,(int,long)),"exceptions":Exception,"return":(int,type(None)),"target":EvenParityFile.writeat},
                "readat":{"type":"func","args":((int,long,type(None)),(int,long)),"exceptions":Exception,"return":str,"target":EvenParityFile.readat},
                "close":{"type":"func","args":None,"exceptions":None,"return":(bool,type(None)),"target":EvenParityFile.close}
           }

CHILD_CONTEXT_DEF["openfile"] = {"type":"objc","args":(str,bool),"exceptions":Exception,"return":sec_file_def,"target":parityopenfile}
CHILD_CONTEXT_DEF["RepyParityError"] = {"type":"any","target":RepyParityError}
# Execute the user code
secure_dispatch_module()