# Zetong Wang (zw1465)
"""
This security layer inadequately handles parity for files in RepyV2.



Note:
    This security layer uses encasementlib.r2py, restrictions.default, repy.py and Python
    Also you need to give it an application to run.
    python repy.py restrictions.default encasementlib.r2py [security_layer].r2py [attack_program].r2py

    """


class RepyParityError(Exception):
  pass


class EvenParityFile():
  def __init__(self, filename, create):
    # globals
    mycontext['debug'] = False
    mycontext['oddNumber'] = []  # number of odds from the start of sequence to index position
    mycontext['last'] = 0  # record last index of the file
    # local (per object) reference to the underlying file
    self.fn = filename

    self.file = openfile(self.fn, create)

  def writeat(self, data, offset):
    # check the parity of the data written
    oddNumberCopy = []
    oddNumberCopy = mycontext['oddNumber'][:]
    thisdata = data
    left = offset  # input data leftmost
    rightCur = left + len(data)
    right = (int(rightCur / 8)) * 8 + 8 # input data rightmost of the sequence
    if mycontext['last'] <= rightCur: # no data need to read
        read = ""
    elif right < mycontext['last']:
        read = self.readat(right - rightCur, rightCur) # only read one sequence
    else:
        read = self.readat(mycontext['last'] - rightCur, rightCur) # only read one sequence
    if left > mycontext['last']:
      raise RepyParityError("offset excceed the length of the file")
    even = True
    i = left
    while thisdata:
      eightbytesequence = thisdata[:8]
      thisdata = thisdata[8:]
      for thisbyte in eightbytesequence:
        # for each byte, if it is odd, flip even to be the opposite
        if i % 8 == 0:  # corner case
          try:  # the position exists data, override
            oddNumberCopy[i] = ord(thisbyte) % 2
          except:  # new data
            oddNumberCopy.append(ord(thisbyte) % 2)
            mycontext['last'] = i + 1
        else:
          try:  # the position exists data, override
            oddNumberCopy[i] = oddNumberCopy[i - 1] + ord(thisbyte) % 2
          except:  # new data
            oddNumberCopy.append(ord(thisbyte) % 2 + oddNumberCopy[i - 1])
            mycontext['last'] = i + 1
        if (i + 1) % 8 == 0 and oddNumberCopy[i] % 2:  # last position in the sequence
          even = False
          break
        i += 1
    # need to check last element in the sequence
    j = 0
    if right <= mycontext['last']:
      for k in range(i, right):
         oddNumberCopy[k] = oddNumberCopy[k - 1] + (ord(read[j]) % 2)
         j += 1
         if (k + 1) % 8 == 0 and oddNumberCopy[k] % 2:
          even = False
    # actually call write, if we are supposed to...
    if even:
      mycontext['oddNumber'] = []
      mycontext['oddNumber'] = oddNumberCopy[:]
      self.file.writeat(data, offset)
    # ...or error out.
    else:
      raise RepyParityError("Non-even parity write to file")

  def readat(self, bytes, offset):
    # Read from the file using the sandbox's readat...
    return self.file.readat(bytes, offset)

  def close(self):
    self.file.close()


def parityopenfile(filename, create):
  return EvenParityFile(filename, create)


# The code here sets up type checking and variable hiding for you.  You
# should not need to change anything below here.
sec_file_def = {"obj-type": EvenParityFile,
                "name": "EvenParityFile",
                "writeat": {"type": "func", "args": (str, (int, long)), "exceptions": Exception, "return": (int, type(None)), "target": EvenParityFile.writeat},
                "readat": {"type": "func", "args": ((int, long, type(None)), (int, long)), "exceptions": Exception, "return": str, "target": EvenParityFile.readat},
                "close": {"type": "func", "args": None, "exceptions": None, "return": (bool, type(None)), "target": EvenParityFile.close}
                }

CHILD_CONTEXT_DEF["openfile"] = {"type": "objc", "args": (str, bool), "exceptions": Exception, "return": sec_file_def, "target": parityopenfile}
CHILD_CONTEXT_DEF["RepyParityError"] = {"type": "any", "target": RepyParityError}
# Execute the user code
secure_dispatch_module()
