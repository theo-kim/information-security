"""
This security layer inadequately handles parity for files in RepyV2.



Note:
    This security layer uses encasementlib.r2py, restrictions.default, repy.py and Python
    Also you need to give it an application to run.
    python repy.py restrictions.default encasementlib.r2py [security_layer].r2py [attack_program].r2py 
    
    """ 
class RepyParityError(Exception):
    pass

class EvenParityFile():
  def __init__(self,filename,create):
    # globals
    mycontext['debug'] = False   
    mycontext['lock'] = createlock()
    mycontext['EOF'] = 0
    # local (per object) reference to the underlying file
    self.fn = filename
    self.file = openfile(self.fn,create)


  def writeat(self,data,offset):
    thisdata = data

    if not self._isEightByte(thisdata) and not self._isOverwrite(offset):
      mycontext['lock'].acquire(True)
      self.file.writeat(thisdata,offset)
      mycontext['lock'].release()

    else:
      mycontext['lock'].acquire(True)
      permission = False
      if self._isOverwrite(offset):
        permission = self._isWriteValid(thisdata,offset,overwrite=True)
      else:
        permission = self._isWriteValid(thisdata,offset,overwrite=False)

      while thisdata:      
        comp = 8-offset%8
        newData = thisdata[:comp]
        thisdata = thisdata[comp:] 
        self.file.writeat(newData,offset)
        offset += comp
          
      mycontext['lock'].release()
    
  
  def readat(self,bytes,offset):
    return self.file.readat(bytes,offset)

  def close(self):
    mycontext['lock'].acquire(True)
    self.file.close()
    mycontext['lock'].release()

  def _isWriteValid(self, data,offset, overwrite=False):
    d = data
    while d:
      permission = False
      OVERWRITE = overwrite
      comp = 8-offset%8
      newData = d[:comp]
      d = d[comp:]

      if OVERWRITE and self._getWordCountat(offset) < self._getWordCount(newData):
        ndata = data[:self._getWordCountat(offset)]
        if self._isEven(ndata) == self._isEven(self.readat(self._getWordCountat(offset), offset)):
          OVERWRITE = False

      if not OVERWRITE and self._isEven(newData):
        permission = True

      elif OVERWRITE and self._isEven(newData) == self._isEven(self.readat(self._getWordCount(newData), offset)):
          permission = True

      if permission: 
        offset += comp 
      else:
        raise RepyParityError("Non-even parity write to file")
    return True
  def _isOverwrite(self, offset):

    return self.readat(None,offset) != ""
  def _isEven(self, data):
    even = True
    for thisbyte in data:
      if ord(thisbyte) % 2:
        even = not even
    return even
  def _isEightByte(self, data):
    if self._getWordCount(data) >= 8:
      return True
    return False
  def _getWordCount(self, data):
    x = 0
    for i in data:
      if x == 8:
        return x
      x += 1
    return x
  def _getWordCountat(self, offset):
    i=0
    offsetl = offset
    while self.readat(None,offsetl) != "":
      i += 1
      offsetl +=1
    return i

def parityopenfile(filename, create):
  return EvenParityFile(filename,create)




# The code here sets up type checking and variable hiding for you.  You
# should not need to change anything below here.
sec_file_def = {"obj-type":EvenParityFile,
                "name":"EvenParityFile",
                "writeat":{"type":"func","args":(str,(int,long)),"exceptions":Exception,"return":(int,type(None)),"target":EvenParityFile.writeat},
                "readat":{"type":"func","args":((int,long,type(None)),(int,long)),"exceptions":Exception,"return":str,"target":EvenParityFile.readat},
                "close":{"type":"func","args":None,"exceptions":None,"return":(bool,type(None)),"target":EvenParityFile.close}
           }

CHILD_CONTEXT_DEF["openfile"] = {"type":"objc","args":(str,bool),"exceptions":Exception,"return":sec_file_def,"target":parityopenfile}
CHILD_CONTEXT_DEF["RepyParityError"] = {"type":"any","target":RepyParityError}
# Execute the user code
secure_dispatch_module()