"""
This security layer inadequately handles parity for files in RepyV2.



Note:
    This security layer uses encasementlib.r2py, restrictions.default, repy.py and Python
    Also you need to give it an application to run.
    python repy.py restrictions.default encasementlib.r2py [security_layer].r2py [attack_program].r2py 
    
    """ 
class RepyParityError(Exception):
    pass

class EvenParityFile():
  def __init__(self,filename,create):
    # globals
    mycontext['debug'] = False   
    # local (per object) reference to the underlying file
    self.fn = filename
 
    self.file = openfile(self.fn,create)

  def writeat(self,data,offset):
    # ignore the case when write to the position exceed end of file.
    #start point of first 8 byte sequence:
    flag =0;
    remain = offset%8
    data_start = offset-remain
    data_end = data_start+8
    even = False
    new_start =8
    # only read orignal file when needed.
    if remain!=0:
      try:
        #*****first read 8 bytes in my program*****
        first_sequence_in_file = self.file.readat(8,data_start)
      except SeekPastEndOfFileError:
        first_sequence_in_file=''
        flag=1
      new_start = 8-remain
      l = len(first_sequence_in_file[0:remain])+len(data[0:new_start])
      # form the whole 8 bytes line, the last part could be empty if the file ends.
      new_line = first_sequence_in_file[0:remain]+data[0:new_start]+first_sequence_in_file[l:8]
      new_write = data[0:new_start]
    else:
      new_line = data[0:new_start]
      new_write=new_line
    #eof
    if flag==1:
      even = False
    elif len(new_line)<8:
      #end up checking, file ends.
      even= True
      data= new_write
    else:
      data = new_write+data[new_start:]
      count = 0
      for thisbyte in new_line:
        if ord(thisbyte) % 2:
          count=count+1
      #won't do other check 
      if not(count%2):
        even = True
        write_position = new_start
        while (write_position+8)<=len(data):
          line = data[write_position:write_position+8]
          write_position = write_position+8
          count = 0
          for thisbyte in line:
            if ord(thisbyte) % 2:
              count=count+1
          if count%2:
            even=False
            break
        #
        if even:
          read_position = offset+write_position
          try:
            #*****second read 8 bytes in my program*****
            last_line_in_file = self.file.readat(8,read_position)
          except SeekPastEndOfFileError:
            last_line_in_file = []
          #since last line we write is less than 8, we just need to check last line in file.
          if (len(last_line_in_file)<8):
            even = True
          else:
            even=False
            #check the last line.
            write_length = len(data)-write_position
            last_line = data[write_position:len(data)]+last_line_in_file[write_length:8]
            count = 0
            for thisbyte in last_line:
              if ord(thisbyte) % 2:
                count=count+1
            if not(count%2):
              even=True

    if even:
      try:
        self.file.writeat(data,offset)
      except SeekPastEndOfFileError:
        pass
    else:
        raise RepyParityError("Non-even parity write to file")
          


  
  def readat(self,bytes,offset):
    # Read from the file using the sandbox's readat...
    return self.file.readat(bytes,offset)

  def close(self):
    self.file.close()


def parityopenfile(filename, create):
  return EvenParityFile(filename,create)




# The code here sets up type checking and variable hiding for you.  You
# should not need to change anything below here.
sec_file_def = {"obj-type":EvenParityFile,
                "name":"EvenParityFile",
                "writeat":{"type":"func","args":(str,(int,long)),"exceptions":Exception,"return":(int,type(None)),"target":EvenParityFile.writeat},
                "readat":{"type":"func","args":((int,long,type(None)),(int,long)),"exceptions":Exception,"return":str,"target":EvenParityFile.readat},
                "close":{"type":"func","args":None,"exceptions":None,"return":(bool,type(None)),"target":EvenParityFile.close}
           }

CHILD_CONTEXT_DEF["openfile"] = {"type":"objc","args":(str,bool),"exceptions":Exception,"return":sec_file_def,"target":parityopenfile}
CHILD_CONTEXT_DEF["RepyParityError"] = {"type":"any","target":RepyParityError}
# Execute the user code
secure_dispatch_module()