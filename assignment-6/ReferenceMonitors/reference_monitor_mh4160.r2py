"""
This security layer inadequately handles parity for files in RepyV2.
Note:
    This security layer uses encasementlib.r2py, restrictions.default, repy.py and Python
    Also you need to give it an application to run.
    python repy.py restrictions.default encasementlib.r2py [security_layer].r2py [attack_program].r2py 
    
""" 
class RepyParityError(Exception):
    pass

class EvenParityFile():
  def __init__(self,filename,create):

    # globals
    mycontext['debug'] = False   

    # local (per object) reference to the underlying file
    self.lock = createlock()
    self.fn = filename
    self.file = openfile(self.fn,create)
    self.size = len(self.file.readat(None,0))

  def writeat(self,data,offset):

    self.lock.acquire(True)
    startByteIndex = 8 * (offset // 8)
    endByteIndex = 8 * ((offset + len(data)) // 8)
    block1StartIndex = offset - startByteIndex
    block2StartIndex = (offset + len(data)) - endByteIndex

    if startByteIndex < self.size and endByteIndex < self.size:
          block1Data = self.readat(8, startByteIndex)
          block2Data = self.readat(8, endByteIndex)
          writeData = block1Data[:block1StartIndex] + data + block2Data[block2StartIndex:]

          if(self.checkParity(writeData)):
              self.file.writeat(data,offset)
          else:
              self.lock.release()
              raise RepyParityError("Non-even parity write to file")

    elif startByteIndex < self.size and endByteIndex > self.size:
          block1Data = self.readat(8, startByteIndex)
          writeData = block1Data[:block1StartIndex] + data
          
          if(self.checkParity(writeData)):
              self.file.writeat(data,offset)
              diff = (offset + len(data)) - self.size
              self.size = self.size + diff
          else:
              self.lock.release()
              raise RepyParityError("Non-even parity write to file")

    elif startByteIndex == self.size:
        writeData = data
        if(self.checkParity(writeData)):
            self.file.writeat(data,offset)
            self.size = self.size + len(data)
        else:
            self.lock.release()
            raise RepyParityError("Non-even parity write to file")
    
    else:
        self.lock.release()
        raise SeekPastEndOfFileError("Seek past EOF")

    self.lock.release()

  def checkParity(self,data):
    count = 0
    if len(data) < 8: 
        for char in data:
            if ord(char) % 2:
              count+=1
        return count % 2 == 0
    else:
        thisdata = data
        while thisdata:
            eightbytesequence = thisdata[:8]
            thisdata = thisdata[8:]
            count = 0
            if(len(eightbytesequence) == 8):
              for thisbyte in eightbytesequence:
                # for each byte, if it is odd, flip even to be the opposite
                if ord(thisbyte) % 2:
                  count+=1
            if(count % 2 != 0):
              return False
        return True

  def readat(self,bytes,offset):
    # Read from the file using the sandbox's readat...
    return self.file.readat(bytes,offset)

  def close(self):
    self.file.close()

def parityopenfile(filename, create):
    return EvenParityFile(filename,create)

# The code here sets up type checking and variable hiding for you.  You
# should not need to change anything below here.
sec_file_def = {"obj-type":EvenParityFile,
                "name":"EvenParityFile",
                "writeat":{"type":"func","args":(str,(int,long)),"exceptions":Exception,"return":(int,type(None)),"target":EvenParityFile.writeat},
                "readat":{"type":"func","args":((int,long,type(None)),(int,long)),"exceptions":Exception,"return":str,"target":EvenParityFile.readat},
                "close":{"type":"func","args":None,"exceptions":None,"return":(bool,type(None)),"target":EvenParityFile.close}
           }

CHILD_CONTEXT_DEF["openfile"] = {"type":"objc","args":(str,bool),"exceptions":Exception,"return":sec_file_def,"target":parityopenfile}
CHILD_CONTEXT_DEF["RepyParityError"] = {"type":"any","target":RepyParityError}
# Execute the user code
secure_dispatch_module()