"""
This security layer inadequately handles parity for files in RepyV2.



Note:
    This security layer uses encasementlib.r2py, restrictions.default, repy.py and Python
    Also you need to give it an application to run.
    python repy.py restrictions.default encasementlib.r2py security_layer.r2py attack_program.r2py

    """


class RepyParityError(Exception):
    pass


class EvenParityFile():
    def __init__(self, filename, create):
        # globals
        mycontext['debug'] = False
        # local (per object) reference to the underlying file
        self.fn = filename
        self.file = openfile(self.fn, create)

    def writeat(self, data, offset):
        flag = 0
        thisdata = data
        f = self.file.readat(None,0)
        if offset<0:
            raise RepyParityError("Non-even parity write to file")
        if offset>len(f):
            raise RepyParityError("Non-even parity write to file")
        #if the data is going to change the last sequence smaller than 8, then we let it change
        if ((offset%8) + len(data)) < 8 and offset > len(f) - (len(f)%8) :
            flag = 0


        else:
        # the data is going to change from the middle,then we break it into 3 parts. the first sequence, the middle and the last sequence.
            if offset %8 != 0:
                first_sequence_number = 8 - (offset % 8)
                first_sequence = data[0: first_sequence_number]
                ori_first = f[offset:(offset + first_sequence_number)]
                ori_flag = 0
                now_flag = 0
                for thisbyte in ori_first:
                    if ord(thisbyte) % 2:
                        ori_flag = ori_flag +1
                for thisbyte in first_sequence:
                    if ord(thisbyte) % 2:
                        now_flag = now_flag+1
                if ori_flag %2 == now_flag % 2:
                    flag = 0
                    thisdata = data[first_sequence_number:]
                else:
                    raise RepyParityError("Non-even parity write to file")
                 # this is the middle sequences
                while thisdata:
                    if len(thisdata) > 8:       # if the data left are more than 8, which means there are at least 2 sequences.
                        eightbytesequence = thisdata[:8]  # choose 8 bytes every time
                        thisdata = thisdata[8:]  # so when next time, we can choose latter 8 bytes
                        even = True
                        for thisbyte in eightbytesequence:
                            # for each byte, if it is odd, flip even to be the opposite
                            if ord(thisbyte) % 2:
                                even = not even
                        # actually call write, if we are supposed to...
                        if even:
                            flag = 0
                        # ...or error out.
                        else:
                            raise RepyParityError("Non-even parity write to file")
                            break
                      #this is the last sequence
                    else:
                        last_sequence = thisdata
                        ori_flag = 0
                        now_flag = 0
                      # if the last sequence is going to be dropped since it's smaller than 8
                        if (len(f) - len(f) % 8) < len(data) + offset < (len(f) - len(f) % 8 + 8):
                            flag = 0
                            thisdata = data[len(data):]
                        else:
                            ori_last = f[offset + len(data) - len(thisdata): (offset + len(data))]
                            for thisbyte in ori_last:
                                if ord(thisbyte) % 2:
                                    ori_flag = ori_flag + 1
                            for thisbyte in last_sequence:
                                if ord(thisbyte) % 2:
                                    now_flag = now_flag + 1
                            if ori_flag % 2 == now_flag % 2:
                                flag = 0
                                thisdata = data[len(data):]
                            else:
                                flag = 1
                                raise RepyParityError("Non-even parity write to file")
                                break
            #if the offset starts from 8n, and there is no first sequence.
            else:
                if len(f) < len(data):
                    if len(data)<8:
                        flag = 0
                        thisdata = thisdata[len(data):]
                    else:
                        while thisdata:
                            if len(thisdata) > 8:
                                eightbytesequence = thisdata[:8]  # choose 8 bytes every time
                                thisdata = thisdata[8:]  # so when next time, we can choose latter 8 bytes
                                even = True
                                for thisbyte in eightbytesequence:
                                    # for each byte, if it is odd, flip even to be the opposite
                                    if ord(thisbyte) % 2:
                                        even = not even
                                # actually call write, if we are supposed to...
                                if even:
                                    flag = 0
                                # ...or error out.
                                else:
                                    flag = 1
                                    raise RepyParityError("Non-even parity write to file")
                                    break
                            else:
                                flag = 0
                                thisdata = data[len(data):]
                else:
                    while thisdata:
                        if len(thisdata) > 8:          #剩下的数字还能自己变成一个序列
                            eightbytesequence = thisdata[:8]  # choose 8 bytes every time
                            thisdata = thisdata[8:]  # so when next time, we can choose latter 8 bytes
                            even = True
                            for thisbyte in eightbytesequence:
                                # for each byte, if it is odd, flip even to be the opposite
                                if ord(thisbyte) % 2:
                                    even = not even
                            # actually call write, if we are supposed to...
                            if even:
                                flag = 0
                            # ...or error out.
                            else:
                                flag = 1
                                raise RepyParityError("Non-even parity write to file")
                                break
                        else:              #剩下的序列不够了
                            last_sequence_number = len(thisdata)
                            last_sequence = thisdata
                            ori_flag = 0
                            now_flag = 0
                            if (len(f) - len(f)%8) < len(data) + offset < (len(f) - len(f)%8 + 8):
                                flag = 0
                                thisdata = data[len(data):]
                            else:
                                ori_last = f[offset + len(data) - len(thisdata): (offset + len(data))]
                                for thisbyte in ori_last:
                                    if ord(thisbyte) % 2:
                                        ori_flag = ori_flag + 1
                                for thisbyte in last_sequence:
                                    if ord(thisbyte) % 2:
                                        now_flag = now_flag + 1
                                if ori_flag % 2 == now_flag % 2:
                                    flag = 0
                                    thisdata = data[len(data):]
                                else:
                                    flag = 1
                                    raise RepyParityError("Non-even parity write to file")
                                    break
        if flag == 0:
            self.file.writeat(data, offset)
        else:
            raise RepyParityError("Non-even parity write to file")
    def readat(self, bytes, offset):
        # Read from the file using the sandbox's readat...
        return self.file.readat(bytes, offset)

    def close(self):
        self.file.close()


def parityopenfile(filename, create):
    return EvenParityFile(filename, create)


# The code here sets up type checking and variable hiding for you.  You
# should not need to change anything below here.
sec_file_def = {"obj-type": EvenParityFile,
                "name": "EvenParityFile",
                "writeat": {"type": "func", "args": (str, (int, long)), "exceptions": Exception,
                            "return": (int, type(None)), "target": EvenParityFile.writeat},
                "readat": {"type": "func", "args": ((int, long, type(None)), (int, long)), "exceptions": Exception,
                           "return": str, "target": EvenParityFile.readat},
                "close": {"type": "func", "args": None, "exceptions": None, "return": (bool, type(None)),
                          "target": EvenParityFile.close}
                }

CHILD_CONTEXT_DEF["openfile"] = {"type": "objc", "args": (str, bool), "exceptions": Exception, "return": sec_file_def,
                                 "target": parityopenfile}
CHILD_CONTEXT_DEF["RepyParityError"] = {"type": "any", "target": RepyParityError}
# Execute the user code
secure_dispatch_module()