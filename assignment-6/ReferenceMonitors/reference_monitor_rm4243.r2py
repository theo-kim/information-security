"""
This security layer inadequately handles parity for files in RepyV2.



Note:
    This security layer uses encasementlib.r2py, restrictions.default, repy.py and Python
    Also you need to give it an application to run.
    python repy.py restrictions.default encasementlib.r2py [security_layer].r2py [attack_program].r2py 
    
    """

#Checks if eight byte sequence is even by counting number of non-even numbers
#If the number of non-even number is even as in oddcount%2 = 0, then sequence is even: return true (1)
def parityCheck(eightbytesequence):
    oddCount = 0
    for thisbyte in eightbytesequence:
        if ord(thisbyte) % 2:
            oddCount+= 1
    return not oddCount % 2        

class RepyParityError(Exception):
    pass

class EvenParityFile():
  def __init__(self,filename,create):
    # globals
    mycontext['debug'] = False   
    # local (per object) reference to the underlying file
    self.fn = filename
 
    self.file = openfile(self.fn,create)


  def writeat(self,data,offset):

    #build the data of sequences that includes parts from file read and the data being written, this data is called fullSequences


    #The start of the first 8-byte sequence in file that is affected by the write
    start = offset - (offset%8)                    

    #If offset = 0, then the affected sequence starts with data being written
    if offset == 0:
      fullSequences = ""
    #otherwise read from start to right before where the offset for write is. add this read to the data that is being built for parity check
    else:
      fullSequences = self.file.readat(offset-1, start)


    #to the data being built for parity check, add the data that is to be written
    fullSequences += data

    #Get the parts from the read in data that would complete a sequence
    dataEnd = offset + len(data) - 1
    readStart = dataEnd + 1 
    readEnd = 8  * (dataEnd / 8 + 1 ) - 1  
    fullSequences += self.file.readat(readEnd, readStart)

    #did not account for EOF and unfinished sequences so seek error will reuslt


    # check the parity of the data written
    # NOTE: This is wrong in many ways!!!!
    #thisdata = data

    thisdata = fullSequences
    while thisdata:
        eightbytesequence = thisdata[:8]
        thisdata = thisdata[8:]

        '''
        even = True
        for thisbyte in eightbytesequence:
          # for each byte, if it is odd, flip even to be the opposite
          if ord(thisbyte) % 2:
            even = not even
        '''
        even = parityCheck(eightbytesequence)


        # actually call write, if we are supposed to...
        if even:
          self.file.writeat(eightbytesequence,offset)
        # ...or error out.
        else:
          raise RepyParityError("Non-even parity write to file")
  
  
  def readat(self,bytes,offset):
    # Read from the file using the sandbox's readat...
    return self.file.readat(bytes,offset)

  def close(self):
    self.file.close()


def parityopenfile(filename, create):
  return EvenParityFile(filename,create)




# The code here sets up type checking and variable hiding for you.  You
# should not need to change anything below here.
sec_file_def = {"obj-type":EvenParityFile,
                "name":"EvenParityFile",
                "writeat":{"type":"func","args":(str,(int,long)),"exceptions":Exception,"return":(int,type(None)),"target":EvenParityFile.writeat},
                "readat":{"type":"func","args":((int,long,type(None)),(int,long)),"exceptions":Exception,"return":str,"target":EvenParityFile.readat},
                "close":{"type":"func","args":None,"exceptions":None,"return":(bool,type(None)),"target":EvenParityFile.close}
           }

CHILD_CONTEXT_DEF["openfile"] = {"type":"objc","args":(str,bool),"exceptions":Exception,"return":sec_file_def,"target":parityopenfile}
CHILD_CONTEXT_DEF["RepyParityError"] = {"type":"any","target":RepyParityError}
# Execute the user code
secure_dispatch_module()