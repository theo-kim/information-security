""" 
Note:
    This security layer uses encasementlib.r2py, restrictions.default, repy.py and Python
    Also you need to give it an application to run.
    python repy.py restrictions.default encasementlib.r2py [security_layer].r2py [attack_program].r2py 
    
""" 
class RepyParityError(Exception):
    pass

class EvenParityFile():
    def __init__(self,filename,create):
        # globals
        mycontext['debug'] = False   
        # local (per object) reference to the underlying file
        self.fn = filename

        self.file = openfile(self.fn,create)

    def check_leftover(self, d, start):
        for i in xrange(start, len(d), 8): 
            if not self.parity_check_word(d[i:i+8]):
                return False
        return True

    def parity_check_word(self, word):
        if len(word) != 8:
            return True

        even = True
        for c in word:
            if ord(c) & 1 == 0:
                even = not even

        return even


    def check_buf(self, data, offset):
        offset_start = offset
        leftover = offset % 8
        len_data = len(data)

        offset -= leftover
        firstword = ""

        try:
            firstword = self.readat(8, offset)
        except SeekPastEndOfFileError: # empty file
            return self.check_leftover(data, 0)

        if not self.parity_check_word( firstword[:leftover] + data[:(8 - leftover)] ):
            return False

        leftover_end = (len_data - leftover) % 8 
        lastword = ""

        try:
            lastword = self.readat(8, offset_start + (len_data - leftover_end))
            if not self.parity_check_word( data[len_data-leftover_end:] + lastword[:(8 - leftover_end)] ):
                return False

        except SeekPastEndOfFileError:
            pass

        return self.check_leftover(data, leftover)

    def writeat(self, data, offset):
        if self.check_buf(data, offset):
            self.file.writeat(data, offset)
        else:
            raise RepyParityError("Non-even parity write to file")

    def readat(self,bytes,offset):
        return self.file.readat(bytes, offset)

    def close(self):
        self.file.close()


def parityopenfile(filename, create):
    return EvenParityFile(filename,create)


# The code here sets up type checking and variable hiding for you.  You
# should not need to change anything below here.
sec_file_def = {"obj-type":EvenParityFile,
                "name":"EvenParityFile",

                "writeat":{"type":"func","args":(str,(int,long)),"exceptions":Exception,
                        "return":(int,type(None)),"target":EvenParityFile.writeat},

                "readat":{"type":"func","args":((int,long,type(None)),(int,long)),"exceptions":Exception,
                        "return":str,"target":EvenParityFile.readat},

                "close":{"type":"func","args":None,"exceptions":None,
                        "return":(bool,type(None)),"target":EvenParityFile.close}
           }

CHILD_CONTEXT_DEF["openfile"] = {"type":"objc","args":(str,bool),"exceptions":Exception,"return":sec_file_def,"target":parityopenfile}
CHILD_CONTEXT_DEF["RepyParityError"] = {"type":"any","target":RepyParityError}
# Execute the user code
secure_dispatch_module()
