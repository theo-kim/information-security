# Create a reference monitor using the security layer functionality in Repy V2.
# A reference monitor is an access control concept that refers to an abstract machine that mediates all access to objects by subjects.
# This can be used to allow, deny, or change the behavior of any set of calls.

# Your security layer should PRODUCE NO OUTPUT!

# You will create a security layer which prevents writes that do not maintain even parity for all 8 byte-aligned sequences in a file.
# Parity is often used to detect errors or tampering for data.

# Using the minimal number of read blocks possible, you must determine if an operation would change the parity.

# Grading will be looking for: How many 8 byte sequences are being read.
# Your code should NOT log anything. Log is like print.
# If your program produces output, it’s bad. No debugging log statement! Change This!

# All write operations must either complete or be blocked.
# All writes that would not cause the parity of a 8-byte sequence to be non-even must be permitted.
# Any write that would cause the parity of any 8-byte sequence to be non-even must be blocked by throwing a RepyParityError exception.

# The security layer should stop writeat calls if-and-only-if they would result in non-even parity
# if an app tries to read data a file or write data that results in even parity 8-byte sequences these operations must succeed as per normal and must not be blocked.

# The security layer may not read more 8-byte sequences than are necessary
# Hint: it is always possible to read two or fewer 8 byte blocks per writeat().


# Files need to be broken up into 8 byte sequences. bytes (1-8) are the first sequence, the next 8 bytes (bytes 9-16) are the second, etc.

# A write may be performed on a non-8-byte-aligned portion of the file. E.g., bytes 5-17 may be written in a single write.
# For that write, the first, second, and third 8 byte sequence are all modified.

# The ord() method returns an integer representing Unicode code point for the given Unicode character. It expects a single character.
# Syntax = ord(c)

# Parity is used for error detection.
# Along with the 8-byte signal being sent, a 1-byte parity bit will also be sent.
# The parity bit counts the total number of 1's in the signal being sent.
# Two types of parity, even (we want the steam to be even) and odd (we want the stream to be odd).

# For Even Parity: The overall signal needs to be even. If it is odd, our parity bit needs to be high (1).
# https://www.youtube.com/watch?v=DdMcAUlxh1M
# 0 1 0 0 Parity Bit: 1. Why? So that it's even! This is where being divisible by 2 comes in.
# 1 1 0 0 Party Bit: 0

# For Odd Parity: The overall signal needs to be odd. If it is even, our parity bit needs to be high (1).
# 0 1 0 0 Parity Bit: 0. Why? So that it's odd!
# 1 1 0 0 Party Bit: 1. Why? So that it's odd!

# Class definitions must be executed before they have any effect. The statements inside a class definition will usually be function definitions.

"""
STEPS
1.) Read File.
2.) Take the file 8 bytes at a time.
3.) If an 8-byte sequence’s parity is not-even, it must be blocked by throwing a RepyParityError exception.
4.) If an 8-byte sequence’s parity is even, move onto the next 8 bytes

5.) In some cases there will be an incomplete sequence (e.g., the last 5 bytes of a 13 byte file).
    Parity is not checked for an incomplete sequence (it is only checked when the sequence is completed).
    We will write incomplete sequences because they have even parity

"""

class RepyParityError(Exception):
    pass

class EvenParityFile():

  def __init__(self,filename,create):
    # globals
    mycontext['debug'] = False
    
    # local (per object) reference to the underlying file
    self.fn = filename
    self.file = openfile(self.fn,create)


# Checking The Parity of The File In 8-byte Chunks BEFORE It Is Ever Written.
  def writeat(self,data,offset):
      
    thisdata = data

    fileLength = len(thisdata)
    fileSize = fileLength + offset     # USE THE LENGTH FUNCTION TO FIND OUT HOW MANY BYTES thisdata is.
    
    # Breaks If The User Tries To Write Something Past The fileLength.
    if fileLength and offset > fileSize:
       #log("Trying To Write Past The File's Size!")
        break;

     # Breaks If The User Tries To Use An Offset Less Than 0.
    if offset < 0:
        #log("Offset Less Than 0!")
         break;
    
    if fileLength < 8 and >= 1:      # Email from the prof, "An incomplete block has even parity and writes that consist of all even parity blocks should be written."
        self.file.writeat(thisdata,offset)
        #log("Data Written!")

    if fileLength <= 0:    
        break;
        #log("File Is Empty, Nothing Was Written!")
    
    while thisdata: # While there is something in thisdata, do the following.

        isEven = 0
        eightbytesequence = thisdata[:8] # Getting Items From The Beginning of the array through [8], but not including [8]. This is in positions. Arrays start at position 0. 8 bytes total.
                                         # The 8 is saying, grab 8 array positions starting at the beginning [0]. [0][1][2][3][4][5][6][7]

        thisdata = thisdata[8:]          # Getting The Next 8 Positions Loaded Into thisdata For The Next Iteration Of The Loop

        for byte in eightbytesequence:

            #The ord() method returns an integer representing the Unicode code point of the given Unicode character.
            if ord(str(byte)) % 2 == 0:
                isEven += 1
                    if isEven == len(thisdata):
                        self.file.writeat(thisdata,offset)
                       #log("File Was Written Successlly")
                continue

            elif ord(str(byte)) % 2 != 0:
                raise RepyParityError("Parity Is Not Even. Write To File Has Been BLOCKED!")

  def readat(self,bytes,offset):

    # Read from the file using the sandbox's readat...
    # Need To Do Something here..
    return self.file.readat(bytes,offset)

  def close(self):
    self.file.close()

def parityopenfile(filename, create):
  return EvenParityFile(filename,create)

#######################################################

# The Code Here Sets Up Type Checking and Variable Hiding For You. You Shouldn't Need To Change Anything Below Here.
sec_file_def = {"obj-type":EvenParityFile,
                "name":"EvenParityFile",
                "writeat":{"type":"func","args":(str,(int,long)),"exceptions":Exception,"return":(int,type(None)),"target":EvenParityFile.writeat},
                "readat":{"type":"func","args":((int,long,type(None)),(int,long)),"exceptions":Exception,"return":str,"target":EvenParityFile.readat},
                "close":{"type":"func","args":None,"exceptions":None,"return":(bool,type(None)),"target":EvenParityFile.close}
           }

CHILD_CONTEXT_DEF["openfile"] = {"type":"objc","args":(str,bool),"exceptions":Exception,"return":sec_file_def,"target":parityopenfile}
CHILD_CONTEXT_DEF["RepyParityError"] = {"type":"any","target":RepyParityError}

# Execute The User Code
secure_dispatch_module()
