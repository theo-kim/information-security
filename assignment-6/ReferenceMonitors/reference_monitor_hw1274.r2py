"""
This security layer inadequately handles parity for files in RepyV2.



Note:
    This security layer uses encasementlib.r2py, restrictions.default, repy.py and Python
    Also you need to give it an application to run.
    python repy.py restrictions.default encasementlib.r2py [security_layer].r2py [attack_program].r2py 
    
    """ 
class RepyParityError(Exception):
    pass

#checks parity of a byte
def checkparity(data):
    parity = 0
    while data:
        parity = ~parity
        data = data & (data - 1)
    #returns even number to counter if even parity
    if parity == 0:
        #log(": EVEN Parity +2 \n")
        return 2
    #returns odd number to counter if odd parity
    else:
        #log(": ODD Parity +1 \n")
        return 1

class EvenParityFile():
    def __init__(self,filename,create):
    # globals
        mycontext['debug'] = False
    # local (per object) reference to the underlying file
        self.fn = filename
        self.file = openfile(self.fn,create)
  
    def writeat(self,data,offset):
    # check the parity of the data written
    # NOTE: This is wrong in many ways!!!!
    #log(len(data))
        thisdata = data
    #log('thisdata:' + thisdata + '\n')
    #check for incomplete bytes, pass if incomplete
        databytes = len(thisdata)
        #log("\n============", databytes, " BYTES ============\n")
    #assume base case: pass all incomplete lengths less than 8
        if databytes < 8:
            #log(thisdata)
            #log('incomplete sequence less than 8, will be written to the file! \n')
            self.file.writeat(thisdata, offset)
    #If the byte is 8 or more
        else:
            while thisdata:
                eightbytesequence = thisdata[:8]
                thisdata = thisdata[8:]
                #even = True
                oddparitycount = 0
                #loop through bytes
                for thisbyte in eightbytesequence:
                    ordbyte = ord(thisbyte)
                    #log(thisbyte)
                    oddparitycount = oddparitycount + checkparity(ordbyte)
                #log("Total parity count for this byte: ", oddparitycount, '\n')
            # actually call write, if we are supposed to...
            #have an even number of odd parity
            #so if total parity count is 0
                if oddparitycount%2 == 0:
                    #log(eightbytesequence, "will be written to the file! \n")
                    self.file.writeat(eightbytesequence,offset)
                else:
                    raise RepyParityError("Non-even parity write to file \n")


    def readat(self,bytes,offset):
    # Read from the file using the sandbox's readat...
        return self.file.readat(bytes,offset)

    def close(self):
            self.file.close()


def parityopenfile(filename, create):
    return EvenParityFile(filename,create)


# The code here sets up type checking and variable hiding for you.  You
# should not need to change anything below here.
sec_file_def = {"obj-type":EvenParityFile,
                "name":"EvenParityFile",
                "writeat":{"type":"func","args":(str,(int,long)),"exceptions":Exception,"return":(int,type(None)),"target":EvenParityFile.writeat},
                "readat":{"type":"func","args":((int,long,type(None)),(int,long)),"exceptions":Exception,"return":str,"target":EvenParityFile.readat},
                "close":{"type":"func","args":None,"exceptions":None,"return":(bool,type(None)),"target":EvenParityFile.close}
           }

CHILD_CONTEXT_DEF["openfile"] = {"type":"objc","args":(str,bool),"exceptions":Exception,"return":sec_file_def,"target":parityopenfile}
CHILD_CONTEXT_DEF["RepyParityError"] = {"type":"any","target":RepyParityError}
# Execute the user code
secure_dispatch_module()
