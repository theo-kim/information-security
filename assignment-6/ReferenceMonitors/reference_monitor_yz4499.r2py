"""
This security layer inadequately handles parity for files in RepyV2.



Note:
    This security layer uses encasementlib.r2py, restrictions.default, repy.py and Python
    Also you need to give it an application to run.
    python repy.py restrictions.default encasementlib.r2py [security_layer].r2py [attack_program].r2py

    """
class RepyParityError(Exception):
    pass

class EvenParityFile():
  def __init__(self,filename,create):
    # globals
    mycontext['debug'] = False
    # local (per object) reference to the underlying file
    self.fn = filename

    self.file = openfile(self.fn,create)


  def writeat(self,data,offset):

    # check the parity of the data written
    # NOTE: This is wrong in many ways!!!!
    ori_offset = offset
    thisdata = data
    if thisdata is None or len(thisdata) is 0:
        return
    first8 = self.readat(8, offset-offset%8)
    if first8 is None or len(first8) < offset%8:
        raise RepyParityError()

    towrite = ''
    if len(thisdata)+offset%8 >= 8:
        even = True
        for thisbyte in first8[:offset % 8]:
            if ord(thisbyte) % 2:
                even = not even
        for thisbyte in thisdata[:(8-offset%8)]:
            if ord(thisbyte) % 2:
                even = not even
        if even:
            try:
                # self.file.writeat(thisdata[:(8-offset%8)], offset)
                towrite += thisdata[:(8-offset%8)]
                thisdata = thisdata[(8-offset%8):]
                offset += (8-offset%8)
            except:
                raise RepyParityError()
        else:
            raise RepyParityError("Non-even parity write to file")
    else:
        if len(first8) < 8:
            try:
                self.file.writeat(thisdata, offset)
                return
            except:
                raise RepyParityError()
        else:
            even = True
            for thisbyte in first8[:offset%8]:
                if ord(thisbyte) % 2:
                    even = not even
            for thisbyte in thisdata:
                if ord(thisbyte) % 2:
                    even = not even
            for thisbyte in first8[(len(thisdata)+offset%8):]:
                if ord(thisbyte) % 2:
                    even = not even
            if even:
                try:
                    # towrite += thisdata
                    self.file.writeat(thisdata, offset)
                    # offset += (8-offset%8)
                    # data = data[(8-offset%8):]
                    return
                except:
                    raise RepyParityError()
            else:
                raise RepyParityError("Non-even parity write to file")

    while thisdata:
        if len(thisdata) < 8:
            last8 = self.readat(8, offset)
            if last8 is None or len(last8) < 8:
                try:
                    # self.file.writeat(thisdata, offset)
                    towrite += thisdata
                    break
                except:
                    raise RepyParityError()
            else:
                even = True
                for thisbyte in thisdata:
                    if ord(thisbyte) % 2:
                        even = not even
                for thisbyte in first8[len(thisdata):]:
                    if ord(thisbyte) % 2:
                        even = not even
                if even:
                    try:
                        # self.file.writeat(data, offset)
                        towrite += thisdata
                        break
                    except:
                        raise RepyParityError()
                else:
                    raise RepyParityError("Non-even parity write to file")
        eightbytesequence = thisdata[:8]
        thisdata = thisdata[8:]
        even = True
        for thisbyte in eightbytesequence:
          # for each byte, if it is odd, flip even to be the opposite
          if ord(thisbyte) % 2:
            even = not even

        # actually call write, if we are supposed to...
        if even:
            try:
                towrite += eightbytesequence
                # self.file.writeat(eightbytesequence,offset)
                offset += len(eightbytesequence)
            except:
                raise RepyParityError()
        # ...or error out.
        else:
          raise RepyParityError("Non-even parity write to file")
    try:
        self.file.writeat(data, ori_offset)
    except:
        raise RepyParityError("Non-even parity write to file")

  def readat(self,bytes,offset):
    # Read from the file using the sandbox's readat...
    try:
        return self.file.readat(bytes,offset)
    except:
        pass

  def close(self):
    self.file.close()


def parityopenfile(filename, create):
  return EvenParityFile(filename,create)




# The code here sets up type checking and variable hiding for you.  You
# should not need to change anything below here.
sec_file_def = {"obj-type":EvenParityFile,
                "name":"EvenParityFile",
                "writeat":{"type":"func","args":(str,(int,long)),"exceptions":Exception,"return":(int,type(None)),"target":EvenParityFile.writeat},
                "readat":{"type":"func","args":((int,long,type(None)),(int,long)),"exceptions":Exception,"return":str,"target":EvenParityFile.readat},
                "close":{"type":"func","args":None,"exceptions":None,"return":(bool,type(None)),"target":EvenParityFile.close}
           }

CHILD_CONTEXT_DEF["openfile"] = {"type":"objc","args":(str,bool),"exceptions":Exception,"return":sec_file_def,"target":parityopenfile}
CHILD_CONTEXT_DEF["RepyParityError"] = {"type":"any","target":RepyParityError}
# Execute the user code
secure_dispatch_module()