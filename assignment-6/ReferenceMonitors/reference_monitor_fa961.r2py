"""
This security layer inadequately handles parity for files in RepyV2.



Note:
    This security layer uses encasementlib.r2py, restrictions.default, repy.py and Python
    Also you need to give it an application to run.
    python repy.py restrictions.default encasementlib.r2py [security_layer].r2py [attack_program].r2py 
    
    """
# this is the global variable that will print all the function calls


class RepyParityError(Exception):
    pass

class EvenParityFile():
  def __init__(self,filename,create):
    # globals
    mycontext['debug'] = False   
    # local (per object) reference to the underlying file
    self.fn = filename
 
    self.file = openfile(self.fn,create)


  def writeat(self,data,offset):
      # check the parity of the data written
      #get file contents
      #if the offset is too large then we are writing to the end of the file, stop the write
      # if offset is 0, there is a Negative sizelimit specified error
      # so just start with an empty sequence since the data will start being input at the beginning of the file
      if offset !=  0:
          Sequence = self.file.readat(offset-1,offset - (offset%8))
      else:
          Sequence = ""
      # add the data to what we have already copied from the beginning of the sequence
      Sequence += data
      # add the rest of the data to be copied into the beginning of the sequence
      # find what index the added data will end at
      dataEndIndex = offset + len(data) - 1
      readStartIndex = dataEndIndex - 1
      # find where the last sequence affected ends
      readEndIndex = (8 * (dataEndIndex/8+1))-1
      #read from the end of data to the end of that sequence and end it to our total sequence variable
      Sequence += self.file.readat(readEndIndex, readStartIndex)
      thisdata = Sequence
      #now we have all the sequences affected by the data to be checked for parity
      while thisdata:
          eightbytesequence = thisdata[:8]
          thisdata = thisdata[8:]
          #even = True
          #count = 0
          even = parityCheck(eightbytesequence)
          # actually call write, if we are supposed to...
          if even:
              self.file.writeat(eightbytesequence,offset)
              # ...or error out.
          else:
              raise RepyParityError("Non-even parity write to file")

          
  
  def readat(self,bytes,offset):
    # Read from the file using the sandbox's readat...
    return self.file.readat(bytes,offset)

  def close(self):
    self.file.close()


def parityopenfile(filename, create):
  return EvenParityFile(filename,create)

def parityCheck(eightbytesequence):
    count = 0
    for thisbyte in eightbytesequence:
        if (ord(thisbyte) % 2):
            #this is odd since the condition returned 1 aka TRUE
            # found an uneven byte so increment count
            count += 1
    if(count % 2 == 0):
        return True
    else:
        return False


# The code here sets up type checking and variable hiding for you.  You
# should not need to change anything below here.
sec_file_def = {"obj-type":EvenParityFile,
                "name":"EvenParityFile",
                "writeat":{"type":"func","args":(str,(int,long)),"exceptions":Exception,"return":(int,type(None)),"target":EvenParityFile.writeat},
                "readat":{"type":"func","args":((int,long,type(None)),(int,long)),"exceptions":Exception,"return":str,"target":EvenParityFile.readat},
                "close":{"type":"func","args":None,"exceptions":None,"return":(bool,type(None)),"target":EvenParityFile.close}
           }

CHILD_CONTEXT_DEF["openfile"] = {"type":"objc","args":(str,bool),"exceptions":Exception,"return":sec_file_def,"target":parityopenfile}
CHILD_CONTEXT_DEF["RepyParityError"] = {"type":"any","target":RepyParityError}
# Execute the user code
secure_dispatch_module()
