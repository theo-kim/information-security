"""
This security layer inadequately handles parity for files in RepyV2.

Ashley Lee (al4596)

Note:
This security layer uses encasementlib.r2py, restrictions.default, repy.py and Python
Also you need to give it an application to run.
python repy.py restrictions.default encasementlib.r2py [security_layer].r2py [attack_program].r2py

"""
class RepyParityError(Exception):
    pass

#return parity of value
def parityCheck(value):
    result = 0
    while value:
        result = ~result
        value = value & (value - 1)
    return result

class EvenParityFile():
    def __init__(self,filename,create):
        # globals
        mycontext['debug'] = False
        # local (per object) reference to the underlying file
        self.fn = filename

        self.file = openfile(self.fn,create)
            
    def writeat(self,data,offset):
        # check the parity of the data written
        # NOTE: This is wrong in many ways!!!!
        thisdata = data
        index = offset
        while thisdata:
            eightbytesequence = thisdata[:8]
            thisdata = thisdata[8:]
            #if a sequence is incomplete, parity is not checked
            if len(eightbytesequence) < 8:
                raise RepyParityError("Sequence incomplete")
            else:
                #even = True
                nonEvenCounter = 0
                for thisbyte in eightbytesequence:
                    #increment nonEvenCounter if un-even parity
                    if parityCheck(ord(thisbyte)) % 2 != 0:
                        nonEvenCounter = nonEvenCounter + 1
            
                # if nonEvenCounter is even, the sequence is even
                if nonEvenCounter % 2 == 0:
                    self.file.writeat(eightbytesequence,index)
                    index = index + 8
                # the sequence is un-even, therefore block
                else:
                    raise RepyParityError("Non-even parity write to file")


    def readat(self,bytes,offset):
        # Read from the file using the sandbox's readat...
        return self.file.readat(bytes,offset)

    def close(self):
        self.file.close()


def parityopenfile(filename, create):
    return EvenParityFile(filename,create)


# The code here sets up type checking and variable hiding for you.  You
# should not need to change anything below here.
sec_file_def = {"obj-type":EvenParityFile,
"name":"EvenParityFile",
"writeat":{"type":"func","args":(str,(int,long)),"exceptions":Exception,"return":(int,type(None)),"target":EvenParityFile.writeat},
"readat":{"type":"func","args":((int,long,type(None)),(int,long)),"exceptions":Exception,"return":str,"target":EvenParityFile.readat},
"close":{"type":"func","args":None,"exceptions":None,"return":(bool,type(None)),"target":EvenParityFile.close}
}

CHILD_CONTEXT_DEF["openfile"] = {"type":"objc","args":(str,bool),"exceptions":Exception,"return":sec_file_def,"target":parityopenfile}
CHILD_CONTEXT_DEF["RepyParityError"] = {"type":"any","target":RepyParityError}
# Execute the user code
secure_dispatch_module()

