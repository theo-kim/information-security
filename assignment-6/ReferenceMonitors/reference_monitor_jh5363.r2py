
class RepyParityError(Exception):
    pass

class EvenParityFile():
  def __init__(self,filename,create):

    mycontext['debug'] = False

    self.fn = filename

    self.file = openfile(self.fn,create)

  def start_writeat(self, data, offset):
    assert (offset%8 == 0)
    prefix = self.readat_private(8-len(data), offset)
    full = prefix + data

    odd = 0
    for b in full:
        if(ord(b)%2):
            odd+=1
    if(odd%2):
      raise RepyParityError("Non-even parity write to file")
    else:
        #need to throw invalid write if tries to write farther than possible in file
        self.file.writeat(prefix,offset)
        self.file.writeat(data, offset+(8-len(data)))

  def startonly_writeat(self, data, offset):
    prefix = self.readat_private(8-len(data), offset)
    suffix = self.readat_private(8-len(data)-len(prefix), offset+len(prefix)+len(data))
    full = prefix + data + suffix

    if(len(full)<8):
        #not a full 8-byte at end, assume even parity
        self.file.writeat(full,offset)
        return
    odd = 0
    for b in full:
        if(ord(b)%2):
            odd+=1
    if(odd%2):
      raise RepyParityError("Non-even parity write to file")
    else:
        self.file.writeat(full,offset)


  def end_writeat(self, data, offset):
    bytes2read = 8-len(data)
    suffix = self.readat_private(bytes2read, offset+len(data))
    full = data + suffix
    if(len(full) < 8):
        #end of file write of less than 8 bytes so assume even parity
        self.file.writeat(full, offset)
    else:
        odd = 0
        for b in full:
            if(ord(b)%2):
                odd+=1
        if(odd%2):
            raise RepyParityError("Non-even parity write to file")
        else:
            self.file.writeat(full,offset)

  def writeat(self,data,offset):
    if(offset%8 != 0):
      need2read = offset%8
      start_bytes = data[:8-need2read]
      data=data[8-need2read:]
      if(len(data)==0):
          self.startonly_writeat(start_bytes, offset-need2read)
      else:
          self.start_writeat(start_bytes, offset-need2read)
          offset += 8-need2read

    need2end = False
    if(len(data)%8 != 0):
        need2end = True
        endbytes = data[-(len(data)%8):]
        data = data[:-(len(data)%8)]


    thisdata = data

    while thisdata:
        eightbytesequence = thisdata[:8]
        thisdata = thisdata[8:]
        odd = 0
        for thisbyte in eightbytesequence:
          if ord(thisbyte) % 2:
            odd +=1
        if odd%2:
          raise RepyParityError("Non-even parity write to file")
        else:
          self.file.writeat(eightbytesequence,offset)
          offset+=8

    if(need2end):
      self.end_writeat(endbytes, offset)

  def readat(self,bytes,offset):
    # Read from the file using the sandbox's readat...
    return self.file.readat(bytes,offset)

  def readat_private(self,bytes,offset):
    # return '' if read past EOF
    try:
        return self.file.readat(bytes,offset)
    except SeekPastEndOfFileError:
        return ''

  def close(self):
    self.file.close()


def parityopenfile(filename, create):
  return EvenParityFile(filename,create)




# The code here sets up type checking and variable hiding for you.  You
# should not need to change anything below here.
sec_file_def = {"obj-type":EvenParityFile,
                "name":"EvenParityFile",
                "writeat":{"type":"func","args":(str,(int,long)),"exceptions":Exception,"return":(int,type(None)),"target":EvenParityFile.writeat},
                "readat":{"type":"func","args":((int,long,type(None)),(int,long)),"exceptions":Exception,"return":str,"target":EvenParityFile.readat},
                "close":{"type":"func","args":None,"exceptions":None,"return":(bool,type(None)),"target":EvenParityFile.close}
           }

CHILD_CONTEXT_DEF["openfile"] = {"type":"objc","args":(str,bool),"exceptions":Exception,"return":sec_file_def,"target":parityopenfile}
CHILD_CONTEXT_DEF["RepyParityError"] = {"type":"any","target":RepyParityError}
# Execute the user code
secure_dispatch_module()
