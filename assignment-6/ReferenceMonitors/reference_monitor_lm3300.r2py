"""
This security layer inadequately handles parity for files in RepyV2.



Note:
    This security layer uses encasementlib.r2py, restrictions.default, repy.py and Python
    Also you need to give it an application to run.
    python repy.py restrictions.default encasementlib.r2py [security_layer].r2py [attack_program].r2py 
    
    """ 
class RepyParityError(Exception):
    pass

class EvenParityFile():
  def __init__(self,filename,create):
    # globals
    mycontext['debug'] = False   
    # local (per object) reference to the underlying file
    self.fn = filename
 
    self.file = openfile(self.fn,create)

    self.master_lock = createlock()

  def writeat(self,data,offset):
    self.master_lock.acquire(True)
    lower_byte_aligned_position = offset - (offset%8)
    
    data_length = len(data)
    end_byte_loc = offset + data_length 
    upper_byte_aligned_position = end_byte_loc + (8 - end_byte_loc)%8 - 1
    aligned_length = upper_byte_aligned_position - lower_byte_aligned_position + 1
    
    lower_bytes = ""
    read_num_lower_bytes = offset - lower_byte_aligned_position
    
    try:
      lower_bytes = self.file.readat(read_num_lower_bytes, lower_byte_aligned_position)
    except SeekPastEndOfFileError:
      self.master_lock.release()
      raise SeekPastEndOfFileError
    except RepyArgumentError:
      self.master_lock.release()
      raise RepyArgumentError

    higher_bytes = ""
    read_num_higher_bytes = upper_byte_aligned_position - end_byte_loc + 1
    while (read_num_higher_bytes > 0):
      try:
        higher_bytes = self.file.readat(read_num_higher_bytes, end_byte_loc)
        break 
      except SeekPastEndOfFileError: 
        read_num_higher_bytes -= 1

    new_data = lower_bytes + data + higher_bytes
    
    this_data = new_data
    while this_data: 
        if len(this_data) < 8: 
          this_data = this_data[len(this_data):]
          break
        eight_byte_seq = this_data[:8]
        this_data = this_data[8:]
        even = True
        for this_byte in eight_byte_seq:
            if ord(this_byte) % 2:
                even = not even
        if not even:
          self.master_lock.release()
          raise RepyParityError("Non-even parity write to file")

    try:
      self.file.writeat(data, offset)
      self.master_lock.release()
    except SeekPastEndOfFileError:
      self.master_lock.release()
      raise SeekPastEndOfFileError
    except RepyArgumentError:
      self.master_lock.release()
      raise RepyArgumentError
    
  def readat(self,bytes,offset):
    # Read from the file using the sandbox's readat...
    return self.file.readat(bytes,offset)

  def close(self):
    self.file.close()


def parityopenfile(filename, create):
  return EvenParityFile(filename,create)




# The code here sets up type checking and variable hiding for you.  You
# should not need to change anything below here.
sec_file_def = {"obj-type":EvenParityFile,
                "name":"EvenParityFile",
                "writeat":{"type":"func","args":(str,(int,long)),"exceptions":Exception,"return":(int,type(None)),"target":EvenParityFile.writeat},
                "readat":{"type":"func","args":((int,long,type(None)),(int,long)),"exceptions":Exception,"return":str,"target":EvenParityFile.readat},
                "close":{"type":"func","args":None,"exceptions":None,"return":(bool,type(None)),"target":EvenParityFile.close}
           }

CHILD_CONTEXT_DEF["openfile"] = {"type":"objc","args":(str,bool),"exceptions":Exception,"return":sec_file_def,"target":parityopenfile}
CHILD_CONTEXT_DEF["RepyParityError"] = {"type":"any","target":RepyParityError}
# Execute the user code
secure_dispatch_module()