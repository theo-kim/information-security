"""
This security layer inadequately handles parity for files in RepyV2.



Note:
    This security layer uses encasementlib.r2py, restrictions.default, repy.py and Python
    Also you need to give it an application to run.
    python repy.py restrictions.default encasementlib.r2py [security_layer].r2py [attack_program].r2py 
    
    """ 
class RepyParityError(Exception):
    pass

class EvenParityFile():
  def __init__(self,filename,create):
    # globals
    mycontext['debug'] = False   
    # local (per object) reference to the underlying file
    self.fn = filename
 
    self.file = openfile(self.fn,create)


  def writeat(self,data,offset):
   
    # check the parity of the data written
    # NOTE: This is wrong in many ways!!!!
   
    datatowrite = data
    #log(datatowrite, " with offset ", offset, "\n")
    currentfile = self.file
    
    start = (offset / 8) * 8 # starting 8 byte
    end = offset + len(data)
    #log(start, " --- ", end, "\n")

    even = True
    count = 0
 
    for currentlocation in range (start, end):
      if (currentlocation < offset): # read from file
        byte = currentfile.readat(1, currentlocation)
      else: # read new input
        byte = datatowrite[offset - currentlocation]

      #log("Byte: ", byte, "\n")      

      if (ord(byte) % 2 == 1): # check odd parity 
        #log("Change ", even, " to ")
        even = not even
        #log(even, "\n")
      count = count + 1

      # evaluate byte
      if (count == 8):
        count = 0
        if (even != True): # error
          #log("Not Even!!!\n")
          #log(currentfile.readat(100, 0), "\n")
          raise RepyParityError("Non-even parity write to file")

    # else write 
    self.file.writeat(data, offset)
    #log("Even!!!\n")
  
    #log(currentfile.readat(100, 0), "\n")
 
  def readat(self,bytes,offset):
    # Read from the file using the sandbox's readat...
    return self.file.readat(bytes,offset)

  def close(self):
    self.file.close()


def parityopenfile(filename, create):
  return EvenParityFile(filename,create)




# The code here sets up type checking and variable hiding for you.  You
# should not need to change anything below here.
sec_file_def = {"obj-type":EvenParityFile,
                "name":"EvenParityFile",
                "writeat":{"type":"func","args":(str,(int,long)),"exceptions":Exception,"return":(int,type(None)),"target":EvenParityFile.writeat},
                "readat":{"type":"func","args":((int,long,type(None)),(int,long)),"exceptions":Exception,"return":str,"target":EvenParityFile.readat},
                "close":{"type":"func","args":None,"exceptions":None,"return":(bool,type(None)),"target":EvenParityFile.close}
           }

CHILD_CONTEXT_DEF["openfile"] = {"type":"objc","args":(str,bool),"exceptions":Exception,"return":sec_file_def,"target":parityopenfile}
CHILD_CONTEXT_DEF["RepyParityError"] = {"type":"any","target":RepyParityError}
# Execute the user code
secure_dispatch_module()
