# CS-3923
# Michael Chen
# mzc223

class RepyParityError(Exception):
    pass

class EvenParityFile():
  def __init__(self,filename,create):
    # globals
    mycontext['debug'] = False
    # local (per object) reference to the underlying file
    self.fn = filename
 
    self.file = openfile(self.fn,create)


  def writeat(self,data,offset):
    # Make copy of data so we can do whatever to it
    totaldata = str(data)

    # If beginning of write doesn't land on block boundary, retrieve block and
    # construct earlier part of block
    # Since offset must be in range, no need to check for end of file cases
    firstblockloc = int(offset / 8) * 8
    if firstblockloc != offset:
      # This may fail to read the whole block, but if it does then we must be
      # trying to read from a file less than 8 bytes. In that case it doesn't
      # matter since we only need at most what's in the file
      firstblock = self.file.readat(8, firstblockloc)
      totaldata = firstblock[:(offset - firstblockloc)] + totaldata

    # If ending of write doesn't cover a whole block, retrieve block and
    # construct later part of block
    # Must also check that there's data in this range
    # Note: lastblockloc points to the beginning of the block that would contain
    # the end of the write
    lastblockloc = int((offset+len(data)) / 8) * 8
    if lastblockloc != offset+len(data):
      try:
        secondblock = self.file.readat(8, lastblockloc)
        if len(secondblock) + (offset+len(data) - lastblockloc) >= 8:
          totaldata = totaldata + secondblock[(offset+len(data) - lastblockloc):8]
          
      except SeekPastEndOfFileError:
        pass

    # Trim off any extra bytes that don't align with one of the blocks
    if(len(totaldata) % 8 != 0):
      totaldata = totaldata[:-(len(totaldata) % 8)]

    # Now we can check the parity of the data written
    while totaldata:
        eightbytesequence = totaldata[:8]
        totaldata = totaldata[8:]
        even = True
        for thisbyte in eightbytesequence:
          # for each byte, if it is odd, flip even to be the opposite
          if ord(thisbyte) % 2:
            even = not even
            
        if not even:
          raise RepyParityError("Non-even parity write to file")
    
    # All byte sequences passed the test, so write out the bytes
    self.file.writeat(data, offset)
  
  
  def readat(self,bytes,offset):
    # Read from the file using the sandbox's readat...
    return self.file.readat(bytes,offset)

  def close(self):
    self.file.close()


def parityopenfile(filename, create):
  return EvenParityFile(filename,create)




# The code here sets up type checking and variable hiding for you.  You
# should not need to change anything below here.
sec_file_def = {"obj-type":EvenParityFile,
                "name":"EvenParityFile",
                "writeat":{"type":"func","args":(str,(int,long)),"exceptions":Exception,"return":(int,type(None)),"target":EvenParityFile.writeat},
                "readat":{"type":"func","args":((int,long,type(None)),(int,long)),"exceptions":Exception,"return":str,"target":EvenParityFile.readat},
                "close":{"type":"func","args":None,"exceptions":None,"return":(bool,type(None)),"target":EvenParityFile.close}
           }

CHILD_CONTEXT_DEF["openfile"] = {"type":"objc","args":(str,bool),"exceptions":Exception,"return":sec_file_def,"target":parityopenfile}
CHILD_CONTEXT_DEF["RepyParityError"] = {"type":"any","target":RepyParityError}
# Execute the user code
secure_dispatch_module()
