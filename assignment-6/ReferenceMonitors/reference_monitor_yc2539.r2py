"""
This security layer inadequately handles parity for files in RepyV2.



Note:
    This security layer uses encasementlib.r2py, restrictions.default, repy.py and Python
    Also you need to give it an application to run.
    python repy.py restrictions.default encasementlib.r2py [security_layer].r2py [attack_program].r2py 
    
    """ 
class RepyParityError(Exception):
    pass


class EvenParityFile():
  def __init__(self,filename,create):
    # globals
    mycontext['debug'] = False   
    # local (per object) reference to the underlying file
    self.fn = filename
 
    self.file = openfile(self.fn,create)


  def writeat(self,data,offset):
   
    # check the parity of the data written

    thisdata = data
    thisoffset = offset

    # Calculate read offset and minmum number of bytes that should be read from file.
    lenofdata = len(data)

    # Check if there is enough characters in original file. 
    # If there is nothing to read, request offset reach the end of file, just return
    readdata = self.file.readat(thisoffset, 0)
    if len(readdata) < thisoffset:
      raise RepyParityError("Read offset too large") 

    # Calculate how many bytes should be included for the last write sequence.
    if (thisoffset % 8 + lenofdata) % 8 is 0:
      temp = 0
    else:
      temp = 8 - (thisoffset % 8 + lenofdata) % 8
    
    # readbytes = Bytes in first sequence of a write + len of sequences + Bytes in last sequence of a write
    readbytes = thisoffset % 8 + lenofdata + temp
    readoffset = thisoffset - thisoffset % 8
    readdata = self.file.readat(readbytes, readoffset)
    curseq = 1;
    newsequence = []
    writeseqs = ""

    # Loop of each 8 byte sequence of a write
    while thisdata:
        readeightbytesequence = readdata[:8]
        # If sequences is long in a write, give the sequence in different block an number as curseq. 
        # Ex. curseq = 1, if we are checking the first sequence of a write in the loop.
        # eightbytesequence = current write sequence
        thisoffset = thisoffset % 8
        eightbytesequence = thisdata[:]

        if curseq is 1:
          eightbytesequence = thisdata[:8 - thisoffset]
        elif curseq > 1 and len(eightbytesequence) > 8:
          eightbytesequence = thisdata[:8]
        # Last sequence
        elif curseq > 1 and len(eightbytesequence) <= 8:
          eightbytesequence = thisdata[:len(eightbytesequence)]
        curseq = curseq + 1

        # Make up the new sequence after per write
        # If there is no offset or there is offset for current sequence, append new charater to newsequence
        if (thisoffset == 0):
          for m in range(0, len(eightbytesequence)):
            newsequence.append(eightbytesequence[m])
          if len(eightbytesequence) < 8:
            for n in range(len(eightbytesequence), len(readeightbytesequence)):
              newsequence.append(readeightbytesequence[n])
        else:
          for i in range(0, thisoffset):
            newsequence.append(readeightbytesequence[i])
          if len(thisdata) > (8 - thisoffset):
            for j in range(0, 8 - thisoffset):
              newsequence.append(eightbytesequence[j])
          else:
            for k in range(0, len(thisdata)):
              newsequence.append(eightbytesequence[k])
            for f in range(len(thisdata) + thisoffset, len(readeightbytesequence)):
              newsequence.append(readeightbytesequence[f])
        
        readdata = readdata[8:]
        thisdata = thisdata[8-thisoffset:]

        # Even Parity of the sequence
        even = True
        # Even Parity of the character
        evenparity = True
        # The number of non even byte in a sequence
        nonevenbytenum = 0

        for thisbyte in newsequence:
          # for each byte, if it is odd, flip even to be the opposite
          if ord(thisbyte) % 2 is not 0:
            evenparity = not evenparity
            nonevenbytenum = nonevenbytenum + 1
        
        # If the last sequence is not complete, pass. Otherwise flip even property. 
        if len(newsequence) < 8:
          even = True
        elif nonevenbytenum % 2 is not 0:
          even = not even
        
             
        # If one of the sequence is not even, raise error
        if not even:
          raise RepyParityError("Non-even parity write to file")
        # Append the new write sequence to the finally write sequence.
        else:
          writeseqs += eightbytesequence

        # Reset thisoffset to 0, to next sequence 
        thisoffset = 0
        newsequence = []
    
    self.file.writeat(writeseqs, offset)
  
  
  def readat(self,bytes,offset):
    # Read from the file using the sandbox's readat...
    return self.file.readat(bytes,offset)

  def close(self):
    self.file.close()


def parityopenfile(filename, create):
  return EvenParityFile(filename,create)




# The code here sets up type checking and variable hiding for you.  You
# should not need to change anything below here.
sec_file_def = {"obj-type":EvenParityFile,
                "name":"EvenParityFile",
                "writeat":{"type":"func","args":(str,(int,long)),"exceptions":Exception,"return":(int,type(None)),"target":EvenParityFile.writeat},
                "readat":{"type":"func","args":((int,long,type(None)),(int,long)),"exceptions":Exception,"return":str,"target":EvenParityFile.readat},
                "close":{"type":"func","args":None,"exceptions":None,"return":(bool,type(None)),"target":EvenParityFile.close}
           }

CHILD_CONTEXT_DEF["openfile"] = {"type":"objc","args":(str,bool),"exceptions":Exception,"return":sec_file_def,"target":parityopenfile}
CHILD_CONTEXT_DEF["RepyParityError"] = {"type":"any","target":RepyParityError}
# Execute the user code
secure_dispatch_module()