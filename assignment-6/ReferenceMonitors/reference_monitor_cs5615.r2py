"""
This security layer inadequately handles parity for files in RepyV2.



Note:
    This security layer uses encasementlib.r2py, restrictions.default, repy.py and Python
    Also you need to give it an application to run.
    python repy.py restrictions.default encasementlib.r2py [security_layer].r2py [attack_program].r2py

    """
class RepyParityError(Exception):
    pass

class EvenParityFile():
  def __init__(self,filename,create):
    # globals
    mycontext['debug'] = False
    # local (per object) reference to the underlying file
    self.fn = filename

    self.file = openfile(self.fn,create)

  def readat(self,bytes,offset):
    # Read from the file using the sandbox's readat...
    return self.file.readat(bytes,offset)

  def writeat(self,data,offset):
    k = offset % 8 # k is for calculating the prefix
    m = offset - k
    prefix = self.file.readat(k,m) # this is the prefix, so that the data always writes in multiples of 8
    size = len(self.file.readat(None,m)) #this size starts from the prefix of the data to be written, till the end of the file
    newsize = len(prefix)+len(data) #this size is the prefix+data, we compare them below
    if newsize >= size: # prefix + new data >= end of file, actually writes new data at the end of the file
        thisdata = prefix + data #thisdata is data addied by the prefix
        while thisdata:
            eightbytesequence = thisdata[:8]
            thisdata = thisdata[8:]
            if len(eightbytesequence) < 8: # mod 8
                self.file.writeat(eightbytesequence,offset)
                #log ("last wrote without parity check", eightbytesequence, offset, "\n") # just to test
            else:
                even = True
                for thisbyte in eightbytesequence: #for each byte, if it is odd, flip even to be the opposite
                    if ord(thisbyte) % 2:
                        even = not even  # actually call write, if we are supposed to...
                if even :
                    self.file.writeat(eightbytesequence,offset)
                    #log ("wrote case1", eightbytesequence, offset, "\n") # just to test
                    offset = offset + 8 #this is for writing multiples of 8
                # ...or error out.
                else:
                    raise RepyParityError("Non-even parity write to file")
    else: # prefix + new data < end of file, in this case we are overwriting not creating new data
        suffix = self.file.readat(None,m+newsize) #take all of the rest of the original file as a new source so that it eases the parity check
        thisdata = prefix + data + suffix #thisdata is data added by the prefix and suffix
        while thisdata:
            eightbytesequence = thisdata[:8]
            thisdata = thisdata[8:]
            if len(eightbytesequence) < 8: # mod 8
                self.file.writeat(eightbytesequence,offset)
                #log ("last wrote without parity check", eightbytesequence, offset, "\n") # just to test
            else:
                even = True
                for thisbyte in eightbytesequence: #for each byte, if it is odd, flip even to be the opposite
                    if ord(thisbyte) % 2:
                        even = not even  # actually call write, if we are supposed to...
                if even :
                    self.file.writeat(eightbytesequence,offset)
                    #log ("wrote case2", eightbytesequence, offset, "\n") # just to test
                    offset = offset + 8
                # ...or error out.
                else:
                    raise RepyParityError("Non-even parity write to file")








  def close(self):
    self.file.close()


def parityopenfile(filename, create):
  return EvenParityFile(filename,create)




# The code here sets up type checking and variable hiding for you.  You
# should not need to change anything below here.
sec_file_def = {"obj-type":EvenParityFile,
                "name":"EvenParityFile",
                "writeat":{"type":"func","args":(str,(int,long)),"exceptions":Exception,"return":(int,type(None)),"target":EvenParityFile.writeat},
                "readat":{"type":"func","args":((int,long,type(None)),(int,long)),"exceptions":Exception,"return":str,"target":EvenParityFile.readat},
                "close":{"type":"func","args":None,"exceptions":None,"return":(bool,type(None)),"target":EvenParityFile.close}
           }

CHILD_CONTEXT_DEF["openfile"] = {"type":"objc","args":(str,bool),"exceptions":Exception,"return":sec_file_def,"target":parityopenfile}
CHILD_CONTEXT_DEF["RepyParityError"] = {"type":"any","target":RepyParityError}
# Execute the user code
secure_dispatch_module()
