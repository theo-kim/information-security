"""
This security layer inadequately handles parity for files in RepyV2.



Note:
    This security layer uses encasementlib.r2py, restrictions.default, repy.py and Python
    Also you need to give it an application to run.
    python repy.py restrictions.default encasementlib.r2py [security_layer].r2py [attack_program].r2py

    """
class RepyParityError(Exception):
    pass

class EvenParityFile():
  def __init__(self,filename,create):
    # globals
    mycontext['debug'] = False
    # local (per object) reference to the underlying file
    self.fn = filename

    self.file = openfile(self.fn,create)


  def writeat(self,data,offset):

    # check the parity of the data written
    # NOTE: This is wrong in many ways!!!!

    def parity(eightbytesequence):
      even = True
      for thisbyte in eightbytesequence:
          if (ord(thisbyte) % 2) == 0:
            even = not even
      return even

    testData = self.file.readat(offset, 0)
    if len(testData) < offset:
      return

    dataLength = len(data)
    start = offset / 8 * 8
    end = (offset / 8 + (dataLength + offset) / 8 + 1) * 8
    OriginalLength = end - start
    originalData = self.file.readat(OriginalLength, start)

    # log("originalData: " + originalData + "\n")

    thisData = data

    startdata = originalData[:offset%8] + thisData[:8-offset%8]
    # log("startdata: " + startdata + "\n")
    thisData = thisData[8-offset%8:]
    even = True
    if len(startdata) == 8:
      even = even and parity(startdata)

    while (len(thisData) > 8):
      eightbytesequence = thisData[:8]
      thisData = thisData[8:]
      even = even and parity(eightbytesequence)

    if (thisData):
      if (dataLength + offset >= start + len(originalData)):
        even = even and True
      else:
        lastdata = thisData + originalData[-(8-len(thisData)):0]
        even = even and parity(lastdata)

    if even:
      self.file.writeat(data, offset)

    originalData = self.file.readat(100, 0)

    # log("AfterwardsData: " + originalData + "\n")


  def readat(self,bytes,offset):
    # Read from the file using the sandbox's readat...
    return self.file.readat(bytes,offset)

  def close(self):
    self.file.close()


def parityopenfile(filename, create):
  return EvenParityFile(filename,create)




# The code here sets up type checking and variable hiding for you.  You
# should not need to change anything below here.
sec_file_def = {"obj-type":EvenParityFile,
                "name":"EvenParityFile",
                "writeat":{"type":"func","args":(str,(int,long)),"exceptions":Exception,"return":(int,type(None)),"target":EvenParityFile.writeat},
                "readat":{"type":"func","args":((int,long,type(None)),(int,long)),"exceptions":Exception,"return":str,"target":EvenParityFile.readat},
                "close":{"type":"func","args":None,"exceptions":None,"return":(bool,type(None)),"target":EvenParityFile.close}
           }

CHILD_CONTEXT_DEF["openfile"] = {"type":"objc","args":(str,bool),"exceptions":Exception,"return":sec_file_def,"target":parityopenfile}
CHILD_CONTEXT_DEF["RepyParityError"] = {"type":"any","target":RepyParityError}
# Execute the user code
secure_dispatch_module()