class RepyParityError(Exception):
    pass
class EvenParityFile():
  def __init__(self,filename,create):
    # globals
    mycontext['debug'] = False   
    # local (per object) reference to the underlying file
    self.fn = filename

    self.file = openfile(self.fn,create)

  def writeat(self,data,offset):

    #may change previous result
    thisdata = data
    exisit =  self.file.readat(None ,0)
    if offset % 8 != 0:
      pos = offset % 8
      prev = exisit[offset-pos:offset]
      prev_list = [ord(s) for s in prev]
      prev_list.extend([ord(s) for s in thisdata[0:8-pos]])
      thisdata = thisdata[8-pos:]
      if sum(prev_list) % 2 != 0:
        raise RepyParityError("Non-even parity write to file")
    #check the data validation

    while len(thisdata) >= 8:
      temp = thisdata[:8]
      if sum([ord(s) for s in temp]) % 2 != 0:
        raise RepyParityError("Non-even parity write to file")
      thisdata = thisdata[8:]  
    #check if it has words after writing position
    if len(thisdata) != 0:
      last_list = [ord(s) for s in thisdata]
      temp = [ord(s) for s in exisit[offset+len(data): offset+len(data)+8-len(last_list)]]
      last_list += temp
      if len(last_list) == 8:
        if sum(last_list) % 2 != 0:
          raise RepyParityError("Non-even parity write to file")
    
    self.file.writeat(data, offset)
      
      
  #   thisdata = data
  #   remain = 8 - (offset % 8)
  #   remain_list = [ord(s) for s in self.file.readat(None,0)]
  #   remain_list.extend([ord(i) for i in thisdata[:remain]])
  #   if sum(remain_list) % 2 != 0:
  #     raise RepyParityError("Non-even parity write to file")
  #   for i in range(remain+8, len(thisdata), 8):
  #     list_ = [ord(s) for s in thisdata[remain-8: remain]]
  #     if sum(list_) % 2 != 0:
  #       raise RepyParityError("Non-even parity write to file")
  # self.file.writeat(data,offset)   
  
  
  def readat(self,bytes,offset):
    # Read from the file using the sandbox's readat...
    return self.file.readat(bytes,offset)

  def close(self):
    self.file.close()


def parityopenfile(filename, create):
  return EvenParityFile(filename,create)


# The code here sets up type checking and variable hiding for you.  You
# should not need to change anything below here.
sec_file_def = {"obj-type":EvenParityFile,
                "name":"EvenParityFile",
                "writeat":{"type":"func","args":(str,(int,long)),"exceptions":Exception,"return":(int,type(None)),"target":EvenParityFile.writeat},
                "readat":{"type":"func","args":((int,long,type(None)),(int,long)),"exceptions":Exception,"return":str,"target":EvenParityFile.readat},
                "close":{"type":"func","args":None,"exceptions":None,"return":(bool,type(None)),"target":EvenParityFile.close}
           }

CHILD_CONTEXT_DEF["openfile"] = {"type":"objc","args":(str,bool),"exceptions":Exception,"return":sec_file_def,"target":parityopenfile}

# Execute the user code
secure_dispatch_module()