"""
This security layer inadequately handles parity for files in RepyV2.


Note:
    This security layer uses encasementlib.r2py, restrictions.default, repy.py and Python
    Also you need to give it an application to run.
    python repy.py restrictions.default encasementlib.r2py [security_layer].r2py [attack_program].r2py 
    
    """ 
class RepyParityError(Exception):
    pass

class EvenParityFile():
  def __init__(self,filename,create):

  # globals
    mycontext['debug'] = False   
    # local (per object) reference to the underlying file
    self.fn = filename
    self.file = openfile(self.fn,create)

  def writeat(self,data,offset):
    
    # check offset
    if offset < 0:
      raise RepyParityError("Negative offset")
      
    elif offset > len(self.file.readat(None, 0)):
      raise RepyParityError("Past bounds of max offset")

    # check the parity of the data written

    if len(self.file.readat(None, 0)) == 0:
      stringarray = []
      thisdata = data
      startByte = offset
      endByte = startByte + 8
      lastByte = len(thisdata)
    
    
      if len(thisdata) < 8:
        startByte = 0
        endByte = lastByte
      if endByte >= lastByte:
        endByte = lastByte
      
      oddCount = 0
      while endByte <= lastByte:

        eightbytesequence = thisdata[startByte:endByte]
        for thisByte in eightbytesequence:
          # increments odd parity counter
          if ord(thisByte) % 2 == 1:
            oddCount += 1
        if oddCount % 2 == 1:
          raise RepyParityError("Non-even parity write to file")
          break
        # append it to the array to write later
        else:
          stringarray.append(eightbytesequence)
      
        if endByte == lastByte:
          break
        elif lastByte - endByte < 8:
          startByte += 8
          endByte = lastByte
          continue
        else:
          endByte += 8
          startByte += 8
    
      finalString = "".join(stringarray)
      self.file.writeat(finalString, 0)
    else:
      dataFromFile = self.file.readat(None, 0)
      dataFromFile = list(dataFromFile)
      for i in range(offset, offset + len(data)):
        dataFromFile.pop(i)
      dataFromFile.insert(offset, data)
      testString = "".join(dataFromFile)
      
      
      thisdata = testString
      startByte = 0
      endByte = startByte + 8
      lastByte = len(thisdata)
    
    
      if len(thisdata) < 8:
        startByte = 0
        endByte = lastByte
      if endByte >= lastByte:
        endByte = lastByte
      
      oddCount = 0
      while endByte <= lastByte:

        eightbytesequence = thisdata[startByte:endByte]
        for thisByte in eightbytesequence:
          # increments odd parity counter
          if ord(thisByte) % 2 == 1:
            oddCount += 1
        if oddCount % 2 == 1:
          log(oddCount)
          raise RepyParityError("Non-even parity write to file")
          break
        # append it to the array to write later
        else:
          pass
      
        if endByte == lastByte:
          break
        elif lastByte - endByte < 8:
          startByte += 8
          endByte = lastByte
          continue
        else:
          endByte += 8
          startByte += 8
      self.file.writeat(testString, 0)
  
  def readat(self,bytes,offset):
    # Read from the file using the sandbox's readat...
    return self.file.readat(bytes,offset)

  def close(self):
    self.file.close()


def parityopenfile(filename, create):
  return EvenParityFile(filename,create)




# The code here sets up type checking and variable hiding for you.  You
# should not need to change anything below here.
sec_file_def = {"obj-type":EvenParityFile,
                "name":"EvenParityFile",
                "writeat":{"type":"func","args":(str,(int,long)),"exceptions":Exception,"return":(int,type(None)),"target":EvenParityFile.writeat},
                "readat":{"type":"func","args":((int,long,type(None)),(int,long)),"exceptions":Exception,"return":str,"target":EvenParityFile.readat},
                "close":{"type":"func","args":None,"exceptions":None,"return":(bool,type(None)),"target":EvenParityFile.close}
           }

CHILD_CONTEXT_DEF["openfile"] = {"type":"objc","args":(str,bool),"exceptions":Exception,"return":sec_file_def,"target":parityopenfile}
CHILD_CONTEXT_DEF["RepyParityError"] = {"type":"any","target":RepyParityError}
# Execute the user code
secure_dispatch_module()
