
#Global variable
class RepyParityError(Exception):
    pass

#Create parity file
class EvenParityFile():
  def __init__(self,filename,create):
    mycontext['debug'] = False   
    self.fn = filename
    self.file = openfile(self.fn,create)

  def writeat(self,data,offset):
      log("calling writeat\n")

      #After extracting the data, check parity. When offset hits 0, we output Negative sizelimite error and start at 0. If offset is too late write to file end and stop write
      if offset !=  0:
          Sequence = self.file.readat(offset-1,offset - (offset%8))
      else:
          Sequence = ""
      Sequence += data
      dataEndIndex = offset + len(data) - 1
      readStartIndex = dataEndIndex - 1
      readEndIndex = (8 * (dataEndIndex/8+1))-1
      Sequence += self.file.readat(readEndIndex, readStartIndex)
      this_data = Sequence
      while this_data:
          eightbytesequence = this_data[:8]
          this_data = this_data[8:]
          even = parityCheck(eightbytesequence)
          if even:
              self.file.writeat(eightbytesequence,offset)
              # ...or error out.
          else:
              log("failed\n")
              raise RepyParityError("Write to file")

          
  
  def readat(self,bytes,offset):
    # Read from the file using the sandbox's readat...
    log("calling readat\n")
    return self.file.readat(bytes,offset)

  def close(self):
    self.file.close()


def parityopenfile(filename, create):
  return EvenParityFile(filename,create)

#Checks parity of each byte sequence
def parityCheck(eightbytesequence):
    count = 0
    for thisbyte in eightbytesequence:
        if (ord(thisbyte) % 2):
            count += 1
    if(count % 2 == 0):
        return True
    else:
        return False


# The code here sets up type checking and variable hiding for you.  You
# should not need to change anything below here.
sec_file_def = {"obj-type":EvenParityFile,
                "name":"EvenParityFile",
                "writeat":{"type":"func","args":(str,(int,long)),"exceptions":Exception,"return":(int,type(None)),"target":EvenParityFile.writeat},
                "readat":{"type":"func","args":((int,long,type(None)),(int,long)),"exceptions":Exception,"return":str,"target":EvenParityFile.readat},
                "close":{"type":"func","args":None,"exceptions":None,"return":(bool,type(None)),"target":EvenParityFile.close}
           }

CHILD_CONTEXT_DEF["openfile"] = {"type":"objc","args":(str,bool),"exceptions":Exception,"return":sec_file_def,"target":parityopenfile}
CHILD_CONTEXT_DEF["RepyParityError"] = {"type":"any","target":RepyParityError}
# Execute the user code
secure_dispatch_module()
