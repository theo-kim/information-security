"""
This security layer inadequately handles parity for files in RepyV2.



Note:
    This security layer uses encasementlib.r2py, restrictions.default, repy.py and Python
    Also you need to give it an application to run.
    python repy.py restrictions.default encasementlib.r2py [security_layer].r2py [attack_program].r2py

    """
class RepyParityError(Exception):
    pass

class EvenParityFile():
  def __init__(self,filename,create):
    # globals
    mycontext['debug'] = False
    # local (per object) reference to the underlying file
    self.fn = filename


    self.file = openfile(self.fn,create)

  def help(self,thisdata,offset):
    sequence_num = 0
    lock = createlock()
    lock.acquire(True)
    while thisdata:

                eightbytesequence = thisdata[:8]
                thisdata = thisdata[8:]
                even = True
                count = 0

                for thisbyte in eightbytesequence:
                    # for each byte, if it is odd, flip even to be the opposite
                    if ord(thisbyte) % 2:
                        even = not even
                        count += 1

                # actually call write, if we are supposed to...
                if even:
                   self.file.writeat(eightbytesequence,offset+sequence_num)
                # ...or error out.
                elif count%2==0:
                  self.file.writeat(eightbytesequence,offset+sequence_num)

                else:
                   raise RepyParityError("Non-even parity write to file")

                sequence_num = sequence_num+8
    lock.release()

  def writeat(self,data,offset):

    # check the parity of the data written
    # NOTE: This is wrong in many ways!!!!
    thisdata = data
    sequence_num = 0
    lock = createlock()
    lock.acquire(True)
    myfilecontent = self.file.readat(None,0)


    if not myfilecontent:
        self.help(thisdata,offset)
    else:
        # length of the new write data
        data_len = len(thisdata)
        if offset < len(myfilecontent) and (offset + len(thisdata)) <= len(myfilecontent):
            # create the new string after write new letter
            thisdata = myfilecontent[:offset] + thisdata + myfilecontent[offset+data_len:]
            offset = 0
            sequence_num = 0

            # do validation
            self.help(thisdata,offset)

        if offset <= len(myfilecontent) and (offset + len(thisdata)) > len(myfilecontent):
            # create the new string after write new letter
            thisdata = myfilecontent[:offset] + thisdata
            offset = 0
            sequence_num = 0

            # do validation
            self.help(thisdata,offset)

        if offset == len(myfilecontent):
            # create the new string after write new letter
            thisdata = myfilecontent + thisdata
            # do vilidation
            offset = 0
            sequence_num = 0

            # do validation
            self.help(thisdata,offset)

        if offset > len(myfilecontent):
            raise RepyParityError("Non gaps write to file")
    lock.release()


  def readat(self,bytes,offset):
    # Read from the file using the sandbox's readat...
    return self.file.readat(bytes,offset)

  def close(self):
    self.file.close()


def parityopenfile(filename, create):
  return EvenParityFile(filename,create)




# The code here sets up type checking and variable hiding for you.  You
# should not need to change anything below here.
sec_file_def = {"obj-type":EvenParityFile,
                "name":"EvenParityFile",
                "writeat":{"type":"func","args":(str,(int,long)),"exceptions":Exception,"return":(int,type(None)),"target":EvenParityFile.writeat},
                "readat":{"type":"func","args":((int,long,type(None)),(int,long)),"exceptions":Exception,"return":str,"target":EvenParityFile.readat},
                "close":{"type":"func","args":None,"exceptions":None,"return":(bool,type(None)),"target":EvenParityFile.close}
           }

CHILD_CONTEXT_DEF["openfile"] = {"type":"objc","args":(str,bool),"exceptions":Exception,"return":sec_file_def,"target":parityopenfile}
CHILD_CONTEXT_DEF["RepyParityError"] = {"type":"any","target":RepyParityError}
# Execute the user code
secure_dispatch_module()