"""
This security layer inadequately handles parity for files in RepyV2.
By using the mod function, this program is able figure out where the beginning of the
Offset will be added and check that line and any other future lines that may be effected



Note:
    This security layer uses encasementlib.r2py, restrictions.default, repy.py and Python
    Also you need to give it an application to run.
    python repy.py restrictions.default encasementlib.r2py [security_layer].r2py [attack_program].r2py 
    
    """ 
class RepyParityError(Exception):
    pass

class EvenParityFile():
  def __init__(self,filename,create):
    # globals
    mycontext['debug'] = False   
    # local (per object) reference to the underlying file
    self.fn = filename
 
    self.file = openfile(self.fn,create)


  def writeat(self,data,offset):
    
    copyOfData = data
    sizeData = len(copyOfData) #get size of the data 
    copyOffset = offset #copy offset
    if(offset == 0):
      specByteInSequence = 0
    if (offset < 8 and offset != 0):
      specByteInSequence = copyOffset
    else:
      specByteInSequence = copyOffset % 8 # which bit in 8 byte to write too in spec line
    writeBeginOffset = copyOffset - specByteInSequence # begin byte sequence of line
    totalByteToCheck = sizeData + specByteInSequence 
    totalSequence = (totalByteToCheck / 8 ) + 1 # number of sequences to check 
    totalByteInThird = (totalSequence * 8)- specByteInSequence + 1 - sizeData 
    fileData = self.file.readat(None, 0)
    fileSize = len(fileData)
    if fileSize != 0:
      fileData[0:1]
    if copyOffset <= fileSize:
      firstPart = fileData[writeBeginOffset : writeBeginOffset+specByteInSequence]
      secondPart = data 
      thirdPart = fileData[writeBeginOffset+specByteInSequence-1+sizeData : fileSize]
    totalData = firstPart+ secondPart + thirdPart
    evenCount = 0
    completedParity = False 
    while completedParity == False:
        evenCount = 0
        if len(totalData) >= 8:
          eightbytesequence = totalData[:8]
          totalData = totalData[8:]
        else:
          eightbytesequence = totalData 
          completedParity = True 
        for thisbyte in eightbytesequence:
          # for each byte, if it is odd, flip even to be the opposite
          if ord(thisbyte) % 2 != 0:
            evenCount +=1 
            
        # actually call write, if we are supposed to...
        if evenCount % 2 == 0:
          self.file.writeat(eightbytesequence,offset)
        # ...or error out.
        else:
          raise RepyParityError("Non-even parity write to file")
  
  
  def readat(self,bytes,offset):
    # Read from the file using the sandbox's readat...
    return self.file.readat(bytes,offset)

  def close(self):
    self.file.close()


def parityopenfile(filename, create):
  return EvenParityFile(filename,create)




# The code here sets up type checking and variable hiding for you.  You
# should not need to change anything below here.
sec_file_def = {"obj-type":EvenParityFile,
                "name":"EvenParityFile",
                "writeat":{"type":"func","args":(str,(int,long)),"exceptions":Exception,"return":(int,type(None)),"target":EvenParityFile.writeat},
                "readat":{"type":"func","args":((int,long,type(None)),(int,long)),"exceptions":Exception,"return":str,"target":EvenParityFile.readat},
                "close":{"type":"func","args":None,"exceptions":None,"return":(bool,type(None)),"target":EvenParityFile.close}
           }

CHILD_CONTEXT_DEF["openfile"] = {"type":"objc","args":(str,bool),"exceptions":Exception,"return":sec_file_def,"target":parityopenfile}
CHILD_CONTEXT_DEF["RepyParityError"] = {"type":"any","target":RepyParityError}
# Execute the user code
secure_dispatch_module()