"""
This security layer inadequately handles parity for files in RepyV2.

Note:
    This security layer uses encasementlib.r2py, restrictions.default, repy.py and Python
    Also you need to give it an application to run.
    python repy.py restrictions.default encasementlib.r2py [security_layer].r2py [attack_program].r2py 
    
    """ 
class RepyParityError(Exception):
    pass

class EvenParityFile():
  def __init__(self,filename,create):
    # globals
    mycontext['debug'] = False   
    # local (per object) reference to the underlying file
    self.fn = filename
 
    self.file = openfile(self.fn,create)
  
  # read data from file 
  # return '' if not success
  def read(self, offset, bytes):
    try:
      data = self.readat(bytes, offset)
    except Exception:
      return ''
    else:
      return data
  
  # return 1 is char is an even character
  def getEven(self, char):
    if ord(char) % 2:
      return 0
    else:
      return 1

  # check write data from [left, right] to blcok [start, end], end - start + 1 == 8
  def checkCanWriteToBlcok(self, start, end, data, left, right):
    even_count = 0
    for j in range(start, end + 1):
        # in writen data range
        if j >= left and j <= right:
          ch = data[j - left:j - left +1]
        else:
          ch = self.read(j, 1)
          if ch == '':
            return False
          
        even_count = even_count + self.getEven(ch)
        
    if even_count % 2:
        raise RepyParityError("Non-even parity write to file")
    return True

  def checkCanWrite(self, data, offset):
      length = len(data)
      left = offset
      right = left + length - 1

      if left > 0 and self.read(left - 1, 1) == '':
        return False
      # write to [left, right)
      left_block_start = ((int)(left / 8))
      right_block_start = ((int)(right / 8))

      # [left_block_start, right_block_start)
      for i in range(left_block_start, right_block_start):
        if not self.checkCanWriteToBlcok(i * 8, i * 8 + 7, data, left, right):
          return False
    
      # right_block_start
      last_block_start = right_block_start * 8
      last_block_end = last_block_start + 7

      is_ignore_last_block = False
      last_block_last_byte = self.read(last_block_end, 1)

      if last_block_last_byte == '' and right < last_block_end:
        is_ignore_last_block = True
      
      if not is_ignore_last_block:
        if not self.checkCanWriteToBlcok(last_block_start, last_block_end, data, left, right):
          return False
      return True

  def writeat(self,data,offset):
   
    # check the parity of the data written
    # NOTE: This is wrong in many ways!!!!
    
    if self.checkCanWrite(data, offset):
      self.file.writeat(data,offset)

  def readat(self,bytes,offset):
    # Read from the file using the sandbox's readat...
    return self.file.readat(bytes,offset)

  def close(self):
    self.file.close()

def parityopenfile(filename, create):
  return EvenParityFile(filename,create)

# The code here sets up type checking and variable hiding for you.  You
# should not need to change anything below here.
sec_file_def = {"obj-type":EvenParityFile,
                "name":"EvenParityFile",
                "writeat":{"type":"func","args":(str,(int,long)),"exceptions":Exception,"return":(int,type(None)),"target":EvenParityFile.writeat},
                "readat":{"type":"func","args":((int,long,type(None)),(int,long)),"exceptions":Exception,"return":str,"target":EvenParityFile.readat},
                "close":{"type":"func","args":None,"exceptions":None,"return":(bool,type(None)),"target":EvenParityFile.close}
           }

CHILD_CONTEXT_DEF["openfile"] = {"type":"objc","args":(str,bool),"exceptions":Exception,"return":sec_file_def,"target":parityopenfile}
CHILD_CONTEXT_DEF["RepyParityError"] = {"type":"any","target":RepyParityError}
# Execute the user code
secure_dispatch_module()