if "testfile.txt" in listfiles():
  removefile("testfile.txt")

myfile=openfile("testfile.txt",True)  #Create a parity file

#returns whether write was rejected due to parity correctly or not
def writeRejected(myfile, data, offset):
  try:
    myfile.writeat(data, offset)
  except RepyParityError:
    return
  
  raise Exception("Expected write rejection but actually succeeded")

#Asserts that what was written was actually written
def assertWrite(myfile, data, offset):
  myfile.writeat(data, offset)
  assert(data == myfile.readat(len(data), offset))

try:
  assertWrite(myfile, "AA", 0)

  writeRejected(myfile, "BCBCBC", 2)
  assertWrite(myfile, b"\x00\x00\x00\x00\x00\x00\x00\x00\x00", 2)

  writeRejected(myfile, b"\x01\x01\x01", 2)
  assertWrite(myfile, b"\x00\x00", 2)

  # Now we have 11 zeros written to the file
  writeRejected(myfile, b"\x01\x00\x01", 6)
  
  assertWrite(myfile, b"\x00\x00\x01", 6)
  
  writeRejected(myfile, b"\x01\x01\x00\x00\x00\x00\x00", 9)
  
  # Clear file
  assertWrite(myfile, b"\x00" * 10, 0)

  writeRejected(myfile, b"\x01\x01\x01\x01\x01\x00", 10)
  
  assertWrite(myfile, b"\x01\x01\x01\x01\x01\x01", 10)

except Exception as e:
  log("Threw error when not expected\n")
  log(e)
  log("\n")
finally:
  myfile.close()
