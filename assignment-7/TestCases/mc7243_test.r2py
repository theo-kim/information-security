# Test parity

if "testfile.txt" in listfiles():
  removefile("testfile.txt")

myfile=openfile("testfile.txt",True)  #Create a parity file

# put some valid data in the file.
myfile.writeat("AA",0)

# I should be able to read it out.
assert('AA' == myfile.readat(None,0))

# However, this write should fail...
try:
  myfile.writeat("BCBCBC",2)
except RepyParityError:
  pass  # should happen
else:
  log("should have been an error instead!\n")

############################

myfile.writeat("AAAAAAAA",0)
myfile.writeat("AAAAAAAA",8)
myfile.writeat("AAAAAAAA",16)

try:
  myfile.writeat("BAAACAAAAAB",7)
except RepyParityError:
  pass  # should happen
else:
  log("should have been an error instead!\n")

try:
  myfile.writeat("CAAACAAAAAB",7)
except RepyParityError:
  pass  # should happen
else:
  log("should have been an error instead!\n")

try:
  myfile.writeat("BAAACAAAAAC",7)
except RepyParityError:
  pass  # should happen
else:
  log("should have been an error instead!\n")

myfile.writeat("CAAACAAAAAC",7) # should work

assert('CAAACAAAAAC' == myfile.readat(11,7))
          
############################

myfile.writeat("FFGFF",24)

assert('FFGFF' == myfile.readat(5,24))

############################

try:
  myfile.writeat("FFF",29)
except RepyParityError:
  pass  # should happen
else:
  log("should have been an error instead!\n")

myfile.writeat("GFF",29)

assert('FFGFFGFF' == myfile.readat(8,24))

############################

myfile.writeat("AAAAAAAAAAAAAAA",0)

assert('AAAAAAAA' == myfile.readat(8,8))

############################

try:
  myfile.writeat("CCCBCCCCB",3)
except RepyParityError:
  pass  # should happen
else:
  log("should have been an error instead!\n")

myfile.writeat("CCBBCCCBB",3)

assert('AAACCBBCCCBBAAA' == myfile.readat(15,0))

############################

myfile.writeat("AAAAAAAAAAAAAAAA",0)

try:
  myfile.writeat("B",1)
except RepyParityError:
  pass  # should happen
else:
  log("should have been an error instead!\n")

#Close the file
myfile.close()
