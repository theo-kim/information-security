if "testfile.txt" in listfiles():
  removefile("testfile.txt")

myfile=openfile("testfile.txt",True)  #Create a parity file

#returns whether write was rejected correctly or not
def writeRejected(myfile, data, offset):
  try:
    myfile.writeat(data, offset)
  except RepyParityError:
    return
  
  raise Exception("Expected write rejection but actually succeeded")

#Asserts that what was written was actually written
def assertWrite(myfile, data, offset):
  myfile.writeat(data, offset)
  assert(data == myfile.readat(len(data), offset))

# Test whether exceptions are consistent
try:
  assertWrite(myfile, b"\x00\x00\x01", 0)

  try:
    myfile.writeat(b"\x00\x00\x00", 4)
  except SeekPastEndOfFileError:
    pass

  try:
    myfile.writeat(123, "321")
  except RepyArgumentError:
    pass

  try:
    myfile.readat(None, 4)
  except SeekPastEndOfFileError:
    pass

  try:
    myfile.readat("123", -8)
  except RepyArgumentError:
    pass

except Exception as e:
  log("Threw error when not expected\n")
  log(e)
  log("\n")
finally:
  myfile.close()
