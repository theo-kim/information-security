# Valid Write Operation on an empty file

#log("start check: ")
# Clean up of existing file
if "testfile.txt" in listfiles():
 removefile("testfile.txt")

# Open File Function Call
myfile=openfile("testfile.txt",True)  #Create a file

#keep track to see if we can move on to part 2
goodSoFar = True

try:
 # write valid data onto the file.
 myfile.writeat("ABBA",0) #this should work
 # read from the file to see if the write was successful.
 assert('ABBA' == myfile.readat(4,0))

except: #AssertionError as error:
 myfile.close()
 goodSoFar = False

 # Error Handle or Failure Condition
 ##log("Valid data not written!\n")
else: #ABBA is there
 myfile.close()
 #log("part1 good;")

if (goodSoFar):
 myfile=openfile("testfile.txt",False) #open file again to try adding something bad

 #log("part 2 try;")

 try:
  myfile.writeat("ABBB",4) #this data is invalid

 except: #ParityError: #should get parity error
  myfile.close()
  #log("part 2 is good\n")
 else:
  myfile.close()
  log("part 2 failed, wrote too much (parity check false positive)\n")




#ignore the trial codes below
"""
 textAlreadyThere = myfile.readat(None,0)
 textSize = len(textAlreadyThere)
 log("textsize is: ", textSize, ";")
 if (textSize != 4):
  log("part 2 failed, wrote too much\n")
 elif (textSize == 4):
  #log("part2 good;")
 myfile.close()
 """


"""
 try:
  #if write executes then this will run
  log("write when not supposed to")

  log("part2write done;")

  assert("ABBAABBB" != myfile.readat(None,0)) #the file should still say the same thing before the 2nd write

 except: #AssertionError as error:
  myfile.close()
  log("double write failed\n")
 else:
  myfile.close()
  log("past test\n")
"""