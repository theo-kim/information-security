"""
This security layer inadequately handles parity for files in RepyV2.



Note:
    This security layer uses encasementlib.r2py, restrictions.default, repy.py and Python
    Also you need to give it an application to run.
    python repy.py restrictions.default encasementlib.r2py [security_layer].r2py [attack_program].r2py 
    
    """ 
class RepyParityError(Exception):
    pass

class EvenParityFile():
  def __init__(self,filename,create):
    # globals
    mycontext['debug'] = False   
    # local (per object) reference to the underlying file
    self.fn = filename
 
    self.file = openfile(self.fn,create)


  def writeat(self,data,offset):
    # assumptions (based on RePy API docs)
    # : writeat does NOT allow for writes to occur past the end of the file
    # : data is a string

    thisdata = data
    frontGroup = ""
    backGroup = ""
    frontLen = 8
    backLen = 8

    if offset % 8 != 0 :
      frontLen = (offset % 8)
      frontOffset = offset - frontLen
      frontGroup = self.readat(frontLen, frontOffset) + thisdata[:(8 - frontLen)]

    if not self.checkParity(frontGroup) :
      raise RepyParityError("Non-even parity write to file")

    if (offset + len(thisdata)) % 8 != 0 :
      backLen = 8 - ((offset + len(thisdata)) % 8)
      backOffset = offset + len(thisdata)
      backGroup = self.readat(backLen, backOffset) + thisdata[-(8 - backLen): ]

    if not self.checkParity(backGroup) :
      raise RepyParityError("Non-even parity write to file")

    thisdata = thisdata[(8 - frontLen) : -(8 - backLen)]

    if not self.checkParity(thisdata) :
      raise RepyParityError("Non-even parity write to file")
    
    #go ahead and write the file if everything checksout
    self.file.writeat(data,offset)  
  
  def readat(self,bytes,offset):
    # Read from the file using the sandbox's readat...
    return self.file.readat(bytes,offset)

  def close(self):
    self.file.close()

  def checkParity(self, string) :
    even = True
    while string:
      eightbytesequence = string[:8]
      string = string[8:]
      even = True
      for thisbyte in eightbytesequence:
        # for each byte, if it is odd, flip even to be the opposite
        if ord(thisbyte) % 2:
          even = not even
      if not even :
        break
    return even

def parityopenfile(filename, create):
  return EvenParityFile(filename,create)




# The code here sets up type checking and variable hiding for you.  You
# should not need to change anything below here.
sec_file_def = {"obj-type":EvenParityFile,
                "name":"EvenParityFile",
                "writeat":{"type":"func","args":(str,(int,long)),"exceptions":Exception,"return":(int,type(None)),"target":EvenParityFile.writeat},
                "readat":{"type":"func","args":((int,long,type(None)),(int,long)),"exceptions":Exception,"return":str,"target":EvenParityFile.readat},
                "close":{"type":"func","args":None,"exceptions":None,"return":(bool,type(None)),"target":EvenParityFile.close}
           }

CHILD_CONTEXT_DEF["openfile"] = {"type":"objc","args":(str,bool),"exceptions":Exception,"return":sec_file_def,"target":parityopenfile}
CHILD_CONTEXT_DEF["RepyParityError"] = {"type":"any","target":RepyParityError}
# Execute the user code
secure_dispatch_module()